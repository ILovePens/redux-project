{"version":3,"sources":["history.js","localStorage.js","pages/Connexion.js","features/nav/navSlice.js","features/general/helpers/Components.js","features/nav/Nav.js","base.js","features/connectX/connectXAPI.js","features/connectX/connectXSlice.js","features/connectX/components/Slot.js","features/connectX/ConnectXTransitions.js","features/connectX/components/Board.js","features/connectX/components/Form.js","features/connectX/ConnectX.js","features/general/helpers/Functions.js","pages/InfosPage.js","App.js","pages/NotFound.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/tictactoe/tictactoeSlice.js","app/store.js","index.js","features/connectX/ConnectX.module.css"],"names":["createBrowserHistory","loadSessionItems","name","serializedItems","sessionStorage","getItem","JSON","parse","err","saveSessionItems","items","stringify","setItem","console","log","Connexion","goToApp","event","preventDefault","pseudo","pseudoInput","value","stamp","Date","toString","history","push","className","onSubmit","i","type","placeholder","required","pattern","ref","input","React","Component","navSlice","createSlice","initialState","reducers","reset","state","actions","Switch","props","checked","isOn","onClick","readOnly","Reset","title","Nav","itemSelected","navItems","Object","keys","map","key","index","handleClick","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getFirestore","compareGameState","turnData","db","getDatabase","Promise","resolve","get","then","readTurnAction","exists","readStepNumber","val","turnAction","stepNumber","dataSnapshot","catch","error","readPlayers","readGameState","isInit","players","gameSettings","snapshot","gameIsOn","slots","Array","fill","boardFlip","number","width","height","scoreTarget","asyncStatus","currentSign","sortIsAsc","gravityState","transitions","board","status","animations","updateStateAsync","createAsyncThunk","a","response","setGameStateAsync","thunkAPI","selectPlayers","getState","playerCount","length","set","selectGameSettings","dispatch","sendGameSettings","removePlayers","requestGame","connectXSlice","fillSlot","action","data","payload","current","slotIndex","slotValue","isEndTurn","slice","concat","gravity","singleSlotMode","isAction","toggle","noEditMode","noEdit","count","slotScore","j","l","targetIndex","startOfTurn","hasTransitions","filter","el","flipBoardState","flipValue","newSlots","rowCount","gravIsOff","endTurn","changeStep","toggleSort","setGameSettings","settings","setAsyncStatus","isDbReset","baseRef","extraReducers","builder","addCase","pending","fulfilled","window","alert","playersRefs","playersCount","statePlayers","statePlayersCount","signs","player","sign","selectHistory","connectX","selectStepNumber","selectSortIsAsc","selectGravityState","selectCurrentSign","selectTurnAction","selectTransitions","selectAnimations","flipBoard","direction","playerInfos","watchTimer","setInterval","clearInterval","Slot","transitionClass","speed","styles","hasTransition","fall","Math","round","contentClass","slotFilled","slotFilledX","slotFilledO","animType","animation","winClass","winStyle","wonSlot","slot","style","onTransitionEnd","handleTransitionEnd","styleWin","from","document","querySelectorAll","forEach","e","classList","remove","add","win","Board","renderSlot","isBoardWon","transition","transitionCallback","onClickFunc","undefined","winIndexes","includes","maxScore","sort","b","findIndex","createBoard","boardParams","isMainBoard","slotTransitions","slotAnimations","slotTransition","slotAnimation","board_row","startAngle","main_board","flip","isSelected","selected","styleBoard","size","paramsHeight","paramsWidth","slotSize","floor","innerHeight","slotSizeDiff","fontSize","this","transitionedElements","setTimeout","transitionBoards","cssCoeff","boardClass","moves_board","disabledClass","statusHandler","main","statusClass","disabled","disabledBoard","endTurnFunc","previous","Form","prepareInfos","parseInt","minVal","gameInfos","infosForm","maxLength","ConnectX","useDispatch","useSelector","currentSlots","gameSettingsForm","requestGameButton","endTurnButton","resetButton","gameControls","disabledGameControls","playSlotFunc","asyncGameStatus","gameStyle","reverseGameStyle","idStamp","myPlayer","find","isPlayer","waitingForGame","inGame","onunload","mySign","isMyTurn","updateDb","watchGame","highlighted","redPlayerTurn","bluePlayerTurn","previousAction","canEndTurn","fadeInOnHover","fadeout","boardWidth","rowLength","winSlots","finalWinSlots","indexes","currentValue","streakL","streakR","streakT","streakB","streakTL","streakBR","streakTR","streakBL","calculateWinner","moves","step","move","desc","isLatestHistoryMove","jumpTo","streakCount","game","game_info","controls","scrollableX","InfosPage","connectXInfos","App","bind","setState","vh","documentElement","setProperty","target","createElement","NotFound","fetchCount","amount","incrementAsync","counterSlice","increment","decrement","incrementByAmount","squares","winSquares","xIsNext","tictactoeSlice","combinedReducer","combineReducers","nav","navReducer","counter","counterReducer","tictactoe","tictactoeReducer","connectXReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","configureStore","reducer","middleware","baseURL","ReactDOM","render","StrictMode","store","exact","path","component","getElementById","module","exports"],"mappings":"2NAEeA,gB,oCCDFC,EAAmB,SAACC,GAChC,IACC,IAAMC,EAAkBC,eAAeC,QAAQH,GAC/C,GAAuB,OAApBC,EACF,OAGD,OAAOG,KAAKC,MAAMJ,GACjB,MAAOK,GACR,SAIWC,EAAmB,SAACC,EAAOR,GACvC,IACC,IAAMC,EAAkBG,KAAKK,UAAUD,GACvCN,eAAeQ,QAAQV,EAAMC,GAC5B,MAAOK,GACRK,QAAQC,IAAIN,K,OCmBCO,E,4MA/BdC,QAAU,SAAAC,GACTA,EAAMC,iBACNL,QAAQC,IAAR,gBACA,IAAMK,EAAS,EAAKC,YAAYC,MAChCZ,EAAiB,CAACU,OAAOA,EAAQG,QAAQ,IAAIC,MAAQC,SAAS,KAAM,eACpEC,EAAQC,KAAR,oB,4CAGD,WAAU,IAAD,OACR,OACC,sBAAKC,UAAU,eAAf,UACG,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,OAAd,8BAEF,6CAAe,uBAAf,0MAEA,0HACF,uBAAMA,UAAU,iBAAiBC,SAAU,SAACC,GAAD,OAAO,EAAKb,QAAQa,IAA/D,UACC,uBACCC,KAAK,OACLC,YAAY,OACZC,UAAQ,EACRC,QAAQ,qBACRC,IAAK,SAAAC,GAAU,EAAKf,YAAce,KACnC,wBAAQL,KAAK,qB,GAzBMM,IAAMC,W,QCDjBC,EAAWC,YAAY,CAClCrC,KAAM,MACNsC,aALmB,GAOnBC,SAAU,CACRC,MAAO,SAAAC,QAWIL,GAHUA,EAASM,QAAnBF,MAGAJ,EAAf,SCnBO,SAASO,EAAOC,GACrB,OACE,wBAAOnB,UAAU,SAAjB,UACA,uBACCG,KAAK,WACLiB,QAASD,EAAME,KACfC,QAASH,EAAMG,QACfC,UAAQ,IAET,sBAAMvB,UAAU,cAKb,SAASwB,EAAML,GACpB,OACE,wBAAQnB,UAAU,QAAQsB,QAASH,EAAMG,QAAzC,SACEH,EAAMM,QCdL,SAASC,EAAIP,GAClB,IAAMQ,EAAeR,EAAMQ,aACrBC,EAAWC,OAAOC,KAAKX,EAAMpC,OAC5BgD,KAAI,SAACC,EAAIC,GAAL,OACH,wBACE1D,KAAMyD,EAENhC,UAAW2B,IAAiBK,EAAM,WAAa,GAC/CV,QAASK,IAAiBK,EAAM,aAAU,SAAC9B,GAAD,OAAOiB,EAAMe,YAAYhC,IAJrE,SAKW,MAAR8B,EAAA,eAAsBA,GAAQA,GAH1BC,MAMf,OACE,yBAAQjC,UAAU,aAAlB,UACE,oBAAIA,UAAU,OAAd,4BACA,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBmB,EAAM3B,SAC9BoC,Q,2DCTHO,EAAMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,yEACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,gBACnBC,MAAO,+CAIIC,YAAaT,GCZnB,SAASU,EAAiBC,GAChC,IAAMC,EAAKC,cACV,OAAO,IAAIC,SAAQ,SAACC,GACpBC,YAAI5C,YAAIwC,EAAD,gBAAqBK,MAAK,SAACC,GAC7BA,EAAeC,SAClBH,YAAI5C,YAAIwC,EAAD,gBAAqBK,MAAK,SAACG,GAC7BA,EAAeD,SACXD,EAAeG,QAAUV,EAASW,YAAcF,EAAeC,QAAUV,EAASY,WACtFP,YAAI5C,YAAIwC,EAAD,MAAWK,MAAK,SAACO,GACrBA,EAAaL,SACZJ,EAAQS,EAAaH,OAEvBtE,QAAQC,IAAI,wBAEXyE,OAAM,SAACC,GACV3E,QAAQ2E,MAAMA,MAGdV,YAAI5C,YAAIwC,EAAD,aAAkBK,MAAK,SAACU,GAC5BA,EAAYR,UAAkC,IAAtBQ,EAAYN,OACnCN,EAAQ,MAETU,OAAM,SAACC,GACV3E,QAAQ2E,MAAMA,MAIf3E,QAAQC,IAAI,wBAEbyE,OAAM,SAACC,GACR3E,QAAQ2E,MAAMA,MAGd3E,QAAQC,IAAI,wBAEbyE,OAAM,SAACC,GACR3E,QAAQ2E,MAAMA,SAKX,SAASE,EAAcC,GAC7B,IAAMjB,EAAKC,cACV,OAAO,IAAIC,SAAQ,SAACC,GACpBC,YAAI5C,YAAIwC,EAAD,aAAkBK,MAAK,SAACa,GAC1BA,EAAQX,SACPU,EACHd,EAAQ,CAACe,QAASA,EAAQT,QAE1BL,YAAI5C,YAAIwC,EAAD,kBAAuBK,MAAK,SAACc,GAC/BA,EAAaZ,SAChBH,YAAI5C,YAAIwC,EAAD,cAAmBK,MAAK,SAACe,GAC3BA,EAASb,SACVJ,EAAQ,CAACe,QAASA,EAAQT,MAAOU,aAAcA,EAAaV,MAAOY,SAAUD,EAASX,QAEtFtE,QAAQC,IAAI,wBAEbyE,OAAM,SAACC,GACR3E,QAAQ2E,MAAMA,MAGd3E,QAAQC,IAAI,wBAEbyE,OAAM,SAACC,GACR3E,QAAQ2E,MAAMA,MAIf3E,QAAQC,IAAI,wBAEbyE,OAAM,SAACC,GACR3E,QAAQ2E,MAAMA,SCnElB,IAAMhD,EAAe,CACnBf,QAAS,CAAC,CACRuE,MAAOC,MAAM,IAAIC,KAAK,GACtBC,UAAW,IAEbf,WAAY,CAACgB,OAAO,EAAGtE,KAAK,GAC5BuD,WAAY,EACZQ,aAAc,CACZQ,MAAO,EACPC,OAAQ,EACRC,YAAa,GAEfC,YAAa,GACbC,YAAa,IACbb,QAAS,KACTc,WAAW,EACXC,cAAc,EACdC,YAAa,CAACZ,MAAM,EAAGa,MAAM,EAAGC,OAAO,GACvCC,WAAY,GAKDC,EAAmBC,YAC9B,4BAD8C,uCAE9C,WAAOxC,GAAP,eAAAyC,EAAA,sEACyB1C,EAAiBC,GAD1C,cACQ0C,EADR,yBAESA,GAFT,2CAF8C,uDAQnCC,EAAoBH,YAC/B,yBAD+C,uCAE/C,WAAOtB,EAAQ0B,GAAf,mBAAAH,EAAA,sEACyBxB,EAAcC,GADvC,UACQwB,EADR,OAEMvB,EAAUuB,EAASvB,SACnBD,EAHN,qBAIQ2B,GAAcD,EAASE,YAJ/B,iDAOW3B,IAASA,EAAU,IAP9B,gCAYwB,KAFd4B,EAAchE,OAAOC,KAAKmC,GAAS6B,SAGvCC,YAAIxF,YAAIyC,cAAe,kBAAmBgD,EAAmBN,EAASE,aACtEG,YAAIxF,YAAIyC,cAAe,eAAe,IACb,IAAhB6C,IACLL,EAASpB,SACXsB,EAASO,SAASC,GAAiBV,EAAStB,eAE5CwB,EAASO,SAASlF,GAAM,KAGxB8E,EAAc,IAChBH,EAASO,SAASE,KAClBT,EAASO,SAASG,GAAY9H,MAC9B2F,EAAU,IAzBhB,iCA4BSA,GA5BT,4CAF+C,yDAkCpCoC,EAAgBzF,YAAY,CACvCrC,KAAM,WACNsC,eAEAC,SAAU,CACRwF,SAAU,SAACtF,EAAOuF,GAEhB,IAAMC,EAAOD,EAAOE,QAChB/C,EAAa8C,EAAK9C,WAClB5D,EAAU0G,EAAK1G,QACb4G,EAAUF,EAAKE,QACfrC,EAAQmC,EAAKnC,MACbsC,EAAYH,EAAKG,UACjBC,EAAY5F,EAAM8D,YAExBT,EAAMsC,GAAaC,EAEnB,IAAMnD,EAAazC,EAAMyC,YACJA,EAAWtD,MACfuD,IACjB1C,EAAM0C,WAAaA,EAEnB,IAAMmD,EAAYpD,EAAWgB,OAAS,IAlErB,EAoEjB,IADmBzD,EAAMgE,aACV,CACb,IAAMN,EAAQ1D,EAAMkD,aAAaQ,MAC7BC,EAAS3D,EAAMkD,aAAaS,OAEhC,GADmB+B,EAAQlC,UAAY,IAAM,EAAiC,IAA7BH,EAAMsC,EAAYjC,GAA6C,IAA9BL,EAAMsC,EAAYhC,GACpF,CACd,IAAIS,EAAapE,EAAMoE,WAAapE,EAAMoE,WAAW0B,QAAUxC,MAAMI,EAAQC,GAAQJ,KAAK,GAC1Fa,EAAWuB,GAAa,WACxB3F,EAAMoE,WAAaA,EAGrBpE,EAAMiE,YAAc,CAACZ,MAAM,EAAGa,MAAM,GAChC2B,GACF7F,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,GACnCa,EAAM8D,YAA4B,MAAd8B,EAAoB,IAAM,MAE9C5F,EAAMyC,WAAWgB,QAAU,EAC3BzD,EAAMyC,WAAWtD,KAAO,QAG1Ba,EAAMyC,WAAWgB,QAAU,EAC3BzD,EAAMyC,WAAWtD,KAAO,EAG1BL,EAAUA,EAAQgH,MAAM,EAAGpD,GAC3B1C,EAAMlB,QAAUA,EAAQiH,OAAO,CAAC,CAAC1C,MAAOA,EAAOG,UAAWkC,EAAQlC,aAElE,IAAMP,EAAUjD,EAAMiD,QAClBA,GAA8B,IAAnBA,EAAQ6B,SAAc9E,EAAMyC,WAAW8C,QAAS,IAwBjES,QAAS,SAAChG,EAAOuF,GACf,IAYIM,EAZEF,EAAYJ,EAAOE,QAAQE,UAC3BM,EAAsC,qBAAdN,EAG1BjD,EAAa1C,EAAM0C,WACnB5D,EAAUkB,EAAMlB,QAAQgH,MAAM,EAAGpD,EAAa,GAC5CgD,EAAU5G,EAAQ4D,GAClBW,EAAQqC,EAAQrC,MAAMyC,QAEtBI,EAAWX,EAAOE,QAAQU,OAC5BnC,EAAehE,EAAMgE,aACnBvB,EAAazC,EAAMyC,WAGzB,GADEvE,QAAQC,IAAI,WAAY+H,GACtBA,EAAU,CACZhI,QAAQC,IAAI,eAAgB6F,GAC5BA,GAAeA,EACf,IAAMf,EAAUjD,EAAMiD,QAClBA,GAA8B,IAAnBA,EAAQ6B,SAAc9E,EAAMyC,WAAW8C,QAAS,GAC/DM,EAAYpD,EAAWgB,OAAS,IA3IjB,OA6IfoC,EA7Ie,IA6IHpD,EAAWgB,OACvBvF,QAAQC,IAAI,YAAY0H,GAG1B,IAAMO,EAAab,EAAOE,QAAQY,OAClC,GAAIrC,GAAgBoC,EAAY,CAC9BpG,EAAMoE,WAAa,EACnB,IAAIV,EAAQ1D,EAAMkD,aAAaQ,MAC3BC,EAAS3D,EAAMkD,aAAaS,OAC5B+B,EAAQlC,UAAY,IAAM,IAC5BE,EAAQ1D,EAAMkD,aAAaS,OAC3BA,EAAS3D,EAAMkD,aAAaQ,OAG9B,IAAI4C,EAAQ,EACZ,GAAIL,EAAgB,CAGlB,IAFA,IAAIM,EAAY,EAERrH,EAAIyE,EAAS,EAAGzE,EAAI,EAAGA,IAG7B,GAAGyG,IAAczG,EAAI,GAAKwE,GAASiC,GAAazG,EAAIwE,EAAQ,EAAG,CAC7D6C,EAAY5C,EAASzE,EACrB,MAGJoH,EAAQC,EAKV,IAHA,IAAItC,EAAcX,MAAMI,EAAQC,GAAQJ,KAAK,GACzCa,EAAaH,EAAY6B,QAEpB5G,EAAImE,EAAMyB,OAAS,EAAIwB,EAAQ5C,EAAOxE,GAAK,EAAGA,GAAKwE,EAAO,CAEjE,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAO8C,IAAK,CAI9B,IAAIvF,EAAQ/B,EAAIsH,EAChB,GAAInD,EAAMpC,MAAYgF,GAAkBN,IAAc1E,GAAQ,CAC5D,IAAK,IAAIwF,EAAIH,EAAOG,EAAI,EAAGA,IAAK,CAC9B,IAAMC,EAAczF,EAAQyC,EAAQ+C,EACpC,IAAIpD,EAAMqD,GAAc,CAClBN,EACFhC,EAAWnD,GAAS,YAIpBoC,EAAMqD,GAAerD,EAAMpC,GAC3BoC,EAAMpC,GAAS,EACfgD,EAAYyC,GAAeD,GAE7B,OAGJ,GAAId,IAAc1E,EAAO,OAG7B,GAAIgF,EAAgB,MACpBK,KAIJ,IAAMK,GAAelE,EAAWtD,KAChC,GAAIiH,EACFpG,EAAMoE,WAAaA,MACd,CACDuC,GAAajE,IACjB1C,EAAM0C,WAAaA,EACfmD,GACF7F,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,EAAGoG,OAAO9C,EAAW8C,QACxDvF,EAAM8D,YAAoC,MAAtB9D,EAAM8D,YAAsB,IAAM,MAEtD9D,EAAMyC,WAAWgB,OAASyC,EAAWzD,EAAWgB,OAAS,EAAIhB,EAAWgB,OACxEzD,EAAMyC,WAAWtD,KAAO+G,EAAW,EAAIzD,EAAWtD,MAGpDL,EAAUA,EAAQgH,MAAM,EAAGpD,GAC3B1C,EAAMlB,QAAUA,EAAQiH,OAAO,CAAC,CAAC1C,MAAOA,EAAOG,UAAWkC,EAAQlC,aAClExD,EAAMgE,aAAeA,EAErB,IAAM4C,KAAiB3C,GAAeA,EAAY4C,QAAO,SAAAC,GAAO,OAAc,IAAPA,KAAYhC,OAAS,GAG5F9E,EAAMiE,YAAc,CAACZ,MAAOW,GAAe4C,EAAiB3C,EAAkB,EAAGC,MAAOgC,GAAmC,IAApBzD,EAAWtD,KAAf,EAAgCa,EAAMiE,YAAYC,SAiCzJ6C,eAAgB,SAAC/G,EAAOuF,GAItB,IAAI7C,EAAa1C,EAAM0C,WACnB5D,EAAUkB,EAAMlB,QAAQgH,MAAM,EAAGpD,EAAa,GAC5CgD,EAAU5G,EAAQ4D,GAClBW,EAAQqC,EAAQrC,MAAMyC,QAGtBkB,EAAYzB,EAAOE,QACrBjC,EAAYkC,EAAQlC,UAAYwD,GACjB,IAAfxD,IAAkBA,EAAY,GAChB,IAAdA,IAAiBA,EAAY,GAGjC,IAAIE,EAAQ1D,EAAMkD,aAAaQ,MAC3BC,EAAS3D,EAAMkD,aAAaS,OAC5B+B,EAAQlC,UAAY,IAAM,IAC5BE,EAAQ1D,EAAMkD,aAAaS,OAC3BA,EAAS3D,EAAMkD,aAAaQ,OAM9B,IAHA,IAAIuD,EAAW5D,EAAMyC,QACjBoB,EAAWvD,EAENzE,EAAImE,EAAMyB,OAAS,EAAG5F,GAAK,EAAGA,GAAKwE,EAAO,CAEjD,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAO8C,IAAK,CAC9B,IAAMvF,EAAQ/B,EAAIsH,EAIlBS,EAD+B,IAAdD,EAAkBrD,GAAU1C,EAAQ,GAAKiG,EAAW,GAAKxD,GAASwD,EAAWvD,GAAUuD,EAAWxD,EAAQ,EAAIzC,GAASiG,EAAW,GAC9H7D,EAAMpC,GAE7BiG,IAGF,IAAMzE,EAAazC,EAAMyC,YACJA,EAAWtD,MACfuD,IACjB1C,EAAM0C,WAAaA,EAEnB,IAAMmD,EAAYpD,EAAWgB,OAAS,IA5SrB,EA6SX0D,GAAanH,EAAMgE,aAErB6B,GAAasB,GACfnH,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,GACnCa,EAAM8D,YAAoC,MAAtB9D,EAAM8D,YAAsB,IAAM,MAEtD9D,EAAMyC,WAAWgB,QAAU,EAC3BzD,EAAMyC,WAAWtD,KAAO,GAG1BL,EAAUA,EAAQgH,MAAM,EAAGpD,GAC3B1C,EAAMlB,QAAUA,EAAQiH,OAAO,CAAC,CAAC1C,MAAO4D,EAAUzD,UAAWA,KAC7DxD,EAAMiE,YAAc,CAACZ,MAAO,EAAGa,OAAoB,GAAb8C,GAEtC,IAAM/D,EAAUjD,EAAMiD,QAClBA,GAA8B,IAAnBA,EAAQ6B,SAAc9E,EAAMyC,WAAW8C,QAAS,IAwBjE6B,QAAS,SAACpH,GAERA,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,EAAGoG,QAAO,GAC7CvF,EAAM8D,YAAoC,MAAtB9D,EAAM8D,YAAsB,IAAM,IACtD9D,EAAMiE,YAAc,CAACZ,MAAM,EAAGa,MAAM,EAAGC,OAAO,IAahDkD,WAAY,SAACrH,EAAOuF,GAClBvF,EAAM0C,WAAa6C,EAAOE,QAC1BzF,EAAM8D,YAAc9D,EAAM0C,WAAa,IAAM,EAAI,IAAM,IACvD1C,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,GACnCa,EAAMiE,YAAc,CAACZ,MAAM,EAAGa,MAAM,IAGtCoD,WAAY,SAACtH,GACXA,EAAM+D,WAAY/D,EAAM+D,UACxB/D,EAAMiE,YAAc,CAACZ,MAAM,EAAGa,MAAM,IAGtCqD,gBAAiB,SAACvH,EAAOuF,GACvB,IAAMiC,EAAWjC,EAAOE,QACxBzF,EAAMkD,aAAesE,EACrBxH,EAAMlB,QAAU,CAAC,CACfuE,MAAOC,MAAMkE,EAAS9D,MAAQ8D,EAAS7D,QAAQJ,KAAK,GACpDC,UAAW,KAIfiE,eAAgB,SAACzH,EAAOuF,GACtBvF,EAAM6D,YAAc0B,EAAOE,SAG7B1F,MAAO,SAACC,EAAOuF,GACb,IAAMmC,EAAYnC,EAAOE,QACnB3G,EAAUkB,EAAMlB,QAAQgH,MAAM,EAAE,GACtChH,EAAQ,GAAG0E,UAAY,EACvB,IAAMS,EAAc,CAACZ,MAAM,EAAGa,MAAM,GACpC,GAAIwD,EAAW,CACb,IAAM3F,EAAKC,cACP2F,EAAUpI,YAAIwC,EAAI,gBACtBgD,YAAI4C,EAAS,GACbA,EAAUpI,YAAIwC,EAAI,kBAClBgD,YAAI4C,EAAS3H,EAAMkD,cACnByE,EAAUpI,YAAIwC,EAAI,aAClBgD,YAAI4C,EAAS7I,GACb6I,EAAUpI,YAAIwC,EAAI,gBAClBgD,YAAI4C,EAAS,GACbA,EAAUpI,YAAIwC,EAAI,iBAClBgD,YAAI4C,EAAS,KACbA,EAAUpI,YAAIwC,EAAI,iBAClBgD,YAAI4C,EAAS1D,GACb0D,EAAUpI,YAAIwC,EAAI,kBAClBgD,YAAI4C,GAAS,GACbA,EAAUpI,YAAIwC,EAAI,cAClBgD,YAAI4C,GAAS,GAEf3H,EAAM0C,WAAa,EACnB1C,EAAMlB,QAAUA,EAChBkB,EAAM8D,YAAc,IACpB9D,EAAMyC,WAAa,CAACgB,OAAO,EAAGtE,KAAK,GACnCa,EAAMiE,YAAcA,EACpBjE,EAAMgE,cAAe,GAGvBmB,cAAe,SAACnF,GAEd,IAAM+B,EAAKC,cACX+C,YAAIxF,YAAIwC,EAAI,aAAa,KAI7B6F,cAAe,SAACC,GACdA,EACGC,QAAQzD,EAAiB0D,SAAS,SAAC/H,GAClC9B,QAAQC,IAAI,+BAEb2J,QAAQzD,EAAiB2D,WAAW,SAAChI,EAAOuF,GAC3C,IAAMC,EAAOD,EAAOE,QAGpB,GAFAvH,QAAQC,IAAI,mBAAmBqH,GAElB,IAATA,EACFyC,OAAOC,MAAM,gEACblI,EAAMiD,QAAU,KAChBjD,EAAM6D,YAAc,OACf,CACL7D,EAAMlB,QAAU0G,EAAK1G,QACrBkB,EAAM0C,WAAa8C,EAAK9C,WACxB,IAAMuB,EAAcuB,EAAKvB,YACzBjE,EAAMiE,YAAc,CAACZ,MAAOY,EAAYZ,MAAOa,MAAOD,EAAYC,OAClElE,EAAMgE,aAAewB,EAAKxB,aAC1B,IAAMvB,EAAa+C,EAAK/C,WACxBzC,EAAMyC,WAAWgB,OAzbJ,IAybahB,EAAgC,EAAIA,EAC9DzC,EAAM6D,YAAc7D,EAAM8D,cAAgB0B,EAAK1B,YAAc,WAAa,GAC1E9D,EAAM8D,YAAc0B,EAAK1B,gBAG5BgE,QAAQrD,EAAkBsD,SAAS,SAAC/H,GACnC9B,QAAQC,IAAI,gCAEb2J,QAAQrD,EAAkBuD,WAAW,SAAChI,EAAOuF,GAC5C,IAAMtC,EAAUsC,EAAOE,QAEvB,GADAvH,QAAQC,IAAI,oBAAoB8E,GAC5BA,EAAS,CACX,IAAMkF,EAActH,OAAOC,KAAKmC,GAC1BmF,EAAeD,EAAYrD,OAQjC,GAPA5G,QAAQC,IAAI,eAAeiK,GACvBA,GAAiBpI,EAAMiD,UACzB/E,QAAQC,IAAI,wBACZ6B,EAAMiD,QAAU,IAIdmF,EAAc,CAChB,IAAIC,EAAerI,EAAMiD,QACnBqF,EAAoBD,EAAavD,OAEvC,GADA5G,QAAQC,IAAI,oBAAoBmK,IAC3BA,GAAsC,IAAjBF,EAAoB,CAC5C,IAAMG,EAAQ,CAAC,IAAK,KAGpB,IAAK,IAAIrJ,KADiB,IAAtBoJ,IAAyBD,EAAe,IAC9BF,EACZE,EAAeA,EAAatC,OAAO,CAACyC,OAAQvF,EAAQkF,EAAYjJ,IAAKuJ,KAAMF,EAAMrJ,KACjFhB,QAAQC,IAAI,eAAekK,GAC3BrI,EAAMiD,QAAUoF,EAElBrI,EAAMiE,YAAc,CAACZ,MAAM,EAAGa,MAAM,YAQ3C,EAWHmB,EAAcpF,QAVhBqF,EADK,EACLA,SACA+B,EAFK,EAELA,WACAC,EAHK,EAGLA,WACAtB,EAJK,EAILA,QACAe,EALK,EAKLA,eACAK,EANK,EAMLA,QACAK,EAPK,EAOLA,eACAF,EARK,EAQLA,gBACAxH,EATK,EASLA,MACAoF,EAVK,EAULA,cAMWuD,EAAgB,SAAC1I,GAAD,OAAWA,EAAM2I,SAAS7J,SAC1CkG,EAAqB,SAAChF,GAAD,OAAWA,EAAM2I,SAASzF,cAC/C0F,EAAmB,SAAC5I,GAAD,OAAWA,EAAM2I,SAASjG,YAC7CmG,EAAkB,SAAC7I,GAAD,OAAWA,EAAM2I,SAAS5E,WAC5C+E,GAAqB,SAAC9I,GAAD,OAAWA,EAAM2I,SAAS3E,cAC/C+E,GAAoB,SAAC/I,GAAD,OAAWA,EAAM2I,SAAS7E,aAC9Ca,GAAgB,SAAC3E,GAAD,OAAWA,EAAM2I,SAAS1F,SAE1C+F,GAAmB,SAAChJ,GAAD,OAAWA,EAAM2I,SAASlG,YAC7CwG,GAAoB,SAACjJ,GAAD,OAAWA,EAAM2I,SAAS1E,aAC9CiF,GAAmB,SAAClJ,GAAD,OAAWA,EAAM2I,SAASvE,YAoB7C+E,GAAY,SAACC,GAAD,OAAe,SAACnE,EAAUL,GACjDK,EAAS8B,EAAeqC,IACxBnE,EAASe,EAAQ,CAACG,QAAO,EAAOE,QAASyC,GAAmBlE,UAYjDM,GAAmB,SAACsC,GAAD,OAAc,SAACvC,GAC7CA,EAASlF,KACTkF,EAASsC,EAAgBC,MAQdpC,GAAc,SAACiE,GAAD,OAAiB,SAACpE,EAAUL,GACrD1G,QAAQC,IAAIkL,GAEZtE,YAAIhG,YAAKQ,YAAIyC,cAAe,YAAa,CACvCxD,OAAQ6K,EAAY7K,OACpBG,MAAO0K,EAAY1K,QAEpByD,MAAK,WACCuC,GAAcC,KAAYE,QAC/BG,EAASR,GAAkB,IAC3B,IAAM6E,EAAaC,aAAY,WACzB5E,GAAcC,KAAYE,OAAS,EACrCG,EAASR,GAAkB,IAE3B+E,cAAcF,KAEf,QAEJ1G,OAAM,SAACC,SAwBKwC,KAAf,Q,mBCzkBeoE,OAjCf,SAActJ,GAGZ,IAAMoG,EAAYpG,EAAMoG,UACpBmD,EAAkB,GAClBC,EAAQ,EACRpD,IACHmD,EAAe,UAAME,KAAOC,cAAb,YAA8BD,KAAOE,MACpDH,EAAQI,KAAKC,MAA6C,IAAtC,IAAO,KAAQD,KAAK5L,IAAIoI,KAAoB,IAI/D,IAAM0D,EAAe9J,EAAMzB,MAAN,UAAiBkL,KAAOM,WAAxB,YAAsD,MAAhB/J,EAAMzB,MAAgBkL,KAAOO,YAAcP,KAAOQ,aAAgB,GAGzHC,EAAWlK,EAAMmK,UAAYnK,EAAMmK,UAAY,GACnDD,EAAWT,KAAOS,GAGlB,IAAME,EAAWpK,EAAMqK,SAAWZ,KAAOa,QAAU,GAErD,OACE,wBACCzL,UAAS,UAAK4K,KAAOc,KAAZ,YAAoBT,EAApB,YAAoCM,GAC7CjK,QAASH,EAAMG,QAFhB,SAIE,qBAAMqK,MAAO,CAAC,iBAAiB,QAAjB,QANH,EAMqCpE,EAAY,IAA9C,eAAwDA,EAAxD,OAAuE,UAAU,GAAV,OAAcoD,EAAd,MACrF3K,UAAS,UAAK0K,EAAL,YAAwBW,GAAsB,IAAMO,gBAAiBzK,EAAM0K,yBC3BnF,SAASC,KACd,IAAML,EAAUb,KAAOa,QACTnH,MAAMyH,KAAKC,SAASC,iBAAT,WAA8BR,KACjDS,SAAQ,SAAAC,GACZA,EAAEC,UAAUC,OAAOZ,GACnBU,EAAEC,UAAUE,IAAI1B,KAAO2B,Q,ICkLZC,G,4MApKbX,oBAAsB,SAACvM,GAErBJ,QAAQC,IAAI,+BACZ2M,M,EAIFW,WAAa,SAACvM,EAAGwM,EAAYC,EAAYrB,GAEvC,IAOIsB,EAPEC,EAAcH,OAAaI,EAAY,kBAAM,EAAK3L,MAAMG,QAAQpB,IAGhE6M,EAAaL,EAAa,EAAKvL,MAAM4L,WAAa,KAClDvB,KAAWuB,IAAcA,EAAWC,SAAS9M,IAE/CqH,EAAY,EAEhB,GAAGoF,IAEDpF,EAAYoF,EACTnB,GAAU,CACX,IAAMvG,EAAc,EAAK9D,MAAM8D,YAAYZ,MAGrC4I,EAAWhI,EAAY4C,QAAO,SAAAC,GAAO,OAAc,IAAPA,KAAYoF,MAAK,SAAC3H,EAAG4H,GAAJ,OAAUA,EAAI5H,KAAG,GAExDrF,IAAM+E,EAAYmI,WAAU,SAAAjB,GAAC,OAAIA,IAAMc,OAE3CL,EAAqB,SAAC1M,GAAD,OAAO,EAAK2L,oBAAoB3L,KAIjF,OACE,cAAC,GAAD,CAEER,MAAO,EAAKyB,MAAMkD,MAAMnE,GACxBoB,QAASuL,EACTtF,UAAWA,EACXiE,SAAUA,EACVF,UAAWA,EACXO,oBAAqBe,GANhB1M,I,EAYXmN,YAAc,SAACC,EAAaC,EAAab,GASvC,IARA,IAAIxH,EAAQ,GACRjD,EAAQ,EACNgD,EAAc,EAAK9D,MAAM8D,YACzBuI,EAAkBvI,EAAc,EAAK9D,MAAM8D,YAAYZ,MAAQ,KAC/DoJ,EAAiB,EAAKtM,MAAMiE,WAAa,EAAKjE,MAAMiE,WAAa,KACnEsI,EAAiB,EACjBC,EAAgB,EAEXzN,EAAI,EAAGA,EAAIoN,EAAY3I,OAAQzE,IAAK,CAG3C,IAFA,IAAImE,EAAQ,GAEHmD,EAAI,EAAGA,EAAI8F,EAAY5I,MAAO8C,IACjCgG,IAAiBE,EAAiBF,EAAgBvL,IAClDwL,IAAgBE,EAAgBF,EAAexL,IACnDoC,EAAMtE,KAAK,EAAK0M,WAAWxK,EAAOyK,EAAYgB,EAAgBC,IAC9D1L,IAGFiD,EAAMnF,KAAK,qBAAaC,UAAW4K,KAAOgD,UAA/B,SAA2CvJ,GAAjCnE,IAGvB,IAAM2N,EAAa5I,EAAc,EAAK9D,MAAM8D,YAAYC,MAAQ,EAKhE,OACE,qBAAKyG,MAAO,CAAC,kBAAkB,WAAlB,OAA8BkC,EAA9B,SACT7N,UAAS,0BACH4K,KAAO1F,MADJ,4BAEHqI,EAAc3C,KAAOkD,WAAa,GAF/B,4BAGHP,EAAc,EAAKpM,MAAM4M,KAAO,GAH7B,4BAIY,IAAfF,EAAmB,GAAnB,UAA2BjD,KAAOmD,KAAlC,YAA0CnD,KAAOC,eAJ9C,4BAKH,EAAK1J,MAAM6M,WAAapD,KAAOqD,SAAW,GALvC,kBAOTrC,gBAAiB2B,GAAeb,EAAa,kBAAM,EAAKb,4BAAwBiB,EARpF,SASG5H,K,EAMPgJ,WAAa,SAACC,EAAMb,GAClB,IAAMc,EAAed,EAAY3I,OAC3B0J,EAAcf,EAAY5I,MAI5B4J,EAAWvD,KAAKwD,MAA2B,IAArBtF,OAAOuF,aAAsBJ,EAAeD,IAClEM,EAAe1D,KAAKwD,MAA2B,IAArBtF,OAAOuF,aAAsBH,EAAcF,IAKzEG,EAAWA,GAAYG,EAAeH,EAAWG,EAGjD,IAAIC,EAAW3D,KAAKC,MAAOoD,EAAe,IAAO,IAAiB,GAOlE,OANIM,GAAY,KAAKA,EAAW,GAMzB,CACL,eALiBJ,EAAWD,EAKC,KAC7B,gBALkBC,EAAWF,EAKE,KAG/B,aAAeE,EAAW,EAAK,KAC/B,aAAcI,EAAW,O,wDAlI7B,WAEE,IAAMzJ,EAAc0J,KAAKxN,MAAM8D,YAC5B0J,KAAKxN,MAAMoM,eDCX,WACL,IAAM1C,EAAgBD,KAAOC,cAEvB+D,EAAuBtK,MAAMyH,KAAKC,SAASC,iBAAT,WAA8BpB,KACtE3L,QAAQC,IAAIyP,GACZA,EAAqB1C,SAAQ,SAAAC,GAE3BA,EAAEC,UAAUC,OAAOxB,GAGnBgE,YAAW,WAAQ1C,EAAEC,UAAUE,IAAI1B,KAAO+B,cAAgB,MCVxDmC,GAEM7J,IAAiBA,EAAYZ,OAAUY,EAAYC,OAAUD,EAAYE,UAAYwJ,KAAKxN,MAAM4L,WAAWjH,QAC/GgG,Q,oBA+HN,WAEE,IAAIwB,EAAcqB,KAAKxN,MAAMmM,YACzBqB,KAAKxN,MAAM4M,KAAO,IAAM,IAC1BT,EAAc,CAAC5I,MAAO4I,EAAY3I,OAAQA,OAAQ2I,EAAY5I,QAEhE,IAAM6I,EAAcoB,KAAKxN,MAAMoM,YAG3B9L,EAAQkN,KAAKxN,MAAMM,MACnBsN,EAAW,EACXC,EAAapE,KAAOqE,YACpBC,EAAgB,GAChBxC,GAAa,EACbyC,EAAgB,KACpB,GAAI5B,EAAa,CACf9L,EAAQ,GACRsN,EAAW,EACXC,EAAapE,KAAOwE,KAChBT,KAAKxN,MAAMkO,YAAYC,WAAUJ,EAAgBtE,KAAO2E,eAC5D,IAAMF,EAAcV,KAAKxN,MAAMkO,YAG/BF,EACE,sBAAKnP,UAAW4K,KAAOuE,cAAvB,UACE,wBAAQnP,UAAS,UAAKqP,EAAY3I,WAClC,wBAAQpF,QAASqN,KAAKxN,MAAMqO,YAAaxP,UAAS,UAAKqP,EAAYI,eAEnEd,KAAKxN,MAAM4L,WAAWjH,SAAQ4G,GAAa,GAIjD,OACE,sBAAKf,MAAOgD,KAAKT,WAAWa,EAAUzB,GAClCtN,UAAS,UAAKgP,EAAL,YAAmBE,GADhC,UAEGC,EACAR,KAAKtB,YAAYC,EAAaC,EAAab,GAC5C,mBAAG1M,UAAW4K,KAAOnJ,MAArB,SAA6BA,W,GA9KjBhB,IAAMC,WCqDXgP,G,4MAvDdC,aAAe,SAAArQ,GACdA,EAAMC,iBACN,IAAMmF,EAAQkL,SAAS,EAAKlL,MAAMhF,OAC5BiF,EAASiL,SAAS,EAAKjL,OAAOjF,OAC9BmQ,EAASnL,GAASC,EAASD,EAAQC,EACnCC,EAAcmG,KAAKC,MAAM,GAAM,IAAMD,KAAK5L,KAAKuF,EAAQC,GAAU,IACjEmL,EAAY,CACjBpL,MAAOA,EACPC,OAAQA,EACRC,YAAaiL,GAAUjL,EAAciL,EAASjL,GAG/C,EAAKzD,MAAM+E,iBAAiB4J,GAG5B,EAAKC,UAAUhP,S,4CAGhB,WAAU,IAAD,OACR,OACC,uBACCf,UAAU,OACVC,SAAU,SAAAC,GAAC,OAAI,EAAKyP,aAAazP,IACjCK,IAAK,SAAAL,GAAC,OAAI,EAAK6P,UAAY7P,GAH5B,UAKC,wFACA,uBACCC,KAAK,OAAOG,QAAQ,iCACpB0P,UAAWrB,KAAKxN,MAAM2E,OACtBvF,IAAK,SAAAL,GAAC,OAAI,EAAKwE,MAAQxE,GACvBE,YAAY,UACZC,UAAQ,IAET,uBACCF,KAAK,OAAOG,QAAQ,iCACpB0P,UAAWrB,KAAKxN,MAAM2E,OACtBvF,IAAK,SAAAL,GAAC,OAAI,EAAKyE,OAASzE,GACxBE,YAAY,UACZC,UAAQ,IAQT,wBAAQF,KAAK,kB,GA/CEM,IAAMC,WC8BlB,SAASuP,GAAS9O,GACvB,IAmBIqO,EAnBEvJ,EAAWiK,cAEXpQ,EAAUqQ,YAAYzG,GACtBhG,EAAayM,YAAYvG,GACzB1F,EAAeiM,YAAYnK,GAC3BvC,EAAa0M,YAAYnG,IACzB/F,EAAUkM,YAAYxK,IACtBb,EAAcqL,YAAYpG,IAC1B/E,EAAemL,YAAYrG,IAC3B7E,EAAckL,YAAYlG,IAC1B7E,EAAa+K,YAAYjG,IACzBnF,EAAYoL,YAAYtG,GACxBuG,EAAetQ,EAAQ4D,GAAYW,MACnCgG,EAAclJ,EAAMkJ,YACpB7K,EAAS6K,EAAY7K,OAEvB6Q,EAAmB,cAAC,GAAD,CAAMnK,iBAAkB,SAAChG,GAAD,OAAO+F,EAASC,GAAiBhG,OAC5EoQ,EAAoB,wBAAQhP,QAAS,kBAAM2E,EAASG,GAAYiE,KAA5C,0BACpBkG,EAAgB,KAEhBC,EAAc,cAAChP,EAAD,CAAOC,MAAM,QAAQH,QAAS,kBAAM2E,EAASlF,QAE3D0P,EACF,iCACE,wBAAQnP,QAAS,kBAAM2E,EAASkE,GAAU,KAA1C,wBACA,wBAAQ7I,QAAS,kBAAM2E,EAASkE,IAAW,KAA3C,uBACA,cAACjJ,EAAD,CAAQG,MAAO2D,EAAc1D,QAAS,kBAAM2E,EAASe,EAAQ,CAACG,QAAO,WAGnEuJ,EACJ,iCACE,wBAAQ1Q,UAAW4K,KAAO0E,SAAUhO,QAAS,aAA7C,wBACA,wBAAQtB,UAAW4K,KAAO0E,SAAUhO,QAAS,aAA7C,uBACA,cAACJ,EAAD,CAAQlB,UAAW4K,KAAO0E,SAAUjO,MAAO2D,EAAc1D,QAAS,kBAGlEqP,EAAe,SAACzQ,GAAD,OAAO+F,GLodHU,EKpdqBzG,ELodP,SAAC+F,EAAUL,GAChD,IAAMlC,EAAakG,EAAiBhE,KAC9B9F,EAAU4J,EAAc9D,KAAYkB,MAAM,EAAGpD,EAAa,GAC1DgD,EAAU5G,EAAQ4D,GAClBW,EAAQqC,EAAQrC,MAAMyC,QACtB9B,EAAe8E,GAAmBlE,KAEpCvB,EAAMsC,KAGVV,EAASK,EADI,CAAC5C,aAAY5D,UAAS4G,UAASrC,QAAOsC,YAAW3B,kBAG3DA,GACDiB,EAASe,EAAQ,CAACG,QAAO,EAAOR,mBAbZ,IAACA,GKjdnBiK,GADa9Q,EAAQgG,OACH,IACtB5G,QAAQC,IAAI,UAAU8E,GAEtB,IA0DI4M,EACAC,EA3DEC,EAAU1G,EAAY1K,MAC5B,GAAIsE,GAAWA,EAAQ6B,OAAS,EAAG,CACjC,IAAMD,EAAc5B,EAAQ6B,OAC5B5G,QAAQC,IAAI,cAAc0G,GAE1B,IAAMmL,EAAW/M,EAAQgN,MAAK,SAAA9E,GAAC,OAAIA,EAAE3C,OAAOhK,SAAWA,GAAU2M,EAAE3C,OAAO7J,QAAUoR,KAC9EG,OAAwBpE,IAAbkE,EAGjB,GAFA9R,QAAQC,IAAI,WAAW6R,GAEnBE,EAAU,CACZ,IAAMC,EAAiC,IAAhBtL,EACjBuL,EAAyB,IAAhBvL,EASf,IAPIsL,GAAkBC,KACpBlS,QAAQC,IAAI,iBAAiBgS,GAC7BlI,OAAOoI,SAAW,SAAS/R,GACzB2G,EAASE,OAITiL,EAAQ,CACV,IAAME,EAASN,EAASvH,KAClB8H,EAAWD,IAAWxM,EAC5B5F,QAAQC,IAAIoS,GACZX,EAAe,sBAA6B,MAAXU,EAAiB,MAAQ,OAA3C,oBAA6DC,EAAQ,mDAEhF9N,EAAW8C,QCpGhB,SAAkBvF,GACvB9B,QAAQC,IAAI,YACZ,IAAM4D,EAAKC,cACLU,EAAa1C,EAAM0C,WACrBiF,EAAUpI,YAAIwC,EAAD,mBAAiBW,IAClCqC,YAAI4C,EAAS3H,EAAMlB,QAAQ4D,IAC3BiF,EAAUpI,YAAIwC,EAAI,gBAClBgD,YAAI4C,EAASjF,GACbiF,EAAUpI,YAAIwC,EAAI,gBAClBgD,YAAI4C,EAAS3H,EAAMyC,WAAWgB,QAC9BkE,EAAUpI,YAAIwC,EAAI,iBAClBgD,YAAI4C,EAAS3H,EAAM8D,aACnB6D,EAAUpI,YAAIwC,EAAI,aAClBgD,YAAI4C,EAAS3H,EAAMgE,cACnB2D,EAAUpI,YAAIwC,EAAI,iBAClBgD,YAAI4C,EAAS3H,EAAMiE,aACnB0D,EAAUpI,YAAIwC,EAAI,gBAClBgD,YAAI4C,EAAS3H,EAAMoE,YDoFXoM,CAAS,CAAC1R,UAAS4D,aAAYD,aAAYqB,cAAaE,eAAcC,cAAaG,eAGhFmM,IACHtL,EL+ee,SAACqL,GAAD,OAAY,SAACrL,EAAUL,GAG9C,GAAsC,aAAhBA,IAzE0B+D,SAAS9E,YA2EvD,IAAMyF,EAAaC,aAAY,WAC7B,IAAMzH,EAAW,CAACW,WAAYuG,GAAiBpE,KAAYnB,OAAQf,WAAYkG,EAAiBhE,MAE5F0L,IAAWvH,GAAkBnE,MAAoD,IAArCD,GAAcC,KAAYE,OACxE0E,cAAcF,GAEdrE,EAASZ,EAAiBvC,MAE3B,KAGLmD,EAASwC,EAAe,cK/fPgJ,CAAUH,IACnBX,EAAe,aACfF,EAAeC,GAEjBL,EAAmB,KACnBG,EAAc,KAGhBF,EAAoB,SAEf,CACkC,IAAhBzK,IAIrByK,EAAoB,MAHkB,IAAhBzK,IAMtByK,EAAoB,wBAAQtQ,UAAW4K,KAAO8G,YAAapQ,QAAS,kBAAM2E,EAASG,GAAYiE,KAA3E,8BAGdpG,IACV/E,QAAQC,IAAI,aAAc8E,GAC1BgC,GL6b6B,SAACA,GAChCA,EAASR,GAAkB,QKhb3B,GAXAvG,QAAQC,IAAI,cAAc2F,GAGL,MAAjBA,GACF+L,EAAYjG,KAAO+G,cACnBb,EAAmBlG,KAAOgH,iBAE1Bf,EAAYjG,KAAOgH,eACnBd,EAAmBlG,KAAO+G,eAGxBlO,EAAWgB,OAAQ,CACrB,IAAMoN,EAAiBpO,EAAWtD,KAClCjB,QAAQC,IAAI,iBAAiB0S,GACN,IAAnBA,GACFlB,EAAe,aACfJ,EAAgB,wBAAQjP,QAAS,kBAAM2E,EAASmC,MAAhC,sBAChBoH,EAAc,kBAAMvJ,EAASmC,MAC7ByI,EAAY,CACVnK,QAAQ,GAAD,OAAKmK,GACZpB,SAAS,GAAD,OAAK7E,KAAOkH,WAAZ,YAA0BlH,KAAOmH,cAAjC,YAAkDnH,KAAOC,eACjEyE,UAAU,KAKZuB,EAAY,CAACnK,QAAQ,GAAD,OAAKmK,GAAapB,SAAS,IAC/CgB,EAAeC,QAGjBxR,QAAQC,IAAI8F,GACZ4L,EAAY,CACVnK,QAASmK,EACTpB,SAAU3P,EAAQgG,OAAS,EAAjB,UAAwBb,EAAYE,OAAZ,UAAwByF,KAAOxC,QAA/B,YAA0C0I,GAAoBA,EAAtF,YAA0GlG,KAAOoH,QAAjH,YAA4HpH,KAAOC,eAAkB,IAInK,IAAMrG,GAAY1E,EAAQ4D,GAAYc,UAChC8I,GAAc,CAClB5I,MAAOR,EAAaQ,MACpBC,OAAQT,EAAaS,QAGnBoI,GAAa,GACXnI,GAAcV,EAAaU,YACjC,GAAIlB,GAA6B,EAAdkB,GAAkB,EAAI,CACvC,IAAMqN,GAAazN,GAAY,IAAM,EAAI8I,GAAY5I,MAAQ4I,GAAY3I,OACzEoI,GCzJG,SAAyB0C,EAAU/I,EAAS9B,EAAasN,GAC9D,IAAIC,EAAW,GACXC,EAAgB,GAGhBC,EAAU,GACd,IAAI,IAAMnS,KAAKwG,EACVA,EAAQxG,KAAOuP,EAASvP,IAAImS,EAAQtS,KAAK6P,SAAS1P,IAKvD,IAAK,IAAIsH,EAAI6K,EAAQvM,OAAS,EAAG0B,GAAK,EAAGA,IAAK,CAC5C,IAAMvF,EAAQoQ,EAAQ7K,GAEtB,IAAI4K,EAAcpF,SAAS/K,GAAQ,CAKjC,IAJA,IAAMqQ,EAAe5L,EAAQzE,GAGzBsQ,EAAU,EACNrS,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAC1B8B,EAAQxG,EAAE,IAAMwG,EAAQxG,EAAE,KAAOoS,GAAgBpS,EAAIgS,IAAc,EAD5BhS,IAExCqS,IACAJ,EAASpS,KAAKG,EAAE,GAMpB,IADA,IAAIsS,EAAU,EACNtS,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAC1B8B,EAAQxG,EAAE,IAAMwG,EAAQxG,EAAE,KAAOoS,IAAiBpS,EAAE,GAAKgS,IAAc,EADhChS,IAExCsS,IACAL,EAASpS,KAAKG,EAAE,GAMAqS,EAAUC,GAAY5N,EAAc,IAQtDuN,EAASpS,KAAKkC,GACdmQ,EAAgBA,EAAcrL,OAAOoL,IAEvCA,EAAW,GAIX,IADA,IAAIM,EAAU,EACNvS,EAAI+B,EAAO/B,EAAI+B,EAAS2C,EAAcsN,GACzCxL,EAAQxG,EAAEgS,IAAcxL,EAAQxG,EAAEgS,KAAeI,EADIpS,GAAKgS,EAE3DO,IACAN,EAASpS,KAAKG,EAAEgS,GAMpB,IADA,IAAIQ,EAAU,EACNxS,EAAI+B,EAAO/B,EAAI+B,EAAS2C,EAAcsN,GACzCxL,EAAQxG,EAAEgS,IAAcxL,EAAQxG,EAAEgS,KAAeI,EADIpS,GAAKgS,EAE3DQ,IACAP,EAASpS,KAAKG,EAAEgS,GAKDO,EAAUC,GAAY9N,EAAc,IAMrDuN,EAASpS,KAAKkC,GACdmQ,EAAgBA,EAAcrL,OAAOoL,IAEvCA,EAAW,GAIX,IADA,IAAIQ,EAAW,EACPzS,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAAesN,EAAY,IACrDxL,EAAQxG,EAAEgS,EAAU,IAAMxL,EAAQxG,EAAEgS,EAAU,KAAOI,GAAgBpS,EAAIgS,IAAc,EAD9BhS,GAAMgS,EAAY,EAE5ES,IACAR,EAASpS,KAAKG,EAAEgS,EAAU,GAM9B,IADA,IAAIU,EAAW,EACP1S,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAAesN,EAAY,IACrDxL,EAAQxG,EAAEgS,EAAU,IAAMxL,EAAQxG,EAAEgS,EAAU,KAAOI,IAAiBpS,EAAE,GAAKgS,IAAc,EADlChS,GAAMgS,EAAY,EAE5EU,IACAT,EAASpS,KAAKG,EAAEgS,EAAU,GAKVS,EAAWC,GAAahO,EAAc,IAMxDuN,EAASpS,KAAKkC,GACdmQ,EAAgBA,EAAcrL,OAAOoL,IAEvCA,EAAW,GAIX,IADA,IAAIU,EAAW,EACP3S,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAAesN,EAAY,IACrDxL,EAAQxG,EAAEgS,EAAU,IAAMxL,EAAQxG,EAAEgS,EAAU,KAAOI,IAAiBpS,EAAE,GAAKgS,IAAc,EADlChS,GAAMgS,EAAY,EAE5EW,IACAV,EAASpS,KAAKG,EAAEgS,EAAU,GAM9B,IADA,IAAIY,EAAW,EACP5S,EAAI+B,EAAO/B,EAAI+B,EAAQ2C,GAAesN,EAAY,IACrDxL,EAAQxG,EAAEgS,EAAU,IAAMxL,EAAQxG,EAAEgS,EAAU,KAAOI,GAAgBpS,EAAIgS,IAAc,EAD9BhS,GAAMgS,EAAY,EAE5EY,IACAX,EAASpS,KAAKG,EAAEgS,EAAU,GAKVW,EAAWC,GAAalO,EAAc,IAMxDuN,EAASpS,KAAKkC,GACdmQ,EAAgBA,EAAcrL,OAAOoL,IAEvCA,EAAW,IAKf,OAAOC,EDSQW,CAAiBjT,EAAQ4D,EAAa,GAAIW,MAAO+L,EAAcxL,GAAaqN,IAI3F,IAwBI9M,GAxBA6N,GAAQlT,EAAQiC,KAAI,SAACkR,EAAMC,GAC7B,IAAMC,EAAOD,EAAM,SAAWA,EAAO,aAC/BlF,EAAatK,IAAewP,EAC5BE,EAAsBF,IAASpT,EAAQgG,OAAS,EAEtD,OACE,6BACE,cAAC,GAAD,CACEwH,YAAaA,GACbU,WAAYA,EACZ3J,MAAOvE,EAAQoT,GAAM7O,MACrBY,YAAamO,EAAsBnO,EAAc,KACjD8I,KAAMjO,EAAQoT,GAAM1O,UACpBlD,QAAS,kBAAM2E,EL2WH,SAACvC,GAAD,OAAgB,SAACuC,EAAUL,GAC3CD,GAAcC,KAAYE,OAAS,GACrCG,EAASoC,EAAW3E,KK7WU2P,CAAOH,KAC/BzR,MAAO0R,KARFD,MAmBb,GAJAF,GAAQjO,EAAYiO,GAAQA,GAAM9F,MAAK,SAAC3H,EAAG4H,GAAJ,OAAUA,EAAEnL,IAAMuD,EAAEvD,OAIvD+K,GAAWjH,OAAQ,CACrB,IAAIwN,GAAc,EAClBvG,GAAWb,SAAQ,SAAAjK,GACU,MAAxBmO,EAAanO,IAAgBqR,QAGhCnO,GADCmO,GAAcvG,GAAWjH,OAASwN,GAC1B,YACAA,GAAcvG,GAAWjH,OAASwN,GAClC,YAEA,aAOXnO,GALU4H,GAAWjH,QAAUpC,IAAe0M,EAAatK,OAKlD,gBAAkBhB,EAJlB,QAMX,OACE,sBAAK9E,UAAW4K,KAAO2I,KAAvB,UACGlD,EACAO,EACD,cAAC,GAAD,CACErD,aAAa,EACb8B,YAAawB,EACbvD,YAAaA,GACbjJ,MAAO+L,EACPrC,KAAMvJ,GACNuI,WAAYA,GACZzL,QAAS,SAACpB,GAAD,OAAOyQ,EAAazQ,IAC7BsP,YAAaA,EACbvK,YAAaA,EACbG,WAAYA,IAEd,sBAAKpF,UAAW4K,KAAO4I,UAAvB,UACE,qBAAKxT,UAAW4K,KAAOzF,OAAvB,SAAgCA,KAChC,sBAAKnF,UAAW4K,KAAO6I,SAAvB,UACGnD,EACAG,EACD,cAACvP,EAAD,CAAQG,MAAO0D,EAAWzD,QAAS,kBAAM2E,EAASqC,QACjDiI,EACAC,KAIH,qBAAKxQ,UAAW4K,KAAO8I,YAAvB,SACE,oBAAI1T,UAAW4K,KAAOoI,MAAtB,SAA8BA,aErOzBW,OA1Bf,WACE,IAAMC,EACJ,sBAAK5T,UAAU,QAAf,UACE,2CACA,+CACA,2IAA6G,uBAA7G,gIAEA,+BACE,kEACA,4DACA,gEAEF,6CACA,sMAAwK,uBAAxK,gJAIJ,OACE,sBAAKA,UAAU,YAAf,UACE,uDACC4T,EACD,iECkFSC,I,wDA1Fb,aAAe,IAAD,8BACZ,gBACK7S,MAAQ,CACXjC,MAAO,CAIL,YAAakR,GACb,EAAK0D,IAEPhS,aAAc,IACd0I,YAAa,MAEf,EAAKnI,YAAc,EAAKA,YAAY4R,KAAjB,gBAbP,E,qDAgBd,WACE,IAAIzJ,EAAcsE,KAAK3N,MAAMqJ,YAC7BnL,QAAQC,IAAI,oBAAoBkL,GAC3BA,IACHA,EAAc/L,EAAiB,eAC/BY,QAAQC,IAAI,yBAA0BkL,GACjCA,IAAaA,EAAc,MAChCsE,KAAKoF,SAAS,CAAE1J,YAAaA,IACxBA,GACHvK,EAAQC,KAAR,yBAIJ,IAAMiU,EAA0B,IAArB/K,OAAOuF,YAClBxC,SAASiI,gBAAgBtI,MAAMuI,YAAY,OAA3C,UAAsDF,EAAtD,S,yBAGF,SAAY9T,GACVyO,KAAKoF,SAAS,CAAEpS,aAAczB,EAAEiU,OAAO5V,S,oBAGzC,WACE,IAAM8L,EAAcsE,KAAK3N,MAAMqJ,YAC/BnL,QAAQC,IAAI,SAASkL,GACrB,IAAM1I,EAAegN,KAAK3N,MAAMW,aAAelB,IAAM2T,cAAczF,KAAK3N,MAAMjC,MAAM4P,KAAK3N,MAAMW,cAAe,CAAC0I,YAAaA,IAAgB,KAC5I,OACE,sBAAKrK,UAAU,MAAf,UACE,cAAC0B,EAAD,CAAK3C,MAAO4P,KAAK3N,MAAMjC,MAAO4C,aAAcgN,KAAK3N,MAAMW,aAAcO,YAAayM,KAAKzM,YAAa1C,OAAQ6K,EAAcA,EAAY7K,OAAS,KAC/I,qBAAKQ,UAAU,OAAf,SAAuB2B,W,GA7CbjB,cCNH2T,GANE,WAChB,OACC,oBAAIrU,UAAU,WAAd,kC,kBCHK,SAASsU,KAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAItR,SAAQ,SAACC,GAAD,OACjB2L,YAAW,kBAAM3L,EAAQ,CAAEsD,KAAM+N,MAAW,QCAhD,IAUaC,GAAiBlP,YAC5B,qBAD4C,uCAE5C,WAAOiP,GAAP,eAAAhP,EAAA,sEACyB+O,GAAWC,GADpC,cACQ/O,EADR,yBAGSA,EAASgB,MAHlB,2CAF4C,uDASjCiO,GAAe7T,YAAY,CACtCrC,KAAM,UACNsC,aArBmB,CACnBnB,MAAO,EACPyF,OAAQ,QAqBRrE,SAAU,CACR4T,UAAW,SAAC1T,GAKVA,EAAMtB,OAAS,GAEjBiV,UAAW,SAAC3T,GACVA,EAAMtB,OAAS,GAGjBkV,kBAAmB,SAAC5T,EAAOuF,GACzBvF,EAAMtB,OAAS6G,EAAOE,SAExB1F,MAAO,SAACC,GACNA,EAAMtB,MAAQ,IAKlBkJ,cAAe,SAACC,GACdA,EACGC,QAAQ0L,GAAezL,SAAS,SAAC/H,GAChCA,EAAMmE,OAAS,aAEhB2D,QAAQ0L,GAAexL,WAAW,SAAChI,EAAOuF,GACzCvF,EAAMmE,OAAS,OACfnE,EAAMtB,OAAS6G,EAAOE,cAIvB,GAA2DgO,GAAaxT,QAgBhEwT,IAhBR,GAAQC,UAAR,GAAmBC,UAAnB,GAA8BC,kBAA9B,GAAiD7T,MAgBzC0T,GAAf,SCvEM5T,GAAe,CAEnBf,QAAS,CAAC,CACR+U,QAASvQ,MAAM,GAAGC,KAAK,QAEzBuQ,WAAY,GAGZC,SAAS,EACTrR,WAAY,EACZqB,WAAW,GAGAiQ,GAAiBpU,YAAY,CACxCrC,KAAM,YACNsC,gBAEAC,SAAU,CACRoB,YAAa,SAAClB,EAAOuF,GACnB,IAAMzG,EAAUkB,EAAMlB,QAAQgH,MAAM,EAAG9F,EAAM0C,WAAa,GAGpDmR,EADU/U,EAAQA,EAAQgG,OAAS,GACjB+O,QAAQ/N,QAE5B9F,EAAM8T,WAAWhP,QAAU+O,EAAQtO,EAAOE,WAI9CoO,EAAQtO,EAAOE,SAAWzF,EAAM+T,QAAU,IAAM,IAEhD/T,EAAMlB,QAAUA,EAAQiH,OAAO,CAAC,CAAC8N,QAASA,KAC1C7T,EAAM0C,WAAa5D,EAAQgG,OAC3B9E,EAAM+T,SAAW/T,EAAM+T,UAGzB1B,OAAQ,SAACrS,EAAOuF,GACdvF,EAAM0C,WAAa6C,EAAOE,QAC1BzF,EAAM+T,QAAWxO,EAAOE,QAAU,IAAO,GAG3C6B,WAAY,SAACtH,GACXA,EAAM+D,WAAY/D,EAAM+D,WAG1BhE,MAAO,SAACC,GACNA,EAAMlB,QAAU,CAAC,CAAC+U,QAASvQ,MAAM,GAAGC,KAAK,QACzCvD,EAAM0C,WAAa,MAiBlB,GAAmDsR,GAAe/T,QAmB1D+T,IAnBR,GAAQ9S,YAAR,GAAqBmR,OAArB,GAA6B/K,WAA7B,GAAyCvH,MAmBjCiU,GAAf,SC1EMC,GAAkBC,aAAgB,CACtCC,IAAKC,EACLC,QAASC,GACTC,UAAWC,GACX7L,SAAU8L,KAYNC,GAAuBC,YAAqB,CAChDC,mBAAmB,IAGNC,eAAe,CAC5BC,QAdkB,SAAC9U,EAAOuF,GAM1B,MAHoB,cAAhBA,EAAOpG,OACTa,OAAQ8L,GAEHmI,GAAgBjU,EAAOuF,IAS9BwP,WAAW,aAAKL,MCjBZM,GAAU,iBAEhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACD,cAAC,IAAD,CAAQtW,QAASA,EAAjB,SACC,eAAC,IAAD,WACC,cAAC,IAAD,CAAOuW,OAAK,EAACC,KAAI,UAAKN,GAAL,UAAsBO,UAAWnX,IAClD,cAAC,IAAD,CAAOkX,KAAI,UAAKN,IAAWO,UAAW1C,KACtC,cAAC,IAAD,CAAOyC,KAAI,UAAKN,GAAL,KAAiBO,UAAWlC,cAK1CrI,SAASwK,eAAe,U,kBC7B1BC,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,cAAgB,gCAAgC,eAAiB,iCAAiC,WAAa,6BAA6B,QAAU,0BAA0B,cAAgB,gCAAgC,eAAiB,iCAAiC,MAAQ,wBAAwB,WAAa,6BAA6B,MAAQ,wBAAwB,UAAY,4BAA4B,KAAO,uBAAuB,cAAgB,gCAAgC,WAAa,6BAA6B,YAAc,8BAA8B,YAAc,8BAA8B,UAAY,4BAA4B,SAAW,2BAA2B,OAAS,yBAAyB,MAAQ,wBAAwB,YAAc,8BAA8B,YAAc,8BAA8B,SAAW,2BAA2B,iBAAiB,iCAAiC,YAAc,8BAA8B,MAAQ,wBAAwB,OAAS,yBAAyB,IAAM,sBAAsB,UAAY,4BAA4B,SAAW,2BAA2B,gBAAgB,gCAAgC,WAAa,6BAA6B,cAAgB,gCAAgC,cAAgB,gCAAgC,KAAO,uBAAuB,QAAU,0BAA0B,KAAO,0B","file":"static/js/main.541b1eef.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","\r\nexport const loadSessionItems = (name) => {\r\n\ttry{\r\n\t\tconst serializedItems = sessionStorage.getItem(name);\r\n\t\tif(serializedItems === null){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn JSON.parse(serializedItems)\r\n\t} catch (err) {\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n\r\nexport const saveSessionItems = (items, name) => {\r\n\ttry{\r\n\t\tconst serializedItems = JSON.stringify(items)\r\n\t\tsessionStorage.setItem(name, serializedItems);\r\n\t} catch (err) {\r\n\t\tconsole.log(err)\r\n\t}\r\n}","import React from 'react';\r\nimport { saveSessionItems } from '../localStorage';\r\nimport history from '../history';\r\n// CSS\r\n// import './App.css';\r\n\r\nclass Connexion extends React.Component {\r\n\tgoToApp = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this);\r\n\t\tconst pseudo = this.pseudoInput.value;\r\n\t\tsaveSessionItems({pseudo:pseudo, stamp:(+new Date()).toString(36)}, 'playerInfos');\r\n\t\thistory.push(`/redux-project/`);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"connexionBox\">\r\n\t\t    <header className=\"App-header\">\r\n\t\t      <h1 className=\"logo\">Redux-progress</h1>\r\n\t\t    </header>\r\n\t\t    <p>Hello there!<br/>\r\n\t\t    My name is Maxime Sarrazin, and this is Redux-progress, a work in progress of mini-games made with React and Redux, as a part of my learning journey in Javascript and complex application building.</p>\r\n\t\t    <p>To proceed to the games, please choose your player name below! (2&nbsp;to&nbsp;10 characters)</p>\r\n\t\t\t\t<form className=\"form connexion\" onSubmit={(i) => this.goToApp(i)}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"name\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tpattern=\"[A-Z]*[a-z]*{2,10}\"\r\n\t\t\t\t\t\tref={input => {this.pseudoInput = input}}/>\r\n\t\t\t\t\t<button type=\"submit\"></button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Connexion;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n};\r\n\r\nexport const navSlice = createSlice({\r\n  name: 'nav',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    reset: state => {\r\n      // From here we can take action only at this \"counter\" state\r\n      // But, as we have taken care of this particular \"logout\" action\r\n      // in rootReducer, we can use it to CLEAR the complete Redux Store's state\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reset } = navSlice.actions;\r\n\r\n\r\nexport default navSlice.reducer;\r\n","import React from 'react';\r\n\r\nexport function Switch(props) {\r\n  return (\r\n    <label className=\"switch\">\r\n\t\t  <input\r\n\t\t\t  type=\"checkbox\"\r\n\t\t\t  checked={props.isOn}\r\n\t\t\t  onClick={props.onClick}\r\n\t\t\t  readOnly\r\n\t\t  />\r\n\t\t  <span className=\"slider\"></span>\r\n\t\t</label>\r\n\t);\r\n}\r\n\r\nexport function Reset(props) {\r\n  return (\r\n    <button className=\"reset\" onClick={props.onClick}>\r\n    \t{props.title}\t\t\t  \r\n\t</button>\r\n\t);\r\n}\r\n\r\n","import React from 'react';\r\n// import { useDispatch } from 'react-redux';\r\nimport { reset } from './navSlice';\r\nimport { Reset } from '../general/helpers/Components';\r\n\r\nexport function Nav(props) {\r\n  const itemSelected = props.itemSelected;\r\n  const navItems = Object.keys(props.items)\r\n        .map((key,index) =>\r\n          <button\r\n            name={key}\r\n            key={index}\r\n            className={itemSelected === key ? 'selected' : ''} \r\n            onClick={itemSelected === key ? ()=> {} : (i) => props.handleClick(i)}>\r\n            {key !== 'i' ? `Play ${key}` : key}\r\n          </button>\r\n        );\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1 className=\"logo\">Redux-progress</h1>\r\n      <div className=\"nav-items\">\r\n        <div className=\"pseudo\">{props.pseudo}</div>\r\n        {navItems}\r\n      </div>\r\n{/*      <Reset title=\"Reset all\" onClick={() => dispatch(reset())}/>*/}\r\n    </header>\r\n  );\r\n}\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore/lite';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBcbjihs9sz2r212hEj8Dh1IjeDKfRqy7U\",\r\n  authDomain: \"redux-progress.firebaseapp.com\",\r\n  databaseURL: \"https://redux-progress-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n  projectId: \"redux-progress\",\r\n  storageBucket: \"redux-progress.appspot.com\",\r\n  messagingSenderId: \"1056425097273\",\r\n  appId: \"1:1056425097273:web:26f5d8fe70bfe09b8cf5e8\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst base = getFirestore(app);\r\n\r\nexport default base;\r\n","import { getDatabase, ref, get} from \"firebase/database\";\r\n\r\nexport function compareGameState(turnData) {\r\n\tconst db = getDatabase();\r\n  return new Promise((resolve) => {\r\n\t\tget(ref(db, `/turnAction`)).then((readTurnAction) => {\r\n\t\t\tif (readTurnAction.exists()) {\r\n\t\t\t\tget(ref(db, `/stepNumber`)).then((readStepNumber) => {\r\n\t\t\t\t\tif (readStepNumber.exists()) {\r\n\t\t        if(readTurnAction.val() !== turnData.turnAction || readStepNumber.val() !== turnData.stepNumber) {\r\n\t\t\t\t\t    get(ref(db, `/`)).then((dataSnapshot) => {\r\n\t\t\t\t\t\t\t\tif (dataSnapshot.exists()) {\r\n\t\t\t        \t\tresolve(dataSnapshot.val());\r\n\t\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t    }).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t    get(ref(db, `/players`)).then((readPlayers) => {\r\n\t\t\t\t\t\t\t\tif (readPlayers.exists() && readPlayers.val() === 0) {\r\n\t\t\t        \t\tresolve(0);\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t    }).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t    }\r\n\t\t\t\t  } else {\r\n\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t  }\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t  console.error(error);\r\n\t\t\t\t});\t\t\t\t\r\n\t\t  } else {\r\n\t\t    console.log(\"No data available\");\r\n\t\t  }\r\n\t\t}).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport function readGameState(isInit) {\r\n\tconst db = getDatabase();\r\n  return new Promise((resolve) => {  \t\r\n\t\tget(ref(db, `/players`)).then((players) => {\r\n\t\t\tif (players.exists()) {\r\n\t\t\t\tif (isInit) {\r\n\t\t\t\t\tresolve({players: players.val()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tget(ref(db, `/gameSettings`)).then((gameSettings) => {\r\n\t\t\t\t\t\tif (gameSettings.exists()) {\r\n\t\t\t\t\t\t\tget(ref(db, `/gameIsOn`)).then((snapshot) => {\r\n\t\t\t\t\t\t\t\tif (snapshot.exists()) {\r\n\t\t\t\t\t\t\t    resolve({players: players.val(), gameSettings: gameSettings.val(), gameIsOn: snapshot.val()});\r\n\t\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\t\t    \r\n\t\t\t\t\t  } else {\r\n\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t  } else {\r\n\t\t    console.log(\"No data available\");\r\n\t\t  }\r\n\t\t}).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n  });\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getDatabase, ref, set, push } from \"firebase/database\";\r\nimport '../../base';\r\nimport { loadSessionItems } from '../../localStorage';\r\nimport { compareGameState, readGameState } from './connectXAPI';\r\n\r\nconst initialState = {\r\n  history: [{\r\n    slots: Array(42).fill(0),\r\n    boardFlip: 0,\r\n  }],\r\n  turnAction: {number:0, type:0},\r\n  stepNumber: 0,\r\n  gameSettings: {\r\n    width: 7,\r\n    height: 6,\r\n    scoreTarget: 4 \r\n  },\r\n  asyncStatus: '',\r\n  currentSign: 'X',\r\n  players: null,\r\n  sortIsAsc: true,\r\n  gravityState: true,\r\n  transitions: {slots:0, board:0, status:0},\r\n  animations: 0,\r\n};\r\n\r\nconst actionsPerTurn = 2;\r\n\r\nexport const updateStateAsync = createAsyncThunk(\r\n  'connectX/compareGameState',\r\n  async (turnData) => {\r\n    const response = await compareGameState(turnData);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const setGameStateAsync = createAsyncThunk(\r\n  'connectX/readGameState',\r\n  async (isInit, thunkAPI) => {\r\n    const response = await readGameState(isInit);\r\n    let players = response.players;\r\n    if (isInit) {\r\n      if (selectPlayers(thunkAPI.getState())) {\r\n        return;\r\n      } else {\r\n        if (!players) players = [];\r\n      }     \r\n    } else {\r\n      const playerCount = Object.keys(players).length;\r\n\r\n      if (playerCount === 1) {\r\n        set(ref(getDatabase(), '/gameSettings/'), selectGameSettings(thunkAPI.getState()));\r\n        set(ref(getDatabase(), '/gameIsOn/'), false);\r\n      } else if (playerCount === 2) {\r\n        if (response.gameIsOn) {\r\n          thunkAPI.dispatch(sendGameSettings(response.gameSettings));\r\n        } else {\r\n          thunkAPI.dispatch(reset(true));\r\n        }\r\n      }\r\n      if (playerCount > 2) {\r\n        thunkAPI.dispatch(removePlayers());\r\n        thunkAPI.dispatch(requestGame(loadSessionItems()));\r\n        players = [];\r\n      } \r\n    }\r\n    return players;\r\n  }\r\n);\r\n\r\nexport const connectXSlice = createSlice({\r\n  name: 'connectX',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    fillSlot: (state, action) => {\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const data = action.payload;\r\n      let stepNumber = data.stepNumber;\r\n      let history = data.history;\r\n      const current = data.current;\r\n      const slots = data.slots;\r\n      const slotIndex = data.slotIndex;\r\n      const slotValue = state.currentSign;\r\n\r\n      slots[slotIndex] = slotValue;\r\n\r\n      const turnAction = state.turnAction;\r\n      const startOfTurn = !turnAction.type;\r\n      if (startOfTurn) stepNumber++;\r\n      state.stepNumber = stepNumber;\r\n\r\n      const isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      const gravIsOff = !state.gravityState;\r\n      if (gravIsOff) {\r\n        const width = state.gameSettings.width,\r\n            height = state.gameSettings.height;\r\n        const isFloating = current.boardFlip % 2 === 0 ? slots[slotIndex + width] === 0 : slots[slotIndex + height] === 0;\r\n        if (isFloating) {\r\n          let animations = state.animations ? state.animations.slice() : Array(width * height).fill(0);\r\n          animations[slotIndex] = 'floating';      \r\n          state.animations = animations;\r\n        }\r\n\r\n        state.transitions = {slots:0, board:0};          \r\n        if (isEndTurn) {\r\n          state.turnAction = {number:0, type:0};\r\n          state.currentSign = slotValue === 'X' ? 'O' : 'X';\r\n        } else {\r\n          state.turnAction.number += 1;\r\n          state.turnAction.type = 1;\r\n        }\r\n      } else {\r\n        state.turnAction.number += 1;\r\n        state.turnAction.type = 1;\r\n      }\r\n      // We add the current board to the history, and assign the stepNumber based on the new history\r\n      history = history.slice(0, stepNumber);      \r\n      state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n      \r\n      const players = state.players;\r\n      if (players && players.length === 2) state.turnAction.action = true;\r\n\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db fillSlot\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/stepNumber/');\r\n      //   if (startOfTurn) {\r\n      //     set(baseRef, stepNumber);\r\n      //   }\r\n      //   if (gravIsOff) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);        \r\n      //     }\r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, {slots:0, board:0});        \r\n      //   }\r\n      // }\r\n    },\r\n// Currently unable to toggle\r\n    gravity: (state, action) => {\r\n      const slotIndex = action.payload.slotIndex;\r\n      const singleSlotMode = typeof slotIndex === 'undefined' ? false : true;\r\n\r\n      // We get the slots of the currently displayed move\r\n      let stepNumber = state.stepNumber;  \r\n      let history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];\r\n      const slots = current.slots.slice();\r\n\r\n      const isAction = action.payload.toggle;\r\n      let gravityState = state.gravityState;\r\n      const turnAction = state.turnAction;\r\n      let isEndTurn;\r\n        console.log(\"isAction\", isAction)\r\n      if (isAction) {\r\n        console.log(\"gravityState\", gravityState)\r\n        gravityState = gravityState ? false : true;\r\n        const players = state.players;\r\n        if (players && players.length === 2) state.turnAction.action = true;        \r\n        isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      } else {\r\n        isEndTurn = turnAction.number === actionsPerTurn;\r\n        console.log(\"isEndTurn\",isEndTurn);\r\n      }\r\n\r\n      const noEditMode = action.payload.noEdit;\r\n      if (gravityState || noEditMode) {\r\n        state.animations = 0;\r\n        let width = state.gameSettings.width,\r\n            height = state.gameSettings.height;\r\n        if (current.boardFlip % 2 !== 0) {\r\n          width = state.gameSettings.height;\r\n          height = state.gameSettings.width;\r\n        }\r\n\r\n        let count = 1; \r\n        if (singleSlotMode) {\r\n          var slotScore = 0;\r\n          // We start iterating at the second to last row\r\n          for(let i = height - 1; i > 0; i--) {\r\n            // We then determine the height the slot sits at by testing its index,\r\n            // we make it a score that represents the distance that this slot can be potentially pushed down\r\n            if(slotIndex >= (i - 1) * width && slotIndex <= i * width - 1) {\r\n              slotScore = height - i;\r\n              break;\r\n            }\r\n          }        \r\n          count = slotScore;\r\n        }\r\n        var transitions = Array(width * height).fill(0);\r\n        var animations = transitions.slice();\r\n        // We iterate through every rows, counting it (count), starting from the second to last one and going up\r\n        for (let i = slots.length - 1 - count * width; i >= 0; i -= width) {\r\n          // We then iterate through each row, to get to each and every slot\r\n          for (let j = 0; j < width; j++) {\r\n            // We store (count) as a relative height we're at from the first row we go through,\r\n            // giving us a score (l) of how many slots we'll try to \"push down\" the value of the slot.\r\n            // If it fails, we loop and try to push it one slot shorter\r\n            let index = i - j;\r\n            if (slots[index] && (!singleSlotMode || slotIndex === index)) {\r\n              for (let l = count; l > 0; l--) {\r\n                const targetIndex = index + width * l;\r\n                if(!slots[targetIndex]) {\r\n                  if (noEditMode) {\r\n                    animations[index] = 'floating';\r\n                  } else {\r\n                    // If the destination is free, we switch the values\r\n                    // (l) provides the height indication for the animation\r\n                    slots[targetIndex] = slots[index];\r\n                    slots[index] = 0;\r\n                    transitions[targetIndex] = l;\r\n                  }\r\n                  break;\r\n                }\r\n              }\r\n              if (slotIndex === index) break;\r\n            }\r\n          }\r\n          if (singleSlotMode) break;\r\n          count++;\r\n        }\r\n      }\r\n\r\n      const startOfTurn = !turnAction.type;\r\n      if (noEditMode) {\r\n        state.animations = animations;\r\n      } else {\r\n        if (startOfTurn) stepNumber++;\r\n        state.stepNumber = stepNumber;\r\n        if (isEndTurn) {\r\n          state.turnAction = {number:0, type:0, action:turnAction.action};\r\n          state.currentSign = state.currentSign === 'X' ? 'O' : 'X';        \r\n        } else {\r\n          state.turnAction.number = isAction ? turnAction.number + 1 : turnAction.number;\r\n          state.turnAction.type = isAction ? 2 : turnAction.type;\r\n        }\r\n\r\n        history = history.slice(0, stepNumber);\r\n        state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n        state.gravityState = gravityState;\r\n        // We check if there is any slotScore > 0 so we dont expect a transition callback when there isn't\r\n        const hasTransitions = transitions && transitions.filter(el => {return el !== 0;}).length > 0 ? true : false;\r\n        // If the toggle was called with a click, we clear the board transition,\r\n        // if the gravity is turned off, we clear the slots transitions\r\n        state.transitions = {slots: gravityState ? hasTransitions ? transitions : 0 : 0, board: isAction ? 0 : turnAction.type !== 3 ? 0 : state.transitions.board};\r\n      }\r\n\r\n\r\n      // if (state.players && state.players.length === 2) {  \r\n      //   console.log(\"set db toggleGravity\"); \r\n      //   const db = getDatabase();    \r\n      //   let baseRef = ref(db, '/gravityState/');\r\n      //   if (isAction) {\r\n      //     set(baseRef, gravityState);\r\n      //   }\r\n      //   if (!noEditMode) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (startOfTurn) {\r\n      //       baseRef = ref(db, '/stepNumber/');\r\n      //       set(baseRef, stepNumber);\r\n      //     }\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);\r\n      //     }          \r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, state.transitions);\r\n      //   } else {\r\n      //     baseRef = ref(db, '/animations/');\r\n      //     set(baseRef, state.animations);\r\n      //   }\r\n      // }  \r\n    },\r\n\r\n    flipBoardState: (state, action) => {\r\n      // Modify the way the values are placed inside the slots and replace the current history move with it\r\n\r\n      // We get the slots of the currently displayed move\r\n      let stepNumber = state.stepNumber;      \r\n      let history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];\r\n      const slots = current.slots.slice();\r\n\r\n      // We deduce the future flip state of the board with the payload (1 ou -1)\r\n      const flipValue = action.payload;\r\n      let boardFlip = current.boardFlip + flipValue;\r\n      if (boardFlip === -1) boardFlip = 3;\r\n      if (boardFlip === 4) boardFlip = 0;\r\n\r\n      // Adjust the board params to that flip state to iterate through properly through the future board\r\n      let width = state.gameSettings.width,\r\n          height = state.gameSettings.height;\r\n      if (current.boardFlip % 2 !== 0) {\r\n        width = state.gameSettings.height;\r\n        height = state.gameSettings.width;\r\n      }\r\n\r\n      let newSlots = slots.slice();\r\n      let rowCount = height;\r\n      // We iterate through every rows, counting it (count)\r\n      for (let i = slots.length - 1; i >= 0; i -= width) {\r\n        // We then iterate through each row, to get to each and every slot\r\n        for (let j = 0; j < width; j++) {\r\n          const index = i - j;\r\n          // Here are the two formulaes corresponding to flipping the board clockwise and counter clockwise\r\n          // They take the initial index of the slot as well as the number of the row it sits in (first row = 1) as parameters\r\n          const newIndex = flipValue === 1 ? height * (index + 1 - (rowCount - 1) * width) - rowCount : height * (rowCount * width - 1 - index) + rowCount - 1;\r\n          newSlots[newIndex] = slots[index];\r\n        }\r\n        rowCount--;\r\n      }\r\n\r\n      const turnAction = state.turnAction;\r\n      const startOfTurn = !turnAction.type;\r\n      if (startOfTurn) stepNumber++;        \r\n      state.stepNumber = stepNumber;\r\n      \r\n      const isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      const gravIsOff = !state.gravityState;\r\n\r\n      if (isEndTurn && gravIsOff) {\r\n        state.turnAction = {number:0, type:0};\r\n        state.currentSign = state.currentSign === 'X' ? 'O' : 'X';        \r\n      } else {\r\n        state.turnAction.number += 1;\r\n        state.turnAction.type = 3;\r\n      }\r\n\r\n      history = history.slice(0, stepNumber);\r\n      state.history = history.concat([{slots: newSlots, boardFlip: boardFlip}]);\r\n      state.transitions = {slots: 0, board: flipValue * -90};\r\n\r\n      const players = state.players;\r\n      if (players && players.length === 2) state.turnAction.action = true;\r\n\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db flipBoard\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/stepNumber/');\r\n      //   if (startOfTurn) {\r\n      //     set(baseRef, stepNumber);\r\n      //   }\r\n      //   if (gravIsOff) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);        \r\n      //     }\r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, state.transitions);        \r\n      //   }\r\n      // } \r\n    },\r\n\r\n    endTurn: (state) => {\r\n      // const turnAction = {number:0, type:0, action:true};\r\n      state.turnAction = {number:0, type:0, action:true};\r\n      state.currentSign = state.currentSign === 'X' ? 'O' : 'X';\r\n      state.transitions = {slots:0, board:0, status:1};\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db endTurn\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/turnAction/');\r\n      //   set(baseRef, turnAction.number);\r\n      //   baseRef = ref(db, '/currentSign/');\r\n      //   set(baseRef, state.currentSign);\r\n      //   baseRef = ref(db, '/transitions/');\r\n      //   set(baseRef, {slots:0, board:0});\r\n      // }\r\n    },\r\n\r\n    changeStep: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.currentSign = state.stepNumber % 2 === 0 ? 'X' : 'O';      \r\n      state.turnAction = {number:0, type:0};          \r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    setGameSettings: (state, action) => {\r\n      const settings = action.payload;\r\n      state.gameSettings = settings;\r\n      state.history = [{\r\n        slots: Array(settings.width * settings.height).fill(0),\r\n        boardFlip: 0\r\n      }];\r\n    },\r\n\r\n    setAsyncStatus: (state, action) => {\r\n      state.asyncStatus = action.payload;\r\n    },\r\n\r\n    reset: (state, action) => {\r\n      const isDbReset = action.payload;\r\n      const history = state.history.slice(0,1);\r\n      history[0].boardFlip = 0;\r\n      const transitions = {slots:0, board:0};        \r\n      if (isDbReset) {\r\n        const db = getDatabase();\r\n        let baseRef = ref(db, '/stepNumber/');\r\n        set(baseRef, 0);\r\n        baseRef = ref(db, '/gameSettings/');\r\n        set(baseRef, state.gameSettings);        \r\n        baseRef = ref(db, '/history/');\r\n        set(baseRef, history);   \r\n        baseRef = ref(db, '/turnAction/');\r\n        set(baseRef, 0);        \r\n        baseRef = ref(db, '/currentSign/');\r\n        set(baseRef, 'X');      \r\n        baseRef = ref(db, '/transitions/');\r\n        set(baseRef, transitions);\r\n        baseRef = ref(db, '/gravityState/');\r\n        set(baseRef, true);\r\n        baseRef = ref(db, '/gameIsOn/');\r\n        set(baseRef, true);        \r\n      }\r\n      state.stepNumber = 0;\r\n      state.history = history;\r\n      state.currentSign = 'X';      \r\n      state.turnAction = {number:0, type:0};      \r\n      state.transitions = transitions;\r\n      state.gravityState = true;\r\n    },\r\n\r\n    removePlayers: (state) => {\r\n      // As this is called on window.onunload, we only have time for one API call to be made\r\n      const db = getDatabase();\r\n      set(ref(db, '/players/'),0);\r\n    }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(updateStateAsync.pending, (state) => {\r\n        console.log(\"updateStateAsync pending\");\r\n      })\r\n      .addCase(updateStateAsync.fulfilled, (state, action) => {\r\n        const data = action.payload;\r\n        console.log(\"updateStateAsync\",data);\r\n\r\n        if (data === 0) {\r\n          window.alert('Your opponent left! Reload the page to exit the current game');\r\n          state.players = null;\r\n          state.asyncStatus = '';\r\n        } else {\r\n          state.history = data.history;\r\n          state.stepNumber = data.stepNumber;\r\n          const transitions = data.transitions;\r\n          state.transitions = {slots: transitions.slots, board: transitions.board};\r\n          state.gravityState = data.gravityState;\r\n          const turnAction = data.turnAction;\r\n          state.turnAction.number = turnAction === actionsPerTurn ? 0 : turnAction;\r\n          state.asyncStatus = state.currentSign === data.currentSign ? 'watching' : '';\r\n          state.currentSign = data.currentSign;\r\n        }\r\n      })\r\n      .addCase(setGameStateAsync.pending, (state) => {\r\n        console.log(\"setGameStateAsync pending\");\r\n      })      \r\n      .addCase(setGameStateAsync.fulfilled, (state, action) => {\r\n        const players = action.payload;\r\n        console.log(\"setGameStateAsync\",players);\r\n        if (players) {\r\n          const playersRefs = Object.keys(players);\r\n          const playersCount = playersRefs.length; \r\n          console.log('playersCount',playersCount);\r\n          if(!playersCount || !state.players) {\r\n            console.log(\"setGameStateAsync []\");\r\n            state.players = [];\r\n            // window.alert('There was an issue, please try again!');          \r\n          } \r\n\r\n          if (playersCount) {\r\n            let statePlayers = state.players;\r\n            const statePlayersCount = statePlayers.length;\r\n            console.log('statePlayersCount',statePlayersCount);\r\n            if (!statePlayersCount || playersCount === 2) {\r\n              const signs = ['O', 'X'];\r\n\r\n              if (statePlayersCount === 1) statePlayers = [];\r\n              for (let i in playersRefs) {\r\n                statePlayers = statePlayers.concat({player: players[playersRefs[i]], sign: signs[i]});\r\n                console.log('statePlayers',statePlayers);\r\n                state.players = statePlayers;\r\n              }\r\n              state.transitions = {slots:0, board:0};\r\n            }  \r\n          }\r\n        }\r\n      });\r\n  }  \r\n});\r\n\r\nexport const {\r\n  fillSlot,\r\n  changeStep,\r\n  toggleSort,\r\n  gravity,\r\n  flipBoardState,\r\n  endTurn,\r\n  setAsyncStatus,\r\n  setGameSettings,\r\n  reset,\r\n  removePlayers,\r\n} = connectXSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.connectX.value)`\r\nexport const selectHistory = (state) => state.connectX.history;\r\nexport const selectGameSettings = (state) => state.connectX.gameSettings;\r\nexport const selectStepNumber = (state) => state.connectX.stepNumber;\r\nexport const selectSortIsAsc = (state) => state.connectX.sortIsAsc;\r\nexport const selectGravityState = (state) => state.connectX.gravityState;\r\nexport const selectCurrentSign = (state) => state.connectX.currentSign;\r\nexport const selectPlayers = (state) => state.connectX.players;\r\nexport const selectAsyncStatus = (state) => state.connectX.asyncStatus;\r\nexport const selectTurnAction = (state) => state.connectX.turnAction;\r\nexport const selectTransitions = (state) => state.connectX.transitions;\r\nexport const selectAnimations = (state) => state.connectX.animations;\r\n\r\n\r\nexport const playSlot = (slotIndex) => (dispatch, getState) => {\r\n  const stepNumber = selectStepNumber(getState());\r\n  const history = selectHistory(getState()).slice(0, stepNumber + 1);\r\n  const current = history[stepNumber];    \r\n  const slots = current.slots.slice();\r\n  const gravityState = selectGravityState(getState());\r\n  // Can't play a slot if it has already been played\r\n  if (slots[slotIndex]) return; \r\n\r\n  const data = {stepNumber, history, current, slots, slotIndex, gravityState};\r\n  dispatch(fillSlot(data));\r\n\r\n  if(gravityState) {\r\n    dispatch(gravity({toggle:false, slotIndex}));\r\n  }\r\n};\r\n\r\nexport const flipBoard = (direction) => (dispatch, getState) => {\r\n  dispatch(flipBoardState(direction));\r\n  dispatch(gravity({toggle:false, noEdit: !selectGravityState(getState())}));\r\n};\r\n\r\nexport const jumpTo = (stepNumber) => (dispatch, getState) => {\r\n  if (selectPlayers(getState()).length < 2) { \r\n    dispatch(changeStep(stepNumber));\r\n    // if(selectGravityState(getState())) {\r\n    //   dispatch(toggleGravity({toggle:false}));\r\n    // }\r\n  }\r\n};\r\n\r\nexport const sendGameSettings = (settings) => (dispatch) => {\r\n  dispatch(reset());\r\n  dispatch(setGameSettings(settings));\r\n};\r\n\r\n// CALL TO ASYNC\r\nexport const initPlayers = () => (dispatch) => {\r\n  dispatch(setGameStateAsync(true));\r\n};\r\n\r\nexport const requestGame = (playerInfos) => (dispatch, getState) => {\r\n  console.log(playerInfos);\r\n\r\n  set(push(ref(getDatabase(), 'players')), {\r\n    pseudo: playerInfos.pseudo,\r\n    stamp: playerInfos.stamp\r\n  })\r\n  .then(() => {\r\n    if (!selectPlayers(getState()).length)\r\n    dispatch(setGameStateAsync(false));\r\n    const watchTimer = setInterval(() => {\r\n      if (selectPlayers(getState()).length < 2) {\r\n        dispatch(setGameStateAsync(false));\r\n      } else {\r\n        clearInterval(watchTimer);\r\n      }\r\n    }, 4000);\r\n  })\r\n  .catch((error) => {\r\n    // The write failed...\r\n  });\r\n};\r\n\r\nexport const watchGame = (mySign) => (dispatch, getState) => {\r\n\r\n  // Genius move\r\n  if (selectAsyncStatus(getState()) !== 'watching') {\r\n\r\n    const watchTimer = setInterval(() => {\r\n      const turnData = {turnAction: selectTurnAction(getState()).number, stepNumber: selectStepNumber(getState())};\r\n      // console.log(\"selectPlayers(getState())\",selectPlayers(getState()).length === 2);\r\n      if (mySign === selectCurrentSign(getState()) || selectPlayers(getState()).length !== 2) {\r\n        clearInterval(watchTimer);\r\n      } else {\r\n        dispatch(updateStateAsync(turnData));\r\n      }    \r\n    }, 4000);\r\n  }\r\n\r\n  dispatch(setAsyncStatus('watching'));\r\n};    \r\n\r\nexport default connectXSlice.reducer;\r\n","import React from 'react';\r\n// CSS\r\nimport styles from '../ConnectX.module.css';\r\n\r\nfunction Slot(props) {\r\n\r\n\t\t// FALL ANIMATION //\r\n\t\tconst slotScore = props.slotScore;\r\n\t\tlet transitionClass = \"\";\r\n\t\tlet speed = 0\r\n\t\tif (slotScore) {\r\n\t\t\ttransitionClass = `${styles.hasTransition} ${styles.fall}`;\r\n\t\t\tspeed = Math.round((0.16 + 0.189 * Math.log(slotScore)) * 10) / 10;\r\n\t\t}\r\n\r\n\t\t// DISPLAY SLOT CONTENT //\r\n    const contentClass = props.value ? `${styles.slotFilled} ${props.value === 'X' ? styles.slotFilledX : styles.slotFilledO}` : \"\";\r\n    \r\n    // ADDITIONNAL SLOT FEATURES //\r\n    let animType = props.animation ? props.animation : '';\r\n    animType = styles[animType];\r\n\r\n    // DISPLAY WIN //\r\n    const winClass = props.winStyle ? styles.wonSlot : '';\r\n    let coeff = -1;\r\n  return (\r\n    <button\r\n    \tclassName={`${styles.slot} ${contentClass} ${winClass}`}\r\n    \tonClick={props.onClick}\r\n    >\r\n      <div \tstyle={{'--slotStartPos': `calc(${coeff * slotScore * 125}% + ${slotScore}px)`,'--speed': `${speed}s`}}\r\n\t\t\t\t\t\tclassName={`${transitionClass} ${animType ? animType : ''}`} onTransitionEnd={props.handleTransitionEnd}>\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Slot;","// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\n// WIN DISPLAY //\r\nexport function styleWin() {\r\n  const wonSlot = styles.wonSlot;\r\n  const slots = Array.from(document.querySelectorAll(`.${wonSlot}`));\r\n  slots.forEach(e => {\r\n    e.classList.remove(wonSlot);\r\n    e.classList.add(styles.win);\r\n  });    \r\n};\r\n\r\n// LAUNCH TRANSITIONS //\r\nexport function transitionBoards() {\r\n  const hasTransition = styles.hasTransition;\r\n  // We get all elements with the transition class\r\n  const transitionedElements = Array.from(document.querySelectorAll(`.${hasTransition}`));\r\n  console.log(transitionedElements);\r\n  transitionedElements.forEach(e => {\r\n    // First we clear out the class on the previously animated elements\r\n    e.classList.remove(hasTransition);\r\n\r\n    // We trust the transitions for animations happening after this update\r\n    setTimeout(() => { e.classList.add(styles.transition); }, 0);\r\n  });\r\n};\r\n","import React from 'react';\r\nimport Slot from './Slot';\r\n\r\n// STYLE\r\nimport { transitionBoards, styleWin } from '../ConnectXTransitions.js';\r\nimport styles from '../ConnectX.module.css';\r\n\r\nclass Board extends React.Component {\r\n\r\n  // ANIMATION & WIN TRIGGER //\r\n  componentDidUpdate() {\r\n    // We use this hook to manipulate the transitions on the dom elements \r\n    const transitions = this.props.transitions;\r\n    if(this.props.isMainBoard) {\r\n      transitionBoards();\r\n      // If there are no transitions and the game is won, we style it directly\r\n      if ((!transitions || (!transitions.slots && !transitions.board && !transitions.status)) && this.props.winIndexes.length) {\r\n        styleWin();\r\n      }\r\n    }\r\n  }\r\n\r\n  // TRANSITIONS CALLBACK //\r\n  handleTransitionEnd = (event) => {\r\n    // We wait for the end of the transitions to style the winning slots\r\n    console.log(\"hey style win transitionend\");\r\n    styleWin();\r\n  };\r\n\r\n  // PREPARE THE SLOT //\r\n  renderSlot = (i, isBoardWon, transition, animation) => {\r\n    // We deactivate the handleclick action if the board is won\r\n    const onClickFunc = isBoardWon ? undefined : () => this.props.onClick(i);\r\n\r\n    // Determine if the slot is part of a winning streak\r\n    const winIndexes = isBoardWon ? this.props.winIndexes : null;\r\n    const winStyle = winIndexes && winIndexes.includes(i) ? true : false;\r\n\r\n    let slotScore = 0;\r\n    let transitionCallback;\r\n    if(transition) {\r\n      // Assign the slot a score based on the animation map: the higher the score, the longer the animation \r\n      slotScore = transition;\r\n      if(winStyle) { // For now we only put the callback to style a win \r\n        const transitions = this.props.transitions.slots;\r\n        // Sort out the null elements, then sort in descending order the slotScores that are left inside\r\n        // and take out the first value, which indicates the maximum animation score for this render\r\n        const maxScore = transitions.filter(el => {return el !== 0;}).sort((a, b) => b - a)[0];\r\n        // Finds the first index with a maxScore in the map and check if it corresponds to the current index\r\n        const isFirstMaxScoreSlot = i === transitions.findIndex(e => e === maxScore);\r\n        // We make this slot a reference for the longest animation and put the callback onto it\r\n        if(isFirstMaxScoreSlot) transitionCallback = (i) => this.handleTransitionEnd(i);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Slot\r\n        key={i}\r\n        value={this.props.slots[i]}\r\n        onClick={onClickFunc}\r\n        slotScore={slotScore}\r\n        winStyle={winStyle}\r\n        animation={animation}\r\n        handleTransitionEnd={transitionCallback}\r\n      /> \r\n    );\r\n  }\r\n\r\n  // STRUCTURE THE SLOTS AND STYLE THE BOARD  //\r\n  createBoard = (boardParams, isMainBoard, isBoardWon) => {\r\n    let board = []\r\n    let index = 0;\r\n    const transitions = this.props.transitions;\r\n    const slotTransitions = transitions ? this.props.transitions.slots : null;\r\n    const slotAnimations = this.props.animations ? this.props.animations : null;\r\n    let slotTransition = 0;\r\n    let slotAnimation = 0;\r\n    // Outer loop adding the full rows to the board\r\n    for (let i = 0; i < boardParams.height; i++) {\r\n      let slots = [];\r\n      // Inner loop creating the slots of the rows\r\n      for (let j = 0; j < boardParams.width; j++) {\r\n        if (slotTransitions) slotTransition = slotTransitions[index];\r\n        if (slotAnimations) slotAnimation = slotAnimations[index];\r\n        slots.push(this.renderSlot(index, isBoardWon, slotTransition, slotAnimation));\r\n        index++;\r\n      }\r\n      // At the end of the outer loop, we encapsulate our slots in row\r\n      board.push(<div key={i} className={styles.board_row}>{slots}</div>)\r\n    }\r\n\r\n    const startAngle = transitions ? this.props.transitions.board : 0;\r\n    \r\n    // We include the board flip in the classes to make sure the board classes reload \r\n    // when we flip the board. Otherwise, React wouldn't re-assign the values even though the Board was re-rendered,\r\n    // it's probably a React feature, but i'm not certain of what is happening\r\n    return (\r\n      <div style={{'--boardStartPos': `rotateZ(${startAngle}deg)`}}\r\n          className={`\r\n              ${styles.board} \r\n              ${isMainBoard ? styles.main_board : \"\"} \r\n              ${isMainBoard ? this.props.flip : \"\"} \r\n              ${startAngle === 0 ? \"\" : `${styles.flip} ${styles.hasTransition}`} \r\n              ${this.props.isSelected ? styles.selected : \"\"}\r\n            `}\r\n          onTransitionEnd={isMainBoard && isBoardWon ? () => this.handleTransitionEnd() : undefined} >\r\n        {board}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // RETURN THE BOARD'S OWN CSS VARIABLES //\r\n  styleBoard = (size, boardParams) => {\r\n    const paramsHeight = boardParams.height; \r\n    const paramsWidth = boardParams.width; \r\n    // Align the size of the board to fit the slots  \r\n    // Arbitrary decision to occupy (X%) amount of space in the viewport\r\n    // Calculate two sizes for the slot based on the available space on both axes in the viewport\r\n    let slotSize = Math.floor(window.innerHeight * 0.55 / (paramsHeight * size));\r\n    let slotSizeDiff = Math.floor(window.innerHeight * 0.55 / (paramsWidth * size));\r\n    // let slotSizeDiff = Math.floor(window.innerWidth * 0.8 / (boardParams.width * size));\r\n\r\n    // The final size will be the smallest of the two, as we want the board to fit inside the viewport whatever the\r\n    // flip state of the board\r\n    slotSize = slotSize <= slotSizeDiff ? slotSize : slotSizeDiff;\r\n\r\n    // let fontSize = Math.round((boardWidth / 15.22) * Math.pow(this.props.boardParams.width, -1) * 10 /*/ size*/) / 10;\r\n    let fontSize = Math.round((paramsHeight / 130) * 10 /*/ size*/) / 10;\r\n    if (fontSize <= 0.5) fontSize = 0;\r\n\r\n    const boardWidth = slotSize * paramsWidth;\r\n    const boardHeight = slotSize * paramsHeight;\r\n    // let gameHeight = '';\r\n    // if (size === 1) gameHeight = Math.floor(window.innerHeight * 0.615);\r\n    return {\r\n      '--boardWidth': boardWidth + 'px',\r\n      '--boardHeight': boardHeight + 'px',\r\n      // '--gameHeight': `${gameHeight}px`,\r\n      // We use margin-right: -1px to merge the borders together on the boards, so we bump the slot size by 1 to compensate\r\n      '--slotSize': (slotSize + 1) + 'px',\r\n      '--fontSize': fontSize + 'em'\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // The board flip indicates us which dimension to take as which for the board\r\n    let boardParams = this.props.boardParams;\r\n    if (this.props.flip % 2 !== 0) {\r\n      boardParams = {width: boardParams.height, height: boardParams.width};\r\n    }\r\n    const isMainBoard = this.props.isMainBoard;\r\n\r\n    // Display a title under the history moves\r\n    let title = this.props.title;\r\n    let cssCoeff = 4;\r\n    let boardClass = styles.moves_board;\r\n    let disabledClass = '';\r\n    let isBoardWon = false;   \r\n    let statusHandler = null;\r\n    if (isMainBoard) {\r\n      title = '';\r\n      cssCoeff = 1;\r\n      boardClass = styles.main;\r\n      if (this.props.statusClass.disabled) disabledClass = styles.disabledBoard;\r\n      const statusClass = this.props.statusClass;\r\n      // console.log(this.props.onClick);\r\n\r\n      statusHandler = \r\n        <div className={styles.statusHandler}>\r\n          <button className={`${statusClass.current}`}></button>\r\n          <button onClick={this.props.endTurnFunc} className={`${statusClass.previous}`}></button>\r\n        </div>;\r\n      if (this.props.winIndexes.length) isBoardWon = true;   \r\n    }\r\n    // We tweak the style of the board depending on it being the main one or not\r\n    // styleBoard(n, params) styles the board at a 1:n ratio\r\n    return (\r\n      <div style={this.styleBoard(cssCoeff, boardParams)} \r\n          className={`${boardClass} ${disabledClass}`}>\r\n        {statusHandler}\r\n        {this.createBoard(boardParams, isMainBoard, isBoardWon)}\r\n        <p className={styles.title}>{title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n// CSS\r\n// import styles from '../ConnectX.module.css';\r\n\r\nclass Form extends React.Component {\r\n\tprepareInfos = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst width = parseInt(this.width.value);\r\n\t\tconst height = parseInt(this.height.value);\r\n\t\tconst minVal = width <= height ? width : height;\r\n\t\tconst scoreTarget = Math.round(0.8 + 1.7 * Math.log((width + height) / 2));\r\n\t\tconst gameInfos = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tscoreTarget: minVal <= scoreTarget ? minVal : scoreTarget\r\n\t\t\t// scoreTarget: parseInt(this.scoreTarget.value)\r\n\t\t};\r\n\t\tthis.props.sendGameSettings(gameInfos);\r\n\r\n\t\t// We clear the textarea\r\n\t\tthis.infosForm.reset();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form \r\n\t\t\t\tclassName=\"form\"\r\n\t\t\t\tonSubmit={i => this.prepareInfos(i)}\r\n\t\t\t\tref={i => this.infosForm = i}\r\n\t\t\t>\r\n\t\t\t\t<span>Personnalisez la taille du plateau (entre 3 et 32) :</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"\\b([3-9]|[12][0-9]|3[0-2])\\b\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.width = i}\r\n\t\t\t\t\tplaceholder=\"largeur\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"\\b([3-9]|[12][0-9]|3[0-2])\\b\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.height = i}\r\n\t\t\t\t\tplaceholder=\"hauteur\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\t\t\t\t\r\n{/*\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"[0-9]*\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.scoreTarget = i}\r\n\t\t\t\t/>*/}\r\n\r\n\t\t\t\t<button type=\"submit\" >\r\n\t\t\t\t</button>\r\n\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  playSlot,\r\n  jumpTo,\r\n  toggleSort,\r\n  gravity,\r\n  flipBoard,\r\n  endTurn,  \r\n  sendGameSettings,\r\n  watchGame,\r\n  requestGame,\r\n  reset,\r\n  initPlayers,  \r\n  removePlayers,\r\n\r\n  selectTurnAction,\r\n  selectCurrentSign,\r\n  selectPlayers,\r\n  selectGravityState,  \r\n  selectGameSettings,\r\n  selectHistory,\r\n  selectStepNumber,\r\n  selectSortIsAsc,\r\n  selectTransitions,\r\n  selectAnimations,\r\n} from './connectXSlice';\r\nimport Board from './components/Board';\r\nimport Form from './components/Form';\r\nimport { Switch, Reset } from '../general/helpers/Components';\r\nimport { calculateWinner, updateDb } from '../general/helpers/Functions';\r\n// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\nexport function ConnectX(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useSelector(selectHistory);\r\n  const stepNumber = useSelector(selectStepNumber);\r\n  const gameSettings = useSelector(selectGameSettings);\r\n  const turnAction = useSelector(selectTurnAction);\r\n  const players = useSelector(selectPlayers);\r\n  const currentSign = useSelector(selectCurrentSign);\r\n  const gravityState = useSelector(selectGravityState);\r\n  const transitions = useSelector(selectTransitions);  \r\n  const animations = useSelector(selectAnimations);\r\n  const sortIsAsc = useSelector(selectSortIsAsc);\r\n  const currentSlots = history[stepNumber].slots;\r\n  const playerInfos = props.playerInfos;\r\n  const pseudo = playerInfos.pseudo;\r\n\r\n  let gameSettingsForm = <Form sendGameSettings={(i) => dispatch(sendGameSettings(i))} />\r\n  let requestGameButton = <button onClick={() => dispatch(requestGame(playerInfos))}>Request game</button>\r\n  let endTurnButton = null;\r\n  let endTurnFunc;\r\n  let resetButton = <Reset title=\"Reset\" onClick={() => dispatch(reset())}/>\r\n\r\n  let gameControls =\r\n    <span>\r\n      <button onClick={() => dispatch(flipBoard(1))}>Flip right</button>\r\n      <button onClick={() => dispatch(flipBoard(-1))}>Flip left</button>\r\n      <Switch isOn={!gravityState} onClick={() => dispatch(gravity({toggle:true}))}/>\r\n    </span>;\r\n\r\n  const disabledGameControls =\r\n    <span>\r\n      <button className={styles.disabled} onClick={() => {}}>Flip right</button>\r\n      <button className={styles.disabled} onClick={() => {}}>Flip left</button>\r\n      <Switch className={styles.disabled} isOn={!gravityState} onClick={() => {}}/>\r\n    </span>;\r\n\r\n  let playSlotFunc = (i) => dispatch(playSlot(i));\r\n\r\n  let gameStatus = history.length === 1 ? 'start' : '';\r\n  let asyncGameStatus = '';\r\n  console.log(\"players\",players);\r\n  // Use the stamp to differentiate ourselves from an existing player with the same pseudo\r\n  const idStamp = playerInfos.stamp;\r\n  if (players && players.length > 0) {\r\n    const playerCount = players.length;\r\n    console.log(\"playerCount\",playerCount);\r\n\r\n    const myPlayer = players.find(e => e.player.pseudo === pseudo && e.player.stamp === idStamp);\r\n    const isPlayer = myPlayer !== undefined;\r\n    console.log(\"myplayer\",myPlayer);\r\n\r\n    if (isPlayer) {\r\n      const waitingForGame = playerCount === 1;\r\n      const inGame = playerCount === 2;\r\n  \r\n      if (waitingForGame || inGame) {\r\n        console.log(\"waitingForGame\",waitingForGame);\r\n        window.onunload = function(event) {\r\n          dispatch(removePlayers());\r\n        };\r\n      }\r\n  \r\n      if (inGame) {\r\n        const mySign = myPlayer.sign;\r\n        const isMyTurn = mySign === currentSign ? true : false;\r\n        console.log(isMyTurn);\r\n        asyncGameStatus = `You are the ${mySign === 'X' ? 'red' : 'blue'} player. ${isMyTurn ? `Your turn to play!` : `It's your opponent's turn.`}`;\r\n        // Writing the DB with the new values if we just used an action \r\n        if (turnAction.action) {\r\n          updateDb({history, stepNumber, turnAction, currentSign, gravityState, transitions, animations});\r\n        }         \r\n\r\n        if (!isMyTurn) {\r\n          dispatch(watchGame(mySign));\r\n          playSlotFunc = () => {};\r\n          gameControls = disabledGameControls;\r\n        }\r\n        gameSettingsForm = null;\r\n        resetButton = null;\r\n      }\r\n      \r\n      requestGameButton = null;\r\n\r\n    } else {\r\n      const gameInProgress = playerCount === 2;\r\n      const opponentWaiting = playerCount === 1;\r\n  \r\n      if (gameInProgress) {\r\n        requestGameButton = null;\r\n      }\r\n      if (opponentWaiting) {\r\n        requestGameButton = <button className={styles.highlighted} onClick={() => dispatch(requestGame(playerInfos))}>Join game</button>;\r\n      }\r\n    }\r\n  } else if (!players) {\r\n    console.log(\"am i crazy\", players);\r\n    dispatch(initPlayers());\r\n  }\r\n\r\n  console.log(\"currentSign\",currentSign);\r\n  let gameStyle;\r\n  let reverseGameStyle;\r\n  if (currentSign ===  'X') {\r\n    gameStyle = styles.redPlayerTurn\r\n    reverseGameStyle = styles.bluePlayerTurn\r\n  } else {\r\n    gameStyle = styles.bluePlayerTurn\r\n    reverseGameStyle = styles.redPlayerTurn\r\n  }\r\n  // We want the player to use one of his two actions to fill a slot\r\n  if (turnAction.number) {\r\n    const previousAction = turnAction.type;\r\n    console.log(\"previousAction\",previousAction);\r\n    if (previousAction === 1) {\r\n      playSlotFunc = () => {};\r\n      endTurnButton = <button onClick={() => dispatch(endTurn())}>End turn</button>\r\n      endTurnFunc = () => dispatch(endTurn());\r\n      gameStyle = {\r\n        current: `${gameStyle}`, \r\n        previous: `${styles.canEndTurn} ${styles.fadeInOnHover} ${styles.hasTransition}`,\r\n        disabled: true\r\n      };\r\n      // saveSessionItems \r\n      \r\n    } else {\r\n      gameStyle = {current: `${gameStyle}`, previous: ``};\r\n      gameControls = disabledGameControls;\r\n    }\r\n  } else {\r\n    console.log(transitions);\r\n    gameStyle = {\r\n      current: gameStyle,\r\n      previous: history.length > 1 ? `${transitions.status ? `${styles.endTurn} ${reverseGameStyle}`: reverseGameStyle} ${styles.fadeout} ${styles.hasTransition}` : ''\r\n    };\r\n  }\r\n\r\n  const boardFlip = history[stepNumber].boardFlip;\r\n  const boardParams = {\r\n    width: gameSettings.width,\r\n    height: gameSettings.height\r\n  }\r\n\r\n  let winIndexes = [];\r\n  const scoreTarget = gameSettings.scoreTarget;\r\n  if (stepNumber >= (scoreTarget * 2 - 1)) {\r\n    const boardWidth = boardFlip % 2 === 0 ? boardParams.width : boardParams.height;\r\n    winIndexes = calculateWinner((history[stepNumber - 1]).slots, currentSlots, scoreTarget, boardWidth);\r\n  }\r\n\r\n  // We create the move list to be displayed from the history\r\n  let moves = history.map((step, move) => {\r\n    const desc = move ?'Move #' + move : 'Game start';\r\n    const isSelected = stepNumber === move ? true : false;\r\n    const isLatestHistoryMove = move === history.length - 1;\r\n\r\n    return (\r\n      <li key={move}>\r\n        <Board\r\n          boardParams={boardParams}        \r\n          isSelected={isSelected}\r\n          slots={history[move].slots}\r\n          transitions={isLatestHistoryMove ? transitions : null}\r\n          flip={history[move].boardFlip}\r\n          onClick={() => dispatch(jumpTo(move))}\r\n          title={desc}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  // We sort the resulting array in descending order if the toggle is on\r\n  moves = sortIsAsc ? moves : moves.sort((a, b) => b.key - a.key);\r\n\r\n  // Choose which game status has to be displayed !!!!!!!!!! IMPROVE DISPLAY !!!!!!!!!!!!!!\r\n  let status;\r\n  if (winIndexes.length) {\r\n    let streakCount = 0;\r\n    winIndexes.forEach(index => {\r\n      if(currentSlots[index] === 'X') streakCount++;\r\n    });\r\n    if(streakCount > winIndexes.length - streakCount) {\r\n      status = 'Winner: X';\r\n    } else if (streakCount < winIndexes.length - streakCount){\r\n      status = 'Winner: O';\r\n    } else {\r\n      status = 'Draw!'\r\n    }\r\n  } else if (!winIndexes.length && stepNumber === currentSlots.length) {\r\n    status = 'Draw!'\r\n  } /*else if (turnAction.type === 1) {\r\n    status = 'Next player: ' + player === 'X' ? 'O' : 'X'\r\n  } */else {\r\n    status = 'Next player: ' + currentSign\r\n  }\r\n  return (\r\n    <div className={styles.game}>\r\n      {gameSettingsForm}\r\n      {asyncGameStatus}\r\n      <Board\r\n        isMainBoard={true}\r\n        statusClass={gameStyle}\r\n        boardParams={boardParams}\r\n        slots={currentSlots}\r\n        flip={boardFlip}\r\n        winIndexes={winIndexes}\r\n        onClick={(i) => playSlotFunc(i)}\r\n        endTurnFunc={endTurnFunc}\r\n        transitions={transitions}\r\n        animations={animations}\r\n      />\r\n      <div className={styles.game_info}>\r\n        <div className={styles.status}>{status}</div>\r\n        <div className={styles.controls}>\r\n          {requestGameButton}\r\n          {gameControls}\r\n          <Switch isOn={!sortIsAsc} onClick={() => dispatch(toggleSort())}/>\r\n          {endTurnButton}\r\n          {resetButton}\r\n        </div>\r\n      {/*Restructure the scroll box so it expands as the moves come in, but make it scrollable so it slides under the main div\r\n         Basically remove the scroll bar entirely, make the bottom of the page a div that translateY onScrollEvent*/}\r\n        <div className={styles.scrollableX}>\r\n          <ol className={styles.moves}>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { getDatabase, ref, set } from \"firebase/database\";\r\nimport '../../../base';\r\n\r\nexport function updateDb(state) {\r\n  console.log(\"updateDb\");\r\n  const db = getDatabase();\r\n  const stepNumber = state.stepNumber;\r\n  let baseRef = ref(db, `/history/${stepNumber}`);\r\n  set(baseRef, state.history[stepNumber]);\r\n  baseRef = ref(db, '/stepNumber/');\r\n  set(baseRef, stepNumber);\r\n  baseRef = ref(db, '/turnAction/');\r\n  set(baseRef, state.turnAction.number);\r\n  baseRef = ref(db, '/currentSign/');\r\n  set(baseRef, state.currentSign);        \r\n  baseRef = ref(db, '/gravity/');\r\n  set(baseRef, state.gravityState);\r\n  baseRef = ref(db, '/transitions/');\r\n  set(baseRef, state.transitions);\r\n  baseRef = ref(db, '/animations/');\r\n  set(baseRef, state.animations);\r\n}\r\n\r\n// A function that returns an array of indexes corresponding the slots that are part of a winning streak\r\n// on a two dimensionnal board, whatever the (reasonable) size\r\n// (previous) and (current) are arrays representing the two dimensionnal board at different steps\r\n// (scoreTarget) is the INT number of slots of the same value in line needed to win\r\n// (rowLength) is the INT number of slots in a single row of the board\r\nexport function calculateWinner(previous, current, scoreTarget, rowLength) {\r\n  let winSlots = [];\r\n  let finalWinSlots = [];\r\n\r\n  // We look for the differences between the current and previous board\r\n  let indexes = [];\r\n  for(const i in current) {\r\n    if(current[i] !== previous[i]) indexes.push(parseInt(i));\r\n  }\r\n\r\n  // console.log(indexes);\r\n  // We loop through each of these slots, as potential part of a winning streak\r\n  for (let j = indexes.length - 1; j >= 0; j--) {\r\n    const index = indexes[j];\r\n    // We dont run the check if the current index is already marked as part of a streak\r\n    if(!finalWinSlots.includes(index)) {\r\n      const currentValue = current[index];\r\n      // We search for streaks of the same value on all 4 axes and 8 directions, starting from the current index\r\n      // Horizontal axis\r\n      let streakL = 0;\r\n      for(let i = index; i > index - scoreTarget; i--) {\r\n        if(current[i-1] && current[i-1] === currentValue && i % rowLength !== 0) {\r\n          streakL++;\r\n          winSlots.push(i-1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakR = 0;\r\n      for(let i = index; i < index + scoreTarget; i++) {\r\n        if(current[i+1] && current[i+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakR++;\r\n          winSlots.push(i+1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      // We add the streak of both direction together, and check if it reaches the required score\r\n      const isWinHoriz = (streakL + streakR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakL);\r\n      // console.log(streakR);\r\n      // console.log(\"WIN HORIZ:\", isWinHoriz);\r\n      \r\n      // If it does, we add the current index to our work variable as part of the streak,\r\n      // then add the whole thing to our return variable\r\n      if(isWinHoriz) {\r\n        winSlots.push(index);   \r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }     \r\n      winSlots = [];\r\n\r\n      // Vertical axis\r\n      let streakT = 0;\r\n      for(let i = index; i > index - (scoreTarget * rowLength); i -= rowLength) {\r\n        if(current[i-rowLength] && current[i-rowLength] === currentValue) {\r\n          streakT++;\r\n          winSlots.push(i-rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakB = 0;\r\n      for(let i = index; i < index + (scoreTarget * rowLength); i += rowLength) {\r\n        if(current[i+rowLength] && current[i+rowLength] === currentValue) {\r\n          streakB++;\r\n          winSlots.push(i+rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinVert = (streakT + streakB) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakT);\r\n      // console.log(streakB);\r\n      // console.log(\"WIN VERT:\", isWinVert);\r\n\r\n      if(isWinVert) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Top diagonal axis\r\n      let streakTL = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength + 1); i -= (rowLength + 1)) {\r\n        if(current[i-rowLength-1] && current[i-rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakTL++;\r\n          winSlots.push(i-rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakBR = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength + 1); i += (rowLength + 1)) {\r\n        if(current[i+rowLength+1] && current[i+rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakBR++;\r\n          winSlots.push(i+rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      const isWinDiagT = (streakTL + streakBR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTL);\r\n      // console.log(streakBR);\r\n      // console.log(\"WIN DIAGT:\", isWinDiagT);\r\n\r\n      if(isWinDiagT) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Bottom diagonal axis\r\n      let streakTR = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength - 1); i -= (rowLength - 1)) {\r\n        if(current[i-rowLength+1] && current[i-rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakTR++;\r\n          winSlots.push(i-rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      let streakBL = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength - 1); i += (rowLength - 1)) {\r\n        if(current[i+rowLength-1] && current[i+rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakBL++;\r\n          winSlots.push(i+rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinDiagB = (streakTR + streakBL) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTR);\r\n      // console.log(streakBL);\r\n      // console.log(\"WIN DIAGB:\", isWinDiagB);\r\n\r\n      if(isWinDiagB) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n    }\r\n  } \r\n\r\n  // console.log(finalWinSlots);  \r\n  return finalWinSlots;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////","import React from 'react';\r\n\r\nfunction InfosPage() {\r\n  const connectXInfos = \r\n    <div className=\"infos\">\r\n      <h3>Connect-X</h3>\r\n      <h4>General rules</h4>\r\n      <p>It is a Connect 4 like game, in which you can choose the board dimensions, as well as use special actions!<br/>\r\n      Each turn, in addition of playing a token, the players can choose to use one of three different actions during their turn:</p>\r\n      <ul>\r\n        <li>turn the gravity OFF or ON again</li>\r\n        <li>flip the board to the left</li>\r\n        <li>flip the board to the right</li>\r\n      </ul>\r\n      <h4>Versus mode</h4>\r\n      <p>You can also play online versus an opponent! Just click on the multiplayer button and wait for your opponent to do the same, you'll be notified when the game starts!<br/>\r\n      Note that the board dimensions that the versus will take place on are the one currently used by the first player to request the versus.</p>\r\n    </div>\r\n\r\n  return (\r\n    <div className=\"infosPage\">\r\n      <h2>Welcome to the games!</h2>\r\n      {connectXInfos}\r\n      <h3>Other games to come soon...</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfosPage;","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport { Nav } from './features/nav/Nav';\r\n// import { Counter } from './features/counter/Counter';\r\n// import { TicTacToe } from './features/tictactoe/TicTacToe';\r\n// import { Tbd } from './features/bejeweled/Tbd';\r\nimport { ConnectX } from './features/connectX/ConnectX';\r\nimport InfosPage from './pages/InfosPage';\r\n\r\nimport { loadSessionItems } from './localStorage';\r\nimport history from './history';\r\n// CSS\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: {\r\n        // 'Counter': Counter,\r\n        // 'TicTacToe': TicTacToe,\r\n        // 'Tbd': Tbd\r\n        'Connect-X': ConnectX,\r\n        'i': InfosPage,\r\n      },\r\n      itemSelected: 'i',\r\n      playerInfos: null,    \r\n    };\r\n    this.handleClick = this.handleClick.bind(this);    \r\n  }\r\n\r\n  componentDidMount() {\r\n    let playerInfos = this.state.playerInfos; \r\n    console.log(\"componentDidMount\",playerInfos);\r\n    if (!playerInfos) {\r\n      playerInfos = loadSessionItems('playerInfos');\r\n      console.log(\"pseudo after loadState\", playerInfos);\r\n      if (!playerInfos) playerInfos = null;\r\n      this.setState({ playerInfos: playerInfos});\r\n      if (!playerInfos) {\r\n        history.push(`/redux-project/login`);\r\n      }\r\n    }\r\n\r\n    const vh = window.innerHeight * 0.01;\r\n    document.documentElement.style.setProperty('--vh', `${vh}px`);    \r\n  }\r\n\r\n  handleClick(i) {\r\n    this.setState({ itemSelected: i.target.name});\r\n  }\r\n\r\n  render() {\r\n    const playerInfos = this.state.playerInfos; \r\n    console.log(\"render\",playerInfos);\r\n    const itemSelected = this.state.itemSelected ? React.createElement(this.state.items[this.state.itemSelected], {playerInfos: playerInfos}) : null;    \r\n    return (\r\n      <div className=\"App\">\r\n        <Nav items={this.state.items} itemSelected={this.state.itemSelected} handleClick={this.handleClick} pseudo={playerInfos ? playerInfos.pseudo : ''}/>\r\n        <div className=\"main\">{itemSelected}</div>\r\n{/*        <footer>\r\n          <span>\r\n            <span>Learn </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux-toolkit.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux Toolkit\r\n            </a>\r\n            ,<span> and </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://react-redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React Redux\r\n            </a>\r\n          </span>        \r\n        </footer>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n\treturn (\r\n\t\t<h2 className=\"notFound\">Nothing to see here</h2>\r\n\t)\r\n}\r\n\r\nexport default NotFound;","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n    reset: (state) => {\r\n      state.value = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\nexport const { increment, decrement, incrementByAmount, reset } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import { fetchCount } from './tictactoeAPI';\r\n\r\nconst initialState = {\r\n  // Shared states\r\n  history: [{\r\n    squares: Array(9).fill(null),\r\n  }],\r\n  winSquares: [], \r\n\r\n  // Game only states\r\n  xIsNext: true,\r\n  stepNumber: 0,\r\n  sortIsAsc: true,\r\n};\r\n\r\nexport const tictactoeSlice = createSlice({\r\n  name: 'tictactoe',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    handleClick: (state, action) => {\r\n      const history = state.history.slice(0, state.stepNumber + 1);\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const current = history[history.length - 1];    \r\n      const squares = current.squares.slice();\r\n\r\n      if (state.winSquares.length || squares[action.payload] ) {\r\n        return; // Can't play a square if there's a winner or if it has already been played\r\n      }\r\n      // We alternate players, add the current board to the history, and assign the stepNumber based on the new history\r\n      squares[action.payload] = state.xIsNext ? 'X' : 'O';\r\n\r\n      state.history = history.concat([{squares: squares}]);\r\n      state.stepNumber = history.length;      \r\n      state.xIsNext = !state.xIsNext      \r\n    },\r\n\r\n    jumpTo: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.xIsNext = (action.payload % 2) === 0;\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n    },\r\n\r\n    reset: (state) => {\r\n      state.history = [{squares: Array(9).fill(null)}];\r\n      state.stepNumber = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: (builder) => {\r\n  //   builder\r\n  //     .addCase(incrementAsync.pending, (state) => {\r\n  //       state.status = 'loading';\r\n  //     })\r\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\r\n  //       state.status = 'idle';\r\n  //       state.value += action.payload;\r\n  //     });\r\n  // },\r\n});\r\n\r\nexport const { handleClick, jumpTo, toggleSort, reset } = tictactoeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.tictactoe.value)`\r\nexport const selectHistory = (state) => state.tictactoe.history;\r\nexport const selectStepNumber = (state) => state.tictactoe.stepNumber;\r\nexport const selectXIsNext = (state) => state.tictactoe.xIsNext;\r\nexport const selectSortIsAsc = (state) => state.tictactoe.sortIsAsc;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default tictactoeSlice.reducer;\r\n","import {\r\n\tconfigureStore,\r\n\tcombineReducers,\r\n\tgetDefaultMiddleware\r\n} from '@reduxjs/toolkit';\r\n\r\nimport navReducer from '../features/nav/navSlice';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport tictactoeReducer from '../features/tictactoe/tictactoeSlice';\r\nimport connectXReducer from '../features/connectX/connectXSlice';\r\n\r\nconst combinedReducer = combineReducers({\r\n  nav: navReducer,\r\n  counter: counterReducer,\r\n  tictactoe: tictactoeReducer,\r\n  connectX: connectXReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n// Reducers are supposed to return the initial state when they are called\r\n// with undefined as the first argument, no matter the action\r\n  if (action.type === 'nav/reset') {\r\n    state = undefined;\r\n  }\r\n  return combinedReducer(state, action);\r\n};\r\n\r\nconst customizedMiddleware = getDefaultMiddleware({\r\n  serializableCheck: false\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [...customizedMiddleware]\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// Rooter\r\nimport {Router, Route, Switch} from 'react-router-dom';\r\nimport history from './history';\r\n\r\n//Components\r\nimport Connexion from './pages/Connexion'\r\nimport App from './App';\r\nimport NotFound from './pages/NotFound'\r\n\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nconst baseURL = \"/redux-project\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n\t\t\t<Router history={history}>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path={`${baseURL}/login`} component={Connexion} />\r\n\t\t\t\t\t<Route path={`${baseURL}`} component={App} /> \r\n\t\t\t\t\t<Route path={`${baseURL}/`} component={NotFound}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"ConnectX_game__1x_fZ\",\"main\":\"ConnectX_main__6vhcL\",\"statusHandler\":\"ConnectX_statusHandler__3YJ_C\",\"previousStatus\":\"ConnectX_previousStatus__2I2T6\",\"canEndTurn\":\"ConnectX_canEndTurn__AbWWA\",\"endTurn\":\"ConnectX_endTurn__13PRx\",\"redPlayerTurn\":\"ConnectX_redPlayerTurn__2yS_K\",\"bluePlayerTurn\":\"ConnectX_bluePlayerTurn__3Aih7\",\"board\":\"ConnectX_board__3OnTo\",\"main_board\":\"ConnectX_main_board__1BL24\",\"title\":\"ConnectX_title__2bStg\",\"board_row\":\"ConnectX_board_row__CsIJA\",\"slot\":\"ConnectX_slot__25hJA\",\"disabledBoard\":\"ConnectX_disabledBoard__2gQ8q\",\"slotFilled\":\"ConnectX_slotFilled__3GXCE\",\"slotFilledX\":\"ConnectX_slotFilledX___bTyR\",\"slotFilledO\":\"ConnectX_slotFilledO__MNApa\",\"game_info\":\"ConnectX_game_info__2JF9V\",\"controls\":\"ConnectX_controls__ekhdW\",\"status\":\"ConnectX_status__2MWFR\",\"moves\":\"ConnectX_moves__1ki_t\",\"moves_board\":\"ConnectX_moves_board__22KjK\",\"highlighted\":\"ConnectX_highlighted__B2e4K\",\"selected\":\"ConnectX_selected__1Puyt\",\"kbd-navigation\":\"ConnectX_kbd-navigation__35g11\",\"scrollableX\":\"ConnectX_scrollableX__3qCQG\",\"flipR\":\"ConnectX_flipR__2HwCv\",\"hidden\":\"ConnectX_hidden__q8zIi\",\"win\":\"ConnectX_win__X-N9o\",\"scaleAnim\":\"ConnectX_scaleAnim__3zEhe\",\"floating\":\"ConnectX_floating__D0otu\",\"Slot-floating\":\"ConnectX_Slot-floating__2-Yy4\",\"transition\":\"ConnectX_transition__38xtB\",\"fadeInOnHover\":\"ConnectX_fadeInOnHover__2GqTp\",\"hasTransition\":\"ConnectX_hasTransition__1g-sA\",\"flip\":\"ConnectX_flip__2PQK3\",\"fadeout\":\"ConnectX_fadeout__2xFop\",\"fall\":\"ConnectX_fall__13rRa\"};"],"sourceRoot":""}