{"version":3,"sources":["features/tictactoe/Tictactoe.module.css","features/counter/Counter.module.css","features/bejeweled/Counter.module.css","features/nav/Nav.module.css","history.js","components/Connexion.js","logo.svg","features/nav/navSlice.js","features/general/helpers/Components.js","features/nav/Nav.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/counter/Counter.js","features/tictactoe/tictactoeSlice.js","features/tictactoe/components/Square.js","features/tictactoe/components/Board.js","features/tictactoe/TicTacToe.js","features/connectX/connectXAPI.js","features/connectX/connectXSlice.js","features/connectX/components/Slot.js","base.js","features/connectX/ConnectXTransitions.js","features/connectX/components/Board.js","features/connectX/components/Form.js","features/connectX/ConnectX.js","features/general/helpers/Functions.js","features/bejeweled/counterAPI.js","features/bejeweled/counterSlice.js","features/bejeweled/Tbd.js","App.js","components/NotFound.js","app/store.js","index.js","localStorage.js","features/connectX/ConnectX.module.css"],"names":["module","exports","createBrowserHistory","Connexion","goToChat","event","preventDefault","console","log","pseudo","pseudoInput","value","history","push","className","onSubmit","i","type","placeholder","required","ref","input","React","Component","navSlice","createSlice","name","initialState","reducers","reset","state","actions","Switch","props","checked","isOn","onClick","readOnly","Reset","title","Nav","dispatch","useDispatch","navItems","Object","keys","items","map","key","index","handleClick","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","selectCount","counter","Counter","count","useSelector","useState","incrementAmount","setIncrementAmount","incrementValue","Number","styles","row","button","textbox","onChange","e","target","asyncButton","getState","squares","Array","fill","winSquares","xIsNext","stepNumber","sortIsAsc","tictactoeSlice","slice","length","concat","jumpTo","toggleSort","selectHistory","tictactoe","selectStepNumber","selectXIsNext","selectSortIsAsc","Square","squareWinClass","find","win","square","Board","this","board","j","renderSquare","board_row","isGameBoard","isSelected","gameBoardClass","game_board","selectedClass","selected","createBoard","TicTacToe","current","lines","b","c","calculateWinner","moves","step","move","desc","sort","game","game_info","scrollableY","readStepnumber","db","getDatabase","get","then","playersSnapshot","exists","readStepNumber","val","dataSnapshot","catch","error","slots","boardFlip","gameSettings","width","height","scoreTarget","gravIsOn","transitions","twoPlayersMode","players","updateGameAsync","requestGameAsync","snapshot","connectXSlice","writeData","loadData","slotIndex","slotScore","baseRef","set","changeStep","toggleGravity","launchedWithClick","istwoPlayersMode","slotsChanged","l","targetIndex","flipBoardState","flipValue","newSlots","rowCount","setGameSettings","settings","remove","window","alert","assign","propOne","playersRefs","sign","test","syncBase","connectX","selectGameSettings","selectGravityState","selectTransitions","selectPlayers","selectTwoPlayersMode","flipBoard","direction","Slot","transitionClass","speed","fall","Math","round","contentClass","slotContent","slotContentX","slotContentO","winClass","winStyle","slot","style","onTransitionEnd","handleTransitionEnd","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","styleWin","from","document","querySelectorAll","forEach","classList","add","renderSlot","isBoardWon","animationCallback","onClickFunc","undefined","winIndexes","includes","maxScore","filter","el","findIndex","boardParams","isMainBoard","startAngle","flip","main_board","styleBoard","size","slotSize","floor","innerHeight","slotSizeDiff","fontSize","animate","main","Form","prepareInfos","gameInfos","parseInt","sendGameSettings","infosForm","form","pattern","maxLength","ConnectX","currentSlots","inGame","gameSettingsForm","requestGameButton","watchTimer","setInterval","clearInterval","requestGame","boardClickFunc","toggleGravityFunc","flipBoardR","flipBoardL","player","myPlayer","isPlayer","gameInProgress","waitingForGame","onunload","boardWidth","previous","rowLength","winSlots","finalWinSlots","indexes","currentValue","streakL","streakR","streakT","streakB","streakTL","streakBR","streakTR","streakBL","isLatestHistoryMove","streakCount","controls","Tbd","App","itemSelected","bind","setState","createElement","match","params","NotFound","combinedReducer","combineReducers","nav","navReducer","counterReducer","tictactoeReducer","connectXReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","configureStore","reducer","middleware","baseURL","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","subscribe","stringify","setItem","saveState","ReactDOM","render","StrictMode","exact","path","component","getElementById"],"mappings":"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","file":"static/js/main.e221700c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board_row\":\"Tictactoe_board_row__3rgFx\",\"status\":\"Tictactoe_status__1yWkH\",\"square\":\"Tictactoe_square__2FLKp\",\"selected\":\"Tictactoe_selected__2J0dk\",\"win\":\"Tictactoe_win__3iu36\",\"kbd-navigation\":\"Tictactoe_kbd-navigation__1k7WA\",\"game\":\"Tictactoe_game__1L0bM\",\"game_info\":\"Tictactoe_game_info__3MppA\",\"board\":\"Tictactoe_board__EHRYs\",\"game_board\":\"Tictactoe_game_board__10zJy\",\"moves\":\"Tictactoe_moves__1SQaE\",\"scrollableY\":\"Tictactoe_scrollableY__Q9GYP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__25RA2\",\"value\":\"Counter_value__1LyDH\",\"button\":\"Counter_button__1Mrat\",\"textbox\":\"Counter_textbox__3xGUA\",\"asyncButton\":\"Counter_asyncButton__24jSS Counter_button__1Mrat\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__-ob4V\",\"value\":\"Counter_value__1mJ_F\",\"button\":\"Counter_button__2N3Ru\",\"textbox\":\"Counter_textbox__3t7Hj\",\"asyncButton\":\"Counter_asyncButton__3xT0m Counter_button__2N3Ru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board_row\":\"Nav_board_row__3-19E\",\"status\":\"Nav_status__2SMaQ\",\"square\":\"Nav_square__l5M2q\",\"selected\":\"Nav_selected__3hogA\",\"win\":\"Nav_win__1dR1J\",\"kbd-navigation\":\"Nav_kbd-navigation__3izzR\",\"game\":\"Nav_game__8RKFz\",\"game_info\":\"Nav_game_info__31PA2\",\"board\":\"Nav_board__3uLy7\",\"game_board\":\"Nav_game_board__3X1uY\",\"moves\":\"Nav_moves__1bJFZ\",\"scrollableY\":\"Nav_scrollableY__3DVvq\"};","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport history from '../history';\r\nclass Connexion extends React.Component {\r\n\tgoToChat = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this);\r\n\t\tconst pseudo = this.pseudoInput.value;\r\n\t\thistory.push(`/redux-project/pseudo/${pseudo}`);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"connexionBox\" onSubmit={(i) => this.goToChat(i)}>\r\n\t\t\t\t<form className=\"connexion\" >\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Pseudo\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tref={input => {this.pseudoInput = input}}/>\r\n\t\t\t\t\t<button type=\"submit\">GO</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Connexion;","export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n// import { fetchCount } from './navAPI';\r\n\r\nconst initialState = {\r\n};\r\n\r\nexport const navSlice = createSlice({\r\n  name: 'nav',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    reset: state => {\r\n      // From here we can take action only at this \"counter\" state\r\n      // But, as we have taken care of this particular \"logout\" action\r\n      // in rootReducer, we can use it to CLEAR the complete Redux Store's state\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reset } = navSlice.actions;\r\n\r\n// export const selectSortIsAsc = (state) => state.nav.sortIsAsc;\r\n\r\nexport default navSlice.reducer;\r\n","import React from 'react';\r\n\r\nexport function Switch(props) {\r\n  return (\r\n    <label className=\"switch\">\r\n\t\t  <input\r\n\t\t\t  type=\"checkbox\"\r\n\t\t\t  checked={props.isOn}\r\n\t\t\t  onClick={props.onClick}\r\n\t\t\t  readOnly\r\n\t\t  />\r\n\t\t  <span className=\"slider\"></span>\r\n\t\t</label>\r\n\t);\r\n}\r\n\r\nexport function Reset(props) {\r\n  return (\r\n    <button className=\"reset\" onClick={props.onClick}>\r\n    \t{props.title}\t\t\t  \r\n\t</button>\r\n\t);\r\n}\r\n\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { reset } from './navSlice';\r\nimport { Reset } from '../general/helpers/Components';\r\nimport styles from './Nav.module.css';\r\n\r\nexport function Nav(props) {\r\n  const dispatch = useDispatch();\r\n  const navItems = Object.keys(props.items)\r\n        .map((key,index) =>\r\n          <button name={key} key={index} onClick={(i) => props.handleClick(i)}>{key}</button>\r\n        );\r\n  return (\r\n    <header className=\"App-header\">\r\n      <div className=\"nav-items\">\r\n        {navItems}\r\n      </div>\r\n      <Reset title=\"Reset all\" onClick={() => dispatch(reset())}/>        \r\n    </header>\r\n  );\r\n}\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n    reset: (state) => {\r\n      state.value = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\nexport const { increment, decrement, incrementByAmount, reset } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  incrementIfOdd,\r\n  reset,\r\n  selectCount,\r\n} from './counterSlice';\r\nimport { Reset } from '../general/helpers/Components';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  const incrementValue = Number(incrementAmount) || 0;\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={(e) => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(incrementValue))}\r\n        >\r\n          Add Async\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\r\n        >\r\n          Add If Odd\r\n        </button>\r\n        <Reset title=\"Reset\" onClick={() => dispatch(reset())}/>        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n// import { fetchCount } from './tictactoeAPI';\r\n\r\nconst initialState = {\r\n  // Shared states\r\n  history: [{\r\n    squares: Array(9).fill(null),\r\n  }],\r\n  winSquares: [], \r\n\r\n  // Game only states\r\n  xIsNext: true,\r\n  stepNumber: 0,\r\n  sortIsAsc: true,\r\n};\r\n\r\nexport const tictactoeSlice = createSlice({\r\n  name: 'tictactoe',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    handleClick: (state, action) => {\r\n      const history = state.history.slice(0, state.stepNumber + 1);\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const current = history[history.length - 1];    \r\n      const squares = current.squares.slice();\r\n\r\n      if (state.winSquares.length || squares[action.payload] ) {\r\n        return; // Can't play a square if there's a winner or if it has already been played\r\n      }\r\n      // We alternate players, add the current board to the history, and assign the stepNumber based on the new history\r\n      squares[action.payload] = state.xIsNext ? 'X' : 'O';\r\n\r\n      state.history = history.concat([{squares: squares}]);\r\n      state.stepNumber = history.length;      \r\n      state.xIsNext = !state.xIsNext      \r\n    },\r\n\r\n    jumpTo: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.xIsNext = (action.payload % 2) === 0;\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n    },\r\n\r\n    reset: (state) => {\r\n      state.history = [{squares: Array(9).fill(null)}];\r\n      state.stepNumber = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: (builder) => {\r\n  //   builder\r\n  //     .addCase(incrementAsync.pending, (state) => {\r\n  //       state.status = 'loading';\r\n  //     })\r\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\r\n  //       state.status = 'idle';\r\n  //       state.value += action.payload;\r\n  //     });\r\n  // },\r\n});\r\n\r\nexport const { handleClick, jumpTo, toggleSort, reset } = tictactoeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.tictactoe.value)`\r\nexport const selectHistory = (state) => state.tictactoe.history;\r\nexport const selectStepNumber = (state) => state.tictactoe.stepNumber;\r\nexport const selectXIsNext = (state) => state.tictactoe.xIsNext;\r\nexport const selectSortIsAsc = (state) => state.tictactoe.sortIsAsc;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default tictactoeSlice.reducer;\r\n","import React from 'react';\r\nimport styles from '../Tictactoe.module.css';\r\n\r\nfunction Square(props) {\r\n\tlet squareWinClass = \"\";\r\n\tif(props.winSquares) {\r\n\tsquareWinClass = (props.winSquares).find(e => e === props.index) + 1 ? \" \" + styles.win : \"\";\r\n\t\t// +1 is here to avoid a failed test when the square indexed \"0\" is part of the winning squares\r\n\t}\r\n  return (\r\n    <button\r\n    \tclassName={styles.square + squareWinClass}\r\n    \tonClick={props.onClick} //this is not html onClick\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\nimport styles from '../Tictactoe.module.css';\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n    \t<Square\r\n    \t\tkey={i}   // We can't access \"key\" as a prop in child\r\n    \t\tindex={i} // component so we pass it here instead\r\n    \t\tvalue={this.props.squares[i]}\r\n    \t\tonClick={() => this.props.onClick(i)}\r\n    \t\twinSquares={this.props.winSquares}\r\n    \t/> \r\n    );\r\n  }\r\n\r\n  createBoard() {\r\n    let board = []\r\n    let index = -1;\r\n    // Outer loop to create parent\r\n    for (let i = 0; i < 3; i++) {\r\n      let squares = [];\r\n      //Inner loop to create children\r\n      for (let j = 0; j < 3; j++) {\r\n        index++;\r\n        squares.push(this.renderSquare(index));\r\n      }\r\n      //Create the parent and add the children\r\n      board.push(<div key={i} className={styles.board_row}>{squares}</div>)\r\n    }\r\n    return board\r\n  }\r\n\r\n  render() {\r\n    const isGameBoard = typeof this.props.isSelected === \"undefined\" ? true : false;\r\n\r\n    const gameBoardClass = isGameBoard ? \" \" + styles.game_board : \"\";\r\n    const selectedClass = this.props.isSelected ? \" \" + styles.selected : \"\";\r\n    const title = isGameBoard ? \"\" : this.props.title;\r\n    return (\r\n      <div>\r\n        <div className={styles.board + gameBoardClass + selectedClass} >\r\n          {this.createBoard()}\r\n        </div>\r\n        <p>{title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  handleClick,\r\n  jumpTo,\r\n  toggleSort,\r\n  reset,\r\n\r\n  selectHistory,\r\n  selectStepNumber,\r\n  selectSortIsAsc,\r\n  selectXIsNext\r\n} from './tictactoeSlice';\r\nimport Board from './components/Board';\r\nimport {Switch, Reset} from '../general/helpers/Components';\r\nimport styles from './Tictactoe.module.css';\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return lines[i];\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\nexport function TicTacToe() {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const history = useSelector(selectHistory);\r\n  const stepNumber = useSelector(selectStepNumber);\r\n  // const history = useSelector((state: RootState) => state.tictactoe.history);\r\n  // const stepNumber = useSelector((state: RootState) => state.tictactoe.stepNumber);\r\n\r\n  const current = history[stepNumber];\r\n  const winSquares = calculateWinner(current.squares);\r\n\r\n  // We create the move list to be displayed from the history\r\n  var moves = history.map((step, move) => {\r\n    const desc = move ?\r\n      'Move #' + move :\r\n      'Game start';\r\n    const isSelected = stepNumber === move ? true : false;\r\n    return (\r\n      <li key={move}>\r\n        <Board\r\n          isSelected={isSelected}\r\n          squares={history[move].squares}\r\n          onClick={() => dispatch(jumpTo(move))}\r\n          title={desc}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n\r\n  const sortIsAsc = useSelector(selectSortIsAsc);\r\n  // We sort the resulting array in descending order if the toggle is on\r\n  moves = sortIsAsc ? moves : moves.sort((a, b) => b.key - a.key);\r\n\r\n  // Choose which game status has to be displayed\r\n  const xIsNext = useSelector(selectXIsNext);\r\n  let status;\r\n  if (winSquares.length) {\r\n    status = 'Winner: ' + (xIsNext ? 'O' : 'X')\r\n  } else if (stepNumber === 9 && !winSquares.length) {\r\n    status = 'Draw!'\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O')\r\n  }\r\n\r\n  return (\r\n    <div className={styles.game}>\r\n      <Board \r\n        squares={current.squares}\r\n        winSquares={winSquares}\r\n        onClick={(i) => dispatch(handleClick(i))}\r\n      />\r\n      <div className={styles.game_info}>\r\n        <div>{status}</div>\r\n        <Switch onClick={() => dispatch(toggleSort())}/>\r\n        <Reset title=\"Reset\" onClick={() => dispatch(reset())}/>\r\n        <div className={styles.scrollableY}>\r\n          <ol className={styles.moves}>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { getDatabase, ref, get} from \"firebase/database\";\r\n\r\nexport function readStepnumber(stepNumber) {\r\n\tconst db = getDatabase();\r\n\r\n  return new Promise((resolve) => {\r\n\r\n    get(ref(db, `/players`)).then((playersSnapshot) => {\r\n\t\t\tif (playersSnapshot.exists()) {\r\n\t\t\t\tget(ref(db, `/stepNumber`)).then((readStepNumber) => {\r\n\t\t\t\t\tif (readStepNumber.exists()) {\r\n\t\t        if(readStepNumber.val() !== stepNumber) {\r\n\t\t\t\t\t    get(ref(db, `/`)).then((dataSnapshot) => {\r\n\t\t\t\t\t\t\t\tif (dataSnapshot.exists()) {\r\n\t\t\t        \t\tresolve(dataSnapshot.val());\r\n\t\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t    }).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t    }\r\n\t\t\t\t  } else {\r\n\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t  }\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t  console.error(error);\r\n\t\t\t\t});\r\n\r\n\t\t  } else {\r\n\t\t\t  resolve(null);\r\n\t\t  }\r\n    }).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n\r\n\r\n    // onValue(ref(getDatabase(), `/stepNumber`), (snapshot) => {\r\n    //   var data = snapshot.val();\r\n    //   console.log(\"snapshot\",data);\r\n    //   resolve(data);\r\n    // }/*, {\r\n    //   onlyOnce: true\r\n    // }*/);\r\n  });\r\n}\r\n\r\nexport function readPlayers() {\r\n  return new Promise((resolve) => {  \t\r\n\t\tget(ref(getDatabase(), `/players`)).then((snapshot) => {\r\n\t\t\tif (snapshot.exists()) {\r\n\t\t    var data = snapshot.val();\r\n\t\t    // console.log(\"snapshot\",data);\r\n\t\t    resolve(data);\r\n\t\t  } else {\r\n\t\t    console.log(\"No data available\");\r\n\t\t  }\r\n\t\t}).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n    // onValue(ref(getDatabase(), `/stepNumber`), (snapshot) => {\r\n    //   var data = snapshot.val();\r\n    //   console.log(\"snapshot\",data);\r\n    //   resolve(data);\r\n    // }/*, {\r\n    //   onlyOnce: true\r\n    // }*/);\r\n  });\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getDatabase, ref, set, push, get, remove, onValue} from \"firebase/database\";\r\n// import base from '../../base';\r\n\r\nimport { readStepnumber,  readPlayers} from './connectXAPI';\r\n\r\nconst initialState = {\r\n  history: [{\r\n    slots: Array(42).fill('null'),\r\n    boardFlip: 0,\r\n  }],\r\n  stepNumber: 0,\r\n  gameSettings: {\r\n    width: 7,\r\n    height: 6,\r\n    scoreTarget: 4 \r\n  },\r\n  sortIsAsc: true,\r\n  gravIsOn: false,\r\n  transitions: {slots:0, board:0},\r\n  twoPlayersMode: false,\r\n  players: [],\r\n};\r\n\r\nexport const updateGameAsync = createAsyncThunk(\r\n  'connectX/readStepnumber',\r\n  async (stepNumber) => {\r\n    const response = await readStepnumber(stepNumber);\r\n    console.log(\"response\",response);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const requestGameAsync = createAsyncThunk(\r\n  'connectX/readPlayers',\r\n  async () => {\r\n    const response = await readPlayers();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\n// export const loadGameAsync = createAsyncThunk(\r\n//   'connectX/readPlayers',\r\n//   async () => {\r\n//     const response = await readPlayers();\r\n//     // The value we return becomes the `fulfilled` action payload\r\n//     return response;\r\n//   }\r\n// );\r\n\r\nexport const connectXSlice = createSlice({\r\n  name: 'connectX',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    // Write syncState by hand with\r\n    // Check for differences bewtween the state and the db, if there are, update the state with the db values\r\n    // One function for initializing all the states, and one other, that watches history value for the two players mode\r\n    writeData: (state, action) => {\r\n      // const base = action.payload;\r\n      // console.log(\"set history\",state.history);\r\n      // const rootRef = ref(getDatabase(), '/');\r\n      // let dbHistory;\r\n      // get(rootRef).then((snapshot) => {\r\n      //   if (snapshot.exists()) {\r\n      //     dbHistory = snapshot.val();\r\n      //   } else {\r\n      //     console.log(\"No data available\");\r\n      //   }\r\n      // }).catch((error) => {\r\n      //   console.error(error);\r\n      // });\r\n\r\n      // set(rootRef, {\r\n      //   history: state.history\r\n      // });\r\n\r\n      // base.syncState('/', {\r\n      //   context: this,\r\n      //   state: 'history'\r\n      // });      \r\n    },\r\n    loadData: (state) => {\r\n      // const base = action.payload;\r\n      console.log(\"loadData\");\r\n      // Check for differences between our local states and the database, update our states if there is\r\n      // ===> all actions that modifies the game state for both players set a particular state (will serve as an indicator)\r\n      // to false for the player initiating the changes, but true for the database\r\n      // We will only watch this indicator state with onValue to call for an update of the state on the other\r\n      // player computer\r\n    // ======> the indicator state will be stepNumber, its a perfect reference for the watch value\r\n    // It'll go along with the new next player determination system, which is that every action count \r\n    },\r\n\r\n    handleClick: (state, action) => {\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const stepNumber = state.stepNumber;\r\n      const history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];    \r\n      const slots = current.slots.slice();\r\n      let slotIndex = action.payload;\r\n      // Can't play a slot if it has already been played\r\n      if (slots[slotIndex] !== 'null') return;\r\n\r\n      if(state.gravIsOn) {\r\n        if (current.boardFlip % 2 === 0) {\r\n          var width = state.gameSettings.width,\r\n              height = state.gameSettings.height;\r\n        } else {\r\n          var width = state.gameSettings.height,\r\n              height = state.gameSettings.width;\r\n        }\r\n\r\n        var transitions = Array(width * height).fill(0);\r\n\r\n        let slotScore = 0;\r\n        // We start iterating at the second to last row\r\n        for(let i = height - 1; i > 0; i--) {\r\n          // We then determine the height the slot sits at by testing its index,\r\n          // we make it a score that represents the distance that this slot can be potentially pushed down\r\n          if(slotIndex >= (i - 1) * width && slotIndex <= i * width - 1) {\r\n            slotScore = height - i;\r\n            break;\r\n          }\r\n        }        \r\n\r\n        if(slotScore) {\r\n          // We iterate on the column the slot sits in and try to push it down, decreasing the score each time it fails\r\n          for (let i = slotIndex + slotScore * width; i > slotIndex; i -= width) {\r\n            if(slots[i] === 'null') {\r\n              console.log()\r\n              slotIndex = i;\r\n              break;\r\n            }\r\n            slotScore--;\r\n          }\r\n          // We fill the appropriate slot with the value and the height it will travel during animation\r\n          slots[slotIndex] = (state.stepNumber % 2) === 0 ?  'X' : 'O';\r\n          if (slotScore) {\r\n            transitions[slotIndex] = slotScore;\r\n          } else {\r\n            transitions = null;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Or we simply put in the value if it hasn't already\r\n      if(slots[slotIndex] === 'null') slots[slotIndex] = (state.stepNumber % 2) === 0 ?  'X' : 'O';\r\n\r\n      // We add the current board to the history, and assign the stepNumber based on the new history\r\n      state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n      state.stepNumber = history.length;\r\n      state.transitions = transitions && transitions.find(e => e !== 0) !== -1 ? {slots: transitions, board: 0} : {slots:0, board:0};;\r\n      if (state.twoPlayersMode) {\r\n        console.log(\"set db handleClick\");\r\n        const db = getDatabase();\r\n        let baseRef = ref(db, '/history/');\r\n        set(baseRef, state.history);      \r\n        baseRef = ref(db, '/stepNumber/');\r\n        set(baseRef, state.stepNumber);\r\n        baseRef = ref(db, '/transitions/');\r\n        set(baseRef, state.transitions);\r\n      } \r\n    },\r\n\r\n    changeStep: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    toggleGravity: (state, action) => {\r\n      const launchedWithClick = action.payload;\r\n      const istwoPlayersMode = state.twoPlayersMode;\r\n      const db = getDatabase();      \r\n      let baseRef = ref(db, '/gravIsOn/');\r\n      if (launchedWithClick) {\r\n        state.gravIsOn = state.gravIsOn ? false : true;\r\n        set(baseRef, state.gravIsOn);              \r\n      }\r\n      ///// USE TRANSFORM(,) FOR GRAVITY ////////\r\n      if (state.gravIsOn) {\r\n        // We get the slots of the currently displayed move\r\n        const stepNumber = state.stepNumber;\r\n        let history = state.history.slice(0, stepNumber + 1);\r\n        const current = history[stepNumber];\r\n        const slots = current.slots.slice();  \r\n\r\n        let slotsChanged = false;\r\n\r\n        let width = state.gameSettings.width;\r\n        const height = state.gameSettings.height;\r\n        let transitions = Array(width * height).fill(0);\r\n\r\n        if (current.boardFlip % 2 !== 0) width = height;\r\n\r\n        let count = 1;\r\n        // We iterate through every rows, counting it (count), starting from the second to last one and going up\r\n        for (let i = slots.length - width - 1; i >= 0; i -= width) {\r\n          // We then iterate through each row, to get to each and every slot\r\n          for (let j = 0; j < width; j++) {\r\n            // We store (count) as a relative height we're at from the first row we go through,\r\n            // giving us a score (l) of how many slots we'll try to \"push down\" the value of the slot.\r\n            // If it fails, we loop and try to push it one slot shorter\r\n            for (let l = count; l > 0; l--) {\r\n              let index = i - j;\r\n              let targetIndex = index + width * l;\r\n              if(slots[index] && slots[targetIndex] === 'null') {\r\n                // If the slot is filled and the destination is free, we switch the values\r\n                // (l) provides the height indication for the animation\r\n                slots[targetIndex] = slots[index];\r\n                slots[index] = 'null';\r\n\r\n                slotsChanged = true;\r\n                transitions[targetIndex] = l;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          count++;\r\n        }\r\n        // We only update the board if gravity brought change\r\n        if(slotsChanged) {\r\n          history = history.slice(0, stepNumber);\r\n          state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n          state.stepNumber = history.length;\r\n          // If the gravity was turned on with a click, we clear the board transition\r\n          state.transitions = {slots: transitions, board: launchedWithClick ? 0 : state.transitions.board};\r\n\r\n          if (state.twoPlayersMode) {\r\n            console.log(\"set db toggleGravity\");\r\n            baseRef = ref(db, '/history/');\r\n            set(baseRef, state.history);\r\n            baseRef = ref(db, '/stepNumber/');\r\n            set(baseRef, state.stepNumber);\r\n            baseRef = ref(db, '/transitions/');\r\n            set(baseRef, state.transitions);\r\n          } \r\n        }\r\n      } else {\r\n        if (istwoPlayersMode) set(ref(getDatabase(), '/transitions/'), {slots:0, board:0});\r\n        state.transitions = {slots:0, board:0};\r\n      }\r\n    },\r\n\r\n    flipBoardState: (state, action) => {\r\n      // Modify the way the values are placed inside the slots and replace the current history move with it\r\n\r\n      // We get the slots of the currently displayed move\r\n      const stepNumber = state.stepNumber;      \r\n      let history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];\r\n      const slots = current.slots.slice();\r\n\r\n      // We deduce the future flip state of the board with the payload (1 ou -1)\r\n      const flipValue = action.payload;\r\n      let boardFlip = current.boardFlip + flipValue;\r\n      if (boardFlip === -1) boardFlip = 3;\r\n      if (boardFlip === 4) boardFlip = 0;\r\n\r\n      // Adjust the board params to that flip state to iterate through properly through the future board\r\n      if (boardFlip % 2 === 0) {\r\n        var width = state.gameSettings.height,\r\n            height = state.gameSettings.width;\r\n      } else {\r\n        var width = state.gameSettings.width,\r\n            height = state.gameSettings.height;\r\n      }\r\n\r\n      let newSlots = slots.slice();\r\n      let rowCount = height;\r\n      // We iterate through every rows, counting it (count)\r\n      for (let i = slots.length - 1; i >= 0; i -= width) {\r\n        // We then iterate through each row, to get to each and every slot\r\n        for (let j = 0; j < width; j++) {\r\n          const index = i - j;\r\n          // Here are the two formulaes corresponding to flipping the board clockwise and counter clockwise\r\n          // They take the initial index of the slot as well as the number of the row it sits in (first row = 1) as parameters\r\n          const newIndex = flipValue === 1 ? height * (index + 1 - (rowCount - 1) * width) - rowCount : height * (rowCount * width - 1 - index) + rowCount - 1;\r\n          newSlots[newIndex] = slots[index];\r\n        }\r\n        rowCount--;\r\n      }\r\n      history = history.slice(0, stepNumber);\r\n      state.history = history.concat([{slots: newSlots, boardFlip: boardFlip}]);\r\n      state.stepNumber = history.length;\r\n      state.transitions = {slots: 0, board: flipValue * -90};\r\n\r\n      if (!state.gravIsOn && state.twoPlayersMode) {\r\n        console.log(\"set db flipBoard\");\r\n        const db = getDatabase();\r\n        let baseRef = ref(db, '/history/');\r\n        set(baseRef, state.history);      \r\n        baseRef = ref(db, '/stepNumber/');\r\n        set(baseRef, state.stepNumber);\r\n        baseRef = ref(db, '/transitions/');\r\n        set(baseRef, state.transitions);\r\n      } \r\n    },\r\n\r\n    setGameSettings: (state, action) => {\r\n      const settings = action.payload;\r\n      state.gameSettings = settings;\r\n      state.history = [{\r\n        slots: Array(settings.width * settings.height).fill('null'),\r\n        boardFlip: 0\r\n      }];\r\n    },\r\n\r\n    reset: (state, action) => {\r\n      const isDbReset = action.payload;\r\n      if (isDbReset) {\r\n        remove(ref(getDatabase(), '/players/'));\r\n      } else {\r\n        state.history = state.history.slice(0,1);\r\n        state.stepNumber = 0;\r\n        state.transitions = {slots:0, board:0};\r\n        state.gravIsOn = false;\r\n        state.sortIsAsc = true;\r\n      }\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(updateGameAsync.pending, (state) => {\r\n        // state.status = 'loading';\r\n        console.log(\"updateGameAsync pending\");\r\n      })\r\n      .addCase(updateGameAsync.fulfilled, (state, action) => {\r\n        // state.status = 'idle';\r\n        console.log(\"updateGameAsync\");\r\n        const data = action.payload;\r\n        // if (state.twoPlayersMode && !data.players) {\r\n        if (data === null) {\r\n          window.alert('Your opponent left! Reload the page to exit the current game');\r\n          state.twoPlayersMode = false;\r\n          return;\r\n        }\r\n\r\n        state.history = data.history;\r\n        state.stepNumber = data.stepNumber;\r\n        const transitions = data.transitions;\r\n        state.transitions = {slots:transitions.slots, board:transitions.board};\r\n        state.gravIsOn = data.gravIsOn;\r\n      })\r\n      .addCase(requestGameAsync.pending, (state) => {\r\n        console.log(\"requestGameAsync pending\");\r\n        return Object.assign({}, state, {\r\n          propOne: true,\r\n        })\r\n      })      \r\n      .addCase(requestGameAsync.fulfilled, (state, action) => {\r\n        console.log(\"requestGameAsync\");\r\n        // state.status = 'idle';\r\n        const players = action.payload;\r\n        const playersRefs = Object.keys(players);\r\n        // response = Array.from(response);\r\n        // console.log(\"response\",response);\r\n        // console.log(\"response\",response);        \r\n        // console.log(\"fulfilled\", Object.keys(action.payload));\r\n        // console.log(\"fulfilled\", Object.keys(players));\r\n        // console.log(\"fulfilled\", [...action.payload]);\r\n        if(playersRefs.length === 1) {\r\n          state.players = [{pseudo: players[playersRefs[0]].pseudo, sign: 'O'}];\r\n          state.transitions = {slots:0, board:0};        \r\n        } else if (playersRefs.length >= 2) {\r\n          const test = players[playersRefs[0]];\r\n          console.log(test);\r\n          state.players = [{pseudo: players[playersRefs[0]].pseudo, sign: 'O'},{pseudo: players[playersRefs[1]].pseudo, sign: 'X'}];\r\n          state.twoPlayersMode = true;\r\n\r\n          const history = state.history.slice(0,1);\r\n          state.history = history;\r\n          state.stepNumber = 0;\r\n          const transitions = {slots:0, board:0};\r\n          state.transitions = transitions;\r\n          state.gravIsOn = true;\r\n\r\n          console.log(\"set db requestGame\");\r\n          const db = getDatabase();\r\n          let baseRef = ref(db, '/history/');\r\n          set(baseRef, history);      \r\n          baseRef = ref(db, '/stepNumber/');\r\n          set(baseRef, 0);\r\n          baseRef = ref(db, '/transitions/');\r\n          set(baseRef, transitions);\r\n          baseRef = ref(db, '/gravIsOn/');\r\n          set(baseRef, true);                   \r\n        }\r\n      });\r\n  }  \r\n});\r\n\r\nexport const { handleClick, changeStep, toggleSort, toggleGravity, flipBoardState, setGameSettings, syncBase, loadData, writeData, reset} = connectXSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.connectX.value)`\r\nexport const selectHistory = (state) => state.connectX.history;\r\nexport const selectGameSettings = (state) => state.connectX.gameSettings;\r\nexport const selectStepNumber = (state) => state.connectX.stepNumber;\r\nexport const selectSortIsAsc = (state) => state.connectX.sortIsAsc;\r\nexport const selectGravityState = (state) => state.connectX.gravIsOn;\r\nexport const selectTransitions = (state) => state.connectX.transitions;\r\nexport const selectPlayers = (state) => state.connectX.players;\r\nexport const selectTwoPlayersMode = (state) => state.connectX.twoPlayersMode;\r\n\r\nexport const jumpTo = (stepNumber) => (dispatch, getState) => {\r\n  dispatch(changeStep(stepNumber));\r\n  // When browsing the steps via the history, we want the game to get up to date if gravity is enabled,\r\n  // thus replacing the move we went to\r\n  if(selectGravityState(getState())) {\r\n    dispatch(toggleGravity(false));\r\n  }\r\n};\r\n\r\nexport const flipBoard = (direction) => (dispatch, getState) => {\r\n  dispatch(flipBoardState(direction));\r\n  // const db = getDatabase();\r\n  // const historyRef = ref(db, '/history');\r\n  // historyRef.off();\r\n  // When browsing the steps via the history, we want the game to get up to date if gravity is enabled,\r\n  // thus replacing the move we went to\r\n  if(selectGravityState(getState())) {\r\n    dispatch(toggleGravity(false));\r\n  }\r\n};\r\n\r\nexport const sendGameSettings = (settings) => (dispatch) => {\r\n  dispatch(reset());\r\n  dispatch(setGameSettings(settings));\r\n};\r\n\r\nexport const requestGame = (pseudo) => (dispatch, getState) => {\r\n\r\n  // Prevent double click from same player\r\n  // ==> find a way to \"deactivate\" data changing game actions during the whole two player process\r\n  // when it's not your turn\r\n  // ===> conditionnally call any reducer using selectPlayers\r\n  // ==> always write the player, even solo, in the db, add logic to make sure the same player isnt added twice,\r\n  // or that more than 2 players are added\r\n  // console.log(\"requestGame\",pseudo)\r\n  set(push(ref(getDatabase(), 'players')), {\r\n    pseudo\r\n  })\r\n  dispatch(requestGameAsync());\r\n  const watchTimer = setInterval(() => {\r\n    if (selectTwoPlayersMode(getState())) clearInterval(watchTimer);\r\n    dispatch(requestGameAsync());\r\n  }, 4000);\r\n};\r\n\r\nexport const startWatchingStepNumber = () => (dispatch, getState) => {\r\n    const watchTimer = setInterval(() => {\r\n      if (selectTwoPlayersMode(getState())) {\r\n        dispatch(updateGameAsync(selectStepNumber(getState())));\r\n      }\r\n    }, 5500);\r\n};  \r\n\r\nexport default connectXSlice.reducer;\r\n","import React from 'react';\r\n// CSS\r\nimport styles from '../ConnectX.module.css';\r\n\r\nfunction Slot(props) {\r\n\r\n\t\t// FALL ANIMATION //\r\n\t\tconst slotScore = props.slotScore;\r\n\t\tlet transitionClass = \"\";\r\n\t\tlet speed = 0\r\n\t\tif (slotScore) {\r\n\t\t\ttransitionClass = `hasTransition ${styles.fall}`;\r\n\t\t\tspeed = Math.round((0.16 + 0.189 * Math.log(slotScore)) * 10) / 10;\r\n\t\t}\r\n\r\n\t\t// DISPLAY SLOT CONTENT //\r\n    const contentClass = props.value !== 'null' ? `${styles.slotContent} ${props.value === 'X' ? styles.slotContentX : styles.slotContentO}` : \"\";\r\n    \r\n    // DISPLAY WIN //\r\n    const winClass = props.winStyle ? \"wonSlot\" : \"\";\r\n    let coeff = -1;\r\n  return (\r\n    <button\r\n    \tclassName={`${styles.slot} ${winClass}`}\r\n    \tonClick={props.onClick}\r\n    >\r\n      <div \tstyle={{'--slotStartPos': `calc(${coeff * slotScore * 125}% + ${slotScore}px)`,'--speed': `${speed}s`}}\r\n\t\t\t\t\t\tclassName={`${contentClass} ${transitionClass}`} onTransitionEnd={props.handleTransitionEnd}>\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Slot;","// import Rebase from 're-base';\r\n\r\nimport firebase from 'firebase/app';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore, collection, getDocs } from 'firebase/firestore/lite';\r\n\r\n// const database = getDatabase();\r\n// import 'firebase/database';\r\n// Add onValue event to the history and gravity to watch for the opponent move\r\n// Maybe add onValue to a new state related to a game happening between players :\r\n// By turning it on, a pop up appears prompting for a player\r\n// If it's on, goToStep and sendGamesettings are unavailable until the game ends\r\n// All controls are diasbled when it's not your turn or if a game is happening\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDVe3axD8Y3GnxcnsnDuDz_FHCKYJcu6gg\",\r\n  authDomain: \"redux-project-98a9a.firebaseapp.com\",\r\n  databaseURL: \"https://redux-project-98a9a-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n  projectId: \"redux-project-98a9a\",\r\n  storageBucket: \"redux-project-98a9a.appspot.com\",\r\n  messagingSenderId: \"67646127878\",\r\n  appId: \"1:67646127878:web:507ecc4c86993503ca2887\",\r\n  measurementId: \"G-34QJSE84ZR\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst base = getFirestore(app);\r\n\r\n// var base = Rebase.createClass(db);\r\n\r\nexport default base;","import React from 'react';\r\n// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\n// WIN DISPLAY //\r\nexport function styleWin() {\r\n  const slots = Array.from(document.querySelectorAll('.wonSlot'));\r\n  console.log(slots);\r\n  slots.forEach(e => {\r\n    e.classList.add(styles.win);\r\n  });    \r\n};\r\n\r\n// LAUNCH TRANSITIONS //\r\nexport function animateBoards() {\r\n  // We get all elements with the transition class\r\n  const animatedElements = Array.from(document.querySelectorAll('.hasTransition'));\r\n  animatedElements.forEach(e => {\r\n    // First we clear out the class on the previously animated elements\r\n    e.classList.remove(styles.animate);\r\n    // We trust the transitions for animations happening after this update\r\n    setTimeout(() => { e.classList.add(styles.animate); }, 0);\r\n  });\r\n};\r\n","import React from 'react';\r\nimport Slot from './Slot';\r\nimport base from '../../../base';\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\n// const database = getDatabase();\r\n// STYLE\r\nimport { animateBoards, styleWin } from '../ConnectXTransitions.js';\r\nimport styles from '../ConnectX.module.css';\r\n\r\nclass Board extends React.Component {\r\n  componentDidMount() {\r\n    if(this.props.isMainBoard) {\r\n    }\r\n  }\r\n\r\n  // ANIMATION & WIN TRIGGER //\r\n  componentDidUpdate() {\r\n    // We use this hook to manipulate the transitions on the dom elements \r\n    const transitions = this.props.transitions;\r\n    if(this.props.isMainBoard) {\r\n\r\n    // console.log('main upadte')\r\n      // If transitions are present, we play them\r\n      if (transitions && (transitions.slots || transitions.board)) {\r\n        animateBoards();\r\n      } else {\r\n        // If there's none, we directly style the winning slots\r\n        if(this.props.winIndexes.length) styleWin();\r\n      }\r\n    }\r\n  }\r\n\r\n  // TRANSITIONS CALLBACK //\r\n  handleTransitionEnd = (event) => {\r\n    // We wait for the end of the transitions to style the winning slots\r\n    styleWin();\r\n  };\r\n\r\n  // PREPARE THE SLOT //\r\n  renderSlot = (i, isBoardWon) => {\r\n    // We deactivate the handleclick action if the board is won\r\n    const onClickFunc = isBoardWon ? undefined : () => this.props.onClick(i);\r\n\r\n    // Determine if the slot is part of a winning streak\r\n    const winIndexes = isBoardWon ? this.props.winIndexes : null;\r\n    const winStyle = winIndexes && winIndexes.includes(i) ? true : false;  \r\n\r\n    // Assign the slot a score based on the animation map: the higher the score, the longer the aniamtion \r\n    const transitions = this.props.transitions ? this.props.transitions.slots : null;\r\n    let slotScore = 0;\r\n    let animationCallback;\r\n    if(transitions && transitions[i] !== 'null') {\r\n      slotScore = transitions[i];\r\n      if(isBoardWon) { // For now we only put the callback to style a win \r\n        // Sort out the null elements, then sort in descending order the slotScores that are left inside\r\n        // and take out the first value, which indicates the maximum animation score for this render\r\n        const maxScore = transitions.filter(el => {return el !== 'null';}).sort((a, b) => b - a)[0];\r\n        // Finds the first index with a maxScore in the map and check if it corresponds to the current index\r\n        const isFirstMaxScoreSlot = i === transitions.findIndex(e => e === maxScore);\r\n        // We make this slot a reference for the longest animation and put the callback onto it\r\n        if(isFirstMaxScoreSlot) animationCallback = (i) => this.handleTransitionEnd(i);\r\n      }\r\n    }\r\n    return (\r\n      <Slot\r\n        key={i}\r\n        value={this.props.slots[i]}\r\n        onClick={onClickFunc}\r\n        slotScore={slotScore}\r\n        winStyle={winStyle}\r\n        handleTransitionEnd={animationCallback}\r\n      /> \r\n    );\r\n  }\r\n\r\n  // STRUCTURE THE SLOTS AND STYLE THE BOARD  //\r\n  createBoard = (boardParams, isMainBoard, isBoardWon) => {\r\n    let board = []\r\n    let index = 0;\r\n \r\n    // Outer loop adding the full rows to the board\r\n    for (let i = 0; i < boardParams.height; i++) {\r\n      let slots = [];\r\n      // Inner loop creating the slots of the rows\r\n      for (let j = 0; j < boardParams.width; j++) {\r\n        slots.push(this.renderSlot(index, isBoardWon));\r\n        index++;\r\n      }\r\n      // At the end of the outer loop, we encapsulate our slots in row\r\n      board.push(<div key={i} className={styles.board_row}>{slots}</div>)\r\n    }\r\n\r\n    const startAngle = this.props.transitions && this.props.transitions.board ? this.props.transitions.board : 0;\r\n\r\n    return (\r\n      <div style={{'--boardStartPos': `rotateZ(${startAngle}deg)`}}\r\n          className={`\r\n              ${startAngle === 0 ? \"\" : `hasTransition ${styles.flip}`} \r\n              ${styles.board} \r\n              ${isMainBoard ? styles.main_board : \"\"} \r\n              ${this.props.isSelected ? styles.selected : \"\"}\r\n            `}\r\n          onTransitionEnd={isMainBoard && isBoardWon ? () => this.handleTransitionEnd() : undefined} >\r\n        {board}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // RETURN THE BOARD'S OWN CSS VARIABLES //\r\n  styleBoard = (size, boardParams) => {\r\n    // Align the size of the board to fit the slots  \r\n    // Arbitrary decision to occupy (X%) amount of space in the viewport\r\n    // Calculate two sizes for the slot based on the available space on both axes in the viewport\r\n    let slotSize = Math.floor(window.innerHeight * 0.55 / (boardParams.height * size));\r\n    let slotSizeDiff = Math.floor(window.innerHeight * 0.55 / (boardParams.width * size));\r\n    // let slotSizeDiff = Math.floor(window.innerWidth * 0.8 / (boardParams.width * size));\r\n\r\n    // The final size will be the smallest of the two, as we want the board to fit inside the viewport\r\n    slotSize = slotSize <= slotSizeDiff ? slotSize : slotSizeDiff;\r\n\r\n    // let fontSize = Math.round((boardWidth / 15.22) * Math.pow(this.props.boardParams.width, -1) * 10 /*/ size*/) / 10;\r\n    let fontSize = Math.round((boardParams.height / 130) * 10 /*/ size*/) / 10;\r\n    if (fontSize <= 0.5) fontSize = 0;\r\n\r\n    return {\r\n      '--boardWidth': slotSize * boardParams.width + 'px',\r\n      '--boardHeight': slotSize * boardParams.height + 'px',\r\n      // We use margin-right: -1px to merge the borders together on the boards, so we bump the slot size by 1 to compensate\r\n      '--slotSize': (slotSize + 1) + 'px',\r\n      '--fontSize': fontSize + 'em'\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // The board flip indicates us which dimension to take as which for the board\r\n    if (this.props.flip % 2 === 0) {\r\n      var boardParams = this.props.boardParams;\r\n    } else {\r\n      var boardParams = {width: this.props.boardParams.height, height: this.props.boardParams.width};\r\n    }\r\n\r\n    const isMainBoard = this.props.isMainBoard;\r\n    // Display a title under the history moves\r\n    const title = isMainBoard ? \"\" : this.props.title;\r\n\r\n    const isBoardWon = isMainBoard && this.props.winIndexes.length ? true : false;   \r\n    // We tweak the style of the board depending on it being the main one or not\r\n    // styleBoard(n, params) styles the board at a 1:n ratio\r\n    return (\r\n      <div style={isMainBoard ? this.styleBoard(1, boardParams) : this.styleBoard(4, boardParams)} \r\n          className={isMainBoard ? styles.main : \"\"}>\r\n        {this.createBoard(boardParams, isMainBoard, isBoardWon)}\r\n        <p className={styles.title}>{title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n// CSS\r\nimport styles from '../ConnectX.module.css';\r\n\r\nclass Form extends React.Component {\r\n\tprepareInfos = event => {\r\n\t\tevent.preventDefault();\r\n\t\t// We prepare the message details as an object\r\n\t\t// before sending them to the state\r\n\t\tconst gameInfos = {\r\n\t\t\twidth: parseInt(this.width.value),\r\n\t\t\theight: parseInt(this.height.value),\r\n\t\t\tscoreTarget: parseInt(this.scoreTarget.value)\r\n\t\t};\r\n\t\tthis.props.sendGameSettings(gameInfos);\r\n\r\n\t\t// We clear the textarea\r\n\t\tthis.infosForm.reset();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form \r\n\t\t\t\tclassName={styles.form}\r\n\t\t\t\tonSubmit={i => this.prepareInfos(i)}\r\n\t\t\t\tref={i => this.infosForm = i}\r\n\t\t\t>\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"[0-9]*\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.width = i}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"[0-9]*\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.height = i}\r\n\t\t\t\t/>\t\t\t\t\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"[0-9]*\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.scoreTarget = i}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<button type=\"submit\" >\r\n\t\t\t\t\t\tEnvoyer!\r\n\t\t\t\t</button>\r\n\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Form;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  handleClick,\r\n  jumpTo,\r\n  toggleSort,\r\n  toggleGravity,\r\n  flipBoard,\r\n  sendGameSettings,\r\n  syncBase,\r\n  loadData,\r\n  startWatchingStepNumber,\r\n  requestGame,\r\n  writeData,\r\n  reset,\r\n\r\n  selectTwoPlayersMode,\r\n  selectPlayers,\r\n  selectTransitions,\r\n  selectGravityState,  \r\n  selectGameSettings,\r\n  selectHistory,\r\n  selectStepNumber,\r\n  selectSortIsAsc,\r\n} from './connectXSlice';\r\nimport Board from './components/Board';\r\nimport Form from './components/Form';\r\nimport { Switch, Reset } from '../general/helpers/Components';\r\nimport { calculateWinner } from '../general/helpers/Functions';\r\n// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\n// DATABASE\r\nimport { getDatabase, ref } from \"firebase/database\";\r\nimport \"firebase/database\";\r\n\r\nexport function ConnectX(props) {\r\n  const dispatch = useDispatch();\r\n  dispatch(writeData());\r\n  const history = useSelector(selectHistory);\r\n  const stepNumber = useSelector(selectStepNumber);\r\n  // const stepNumber = 0;\r\n\r\n  const currentSlots = history[stepNumber].slots;\r\n  const players = useSelector(selectPlayers);\r\n  const inGame = useSelector(selectTwoPlayersMode);\r\n  console.log(\"inGame\", inGame);\r\n  const pseudo = props.pseudo;\r\n  let gameSettingsForm = <Form sendGameSettings={(i) => dispatch(sendGameSettings(i))} />\r\n  let requestGameButton = <button onClick={() => dispatch(requestGame(pseudo))}>Request game</button>\r\n\r\n  let boardClickFunc = (i) => dispatch(handleClick(i));\r\n  let toggleGravityFunc = () => dispatch(toggleGravity(true));\r\n  let flipBoardR = () => dispatch(flipBoard(1));\r\n  let flipBoardL = () => dispatch(flipBoard(-1));\r\n  // Look for our own pseudo in players, the first pseudo is X and starts the game\r\n  // ==> assign the player value indicator inside the player object\r\n  let player = (stepNumber % 2) === 0 ?  'X' : 'O';\r\n  console.log(\"players\", players);\r\n  if (players.length > 0) {\r\n    const myPlayer = players.find(e => e.pseudo === pseudo);\r\n    console.log(\"myPlayer\",myPlayer);\r\n    const isPlayer = myPlayer !== -1;\r\n    console.log(\"isPlayer\",isPlayer);\r\n    const gameInProgress = players.length === 2 && !isPlayer;\r\n    const waitingForGame = players.length === 1 && isPlayer;\r\n    // const inGame = players.length === 2 && isPlayer;\r\n    console.log(\"waitingForGame\", waitingForGame);\r\n    console.log(\"gameInProgress\", gameInProgress);\r\n  \r\n    if (waitingForGame || inGame) {\r\n      window.onunload = function(event) {\r\n        dispatch(reset(true));\r\n      };\r\n      gameSettingsForm = null;\r\n    }\r\n    if (gameInProgress || isPlayer) {\r\n      requestGameButton = null\r\n    }\r\n\r\n    if (inGame) {\r\n      const isMyTurn = myPlayer.sign === player ? true : false;\r\n      if (!isMyTurn) {\r\n        console.log(\"in game update\")\r\n        dispatch(startWatchingStepNumber());\r\n\r\n        // DEACTIVATE DB STATE CHANGING ACTIONS\r\n        boardClickFunc = () => {};\r\n        toggleGravityFunc = () => {};\r\n        flipBoardR = () => {};\r\n        flipBoardL = () => {};\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const gameSettings = useSelector(selectGameSettings);\r\n  const boardFlip = history[stepNumber].boardFlip;\r\n  let boardParams = {\r\n    width: gameSettings.width,\r\n    height: gameSettings.height\r\n  }\r\n\r\n  let transitions = useSelector(selectTransitions);\r\n  // console.log(transitions);\r\n  // if (transitions && !transitions.board && transitions.slots.find(e => e !== 'null') === -1) transitions = null;\r\n  // console.log(transitions);\r\n  let winIndexes = [];\r\n  const scoreTarget = gameSettings.scoreTarget;\r\n  if (stepNumber >= (scoreTarget * 2 - 1)) {\r\n    const boardWidth = boardFlip % 2 === 0 ? boardParams.width : boardParams.height;\r\n    winIndexes = calculateWinner((history[stepNumber - 1]).slots, currentSlots, scoreTarget, boardWidth);\r\n  // console.log(\"winIndexes\",winIndexes);\r\n  }\r\n  // We create the move list to be displayed from the history\r\n  let moves = history.map((step, move) => {\r\n    const desc = move ?'Move #' + move : 'Game start';\r\n    const isSelected = stepNumber === move ? true : false;\r\n    const isLatestHistoryMove = move && move === history.length - 1;\r\n\r\n    return (\r\n      <li key={move}>\r\n        <Board\r\n          boardParams={boardParams}        \r\n          isSelected={isSelected}\r\n          slots={history[move].slots}\r\n          transitions={isLatestHistoryMove ? transitions : null}\r\n          flip={history[move].boardFlip}\r\n          onClick={() => dispatch(jumpTo(move))}\r\n          title={desc}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const sortIsAsc = useSelector(selectSortIsAsc);\r\n  // We sort the resulting array in descending order if the toggle is on\r\n  moves = sortIsAsc ? moves : moves.sort((a, b) => b.key - a.key);\r\n\r\n\r\n  ////////////////////// SET better rules for the game flow and build next player detection accordingly ////////////\r\n  // Choose which game status has to be displayed\r\n\r\n\r\n  let status;\r\n\r\n  if (winIndexes.length) {\r\n    let streakCount = 0;\r\n    winIndexes.forEach(index => {\r\n      if(currentSlots[index] === 'X') streakCount++;\r\n    });\r\n    if(streakCount > winIndexes.length - streakCount) {\r\n      status = 'Winner: X';\r\n    } else if (streakCount < winIndexes.length - streakCount){\r\n      status = 'Winner: O';\r\n    } else {\r\n      status = 'Draw!'\r\n    }\r\n  } else if (!winIndexes.length && stepNumber === currentSlots.length) {\r\n    status = 'Draw!'\r\n  } else {\r\n    status = 'Next player: ' + player\r\n  }\r\n  return (\r\n    <div className={styles.game}>\r\n      {gameSettingsForm/* <-- PROTECT FORM INPUTS FROM VALUES TOO BIG*/}\r\n      <Board\r\n        isMainBoard={true}\r\n        boardParams={boardParams}\r\n        slots={currentSlots}\r\n        transitions={transitions}\r\n        flip={boardFlip}\r\n        winIndexes={winIndexes}\r\n        onClick={(i) => boardClickFunc(i)}\r\n      />\r\n      <div className={styles.game_info}>\r\n        <div className={styles.status}>{status}</div>\r\n        <div className={styles.controls}>\r\n          {requestGameButton}\r\n          <button onClick={() => flipBoardR()}>Flip right</button>\r\n          <button onClick={() => flipBoardL()}>Flip left</button>\r\n          <Switch isOn={!sortIsAsc} onClick={() => dispatch(toggleSort())}/>\r\n          <Switch isOn={useSelector(selectGravityState)} onClick={() => toggleGravityFunc()}/>\r\n          <Reset title=\"Reset\" onClick={() => dispatch(reset())}/>\r\n        </div>\r\n      {/*Restructure the scroll box so it expands as the moves come in, but make it scrollable so it slides under the main div\r\n         Basically remove the scroll bar entirely, make the bottom of the page a div that translateY onScrollEvent*/}\r\n        <div className={styles.scrollableY}>\r\n          <ol className={styles.moves}>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// A function that returns an array of indexes corresponding the slots that are part of a winning streak\r\n// on a two dimensionnal board, whatever the (reasonable) size\r\n// (previous) and (current) are arrays representing the two dimensionnal board at different steps\r\n// (scoreTarget) is the INT number of slots of the same value in line needed to win\r\n// (rowLength) is the INT number of slots in a single row of the board\r\nexport function calculateWinner(previous, current, scoreTarget, rowLength) {\r\n  let winSlots = [];\r\n  let finalWinSlots = [];\r\n\r\n  // We look for the differences between the current and previous board\r\n  let indexes = [];\r\n  for(const i in current) {\r\n    if(current[i] !== previous[i]) indexes.push(parseInt(i));\r\n  }\r\n\r\n  // console.log(indexes);\r\n  // We loop through each of these slots, as potential part of a winning streak\r\n  for (let j = indexes.length - 1; j >= 0; j--) {\r\n    const index = indexes[j];\r\n    // We dont run the check if the current index is already marked as part of a streak\r\n    if(!finalWinSlots.includes(index)) {\r\n      const currentValue = current[index];\r\n      // We search for streaks of the same value on all 4 axes and 8 directions, starting from the current index\r\n      // Horizontal axis\r\n      let streakL = 0;\r\n      for(let i = index; i > index - scoreTarget; i--) {\r\n        if(current[i-1] !== 'null' && current[i-1] === currentValue && i % rowLength !== 0) {\r\n          streakL++;\r\n          winSlots.push(i-1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakR = 0;\r\n      for(let i = index; i < index + scoreTarget; i++) {\r\n        if(current[i+1] !== 'null' && current[i+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakR++;\r\n          winSlots.push(i+1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      // We add the streak of both direction together, and check if it reaches the required score\r\n      const isWinHoriz = (streakL + streakR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakL);\r\n      // console.log(streakR);\r\n      // console.log(\"WIN HORIZ:\", isWinHoriz);\r\n      \r\n      // If it does, we add the current index to our work variable as part of the streak,\r\n      // then add the whole thing to our return variable\r\n      if(isWinHoriz) {\r\n        winSlots.push(index);   \r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }     \r\n      winSlots = [];\r\n\r\n      // Vertical axis\r\n      let streakT = 0;\r\n      for(let i = index; i > index - (scoreTarget * rowLength); i -= rowLength) {\r\n        if(current[i-rowLength] !== 'null' && current[i-rowLength] === currentValue) {\r\n          streakT++;\r\n          winSlots.push(i-rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakB = 0;\r\n      for(let i = index; i < index + (scoreTarget * rowLength); i += rowLength) {\r\n        if(current[i+rowLength] !== 'null' && current[i+rowLength] === currentValue) {\r\n          streakB++;\r\n          winSlots.push(i+rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinVert = (streakT + streakB) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakT);\r\n      // console.log(streakB);\r\n      // console.log(\"WIN VERT:\", isWinVert);\r\n\r\n      if(isWinVert) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Top diagonal axis\r\n      let streakTL = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength + 1); i -= (rowLength + 1)) {\r\n        if(current[i-rowLength-1] !== 'null' && current[i-rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakTL++;\r\n          winSlots.push(i-rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakBR = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength + 1); i += (rowLength + 1)) {\r\n        if(current[i+rowLength+1] !== 'null' && current[i+rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakBR++;\r\n          winSlots.push(i+rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      const isWinDiagT = (streakTL + streakBR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTL);\r\n      // console.log(streakBR);\r\n      // console.log(\"WIN DIAGT:\", isWinDiagT);\r\n\r\n      if(isWinDiagT) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Bottom diagonal axis\r\n      let streakTR = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength - 1); i -= (rowLength - 1)) {\r\n        if(current[i-rowLength+1] !== 'null' && current[i-rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakTR++;\r\n          winSlots.push(i-rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      let streakBL = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength - 1); i += (rowLength - 1)) {\r\n        if(current[i+rowLength-1] !== 'null' && current[i+rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakBL++;\r\n          winSlots.push(i+rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinDiagB = (streakTR + streakBL) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTR);\r\n      // console.log(streakBL);\r\n      // console.log(\"WIN DIAGB:\", isWinDiagB);\r\n\r\n      if(isWinDiagB) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n    }\r\n  } \r\n\r\n  // console.log(finalWinSlots);  \r\n  return finalWinSlots;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  incrementIfOdd,\r\n  selectCount,\r\n} from './counterSlice';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Tbd() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  const incrementValue = Number(incrementAmount) || 0;\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={(e) => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(incrementValue))}\r\n        >\r\n          Add Async\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\r\n        >\r\n          Add If Odd Tbd\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport { Nav } from './features/nav/Nav';\r\nimport { Counter } from './features/counter/Counter';\r\nimport { TicTacToe } from './features/tictactoe/TicTacToe';\r\nimport { ConnectX } from './features/connectX/ConnectX';\r\nimport { Tbd } from './features/bejeweled/Tbd';\r\n\r\n// CSS\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: {\r\n        'Counter': Counter,\r\n        'TicTacToe': TicTacToe,\r\n        'ConnectX': ConnectX,\r\n        'Tbd': Tbd\r\n      },\r\n      itemSelected: null,      \r\n    };\r\n    this.handleClick = this.handleClick.bind(this);    \r\n  }\r\n\r\n  handleClick(i) {\r\n    this.setState({ itemSelected: i.target.name});\r\n  }\r\n\r\n  render() {\r\n    const itemSelected = this.state.itemSelected ? React.createElement(this.state.items[this.state.itemSelected], {pseudo: this.props.match.params.pseudo}) : null;    \r\n    return (\r\n      <div className=\"App\">\r\n        <Nav items={this.state.items} handleClick={this.handleClick}/>\r\n        <div className=\"main\">{itemSelected}</div>\r\n{/*        <footer>\r\n          <span>\r\n            <span>Learn </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux-toolkit.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux Toolkit\r\n            </a>\r\n            ,<span> and </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://react-redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React Redux\r\n            </a>\r\n          </span>        \r\n        </footer>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n\treturn (\r\n\t\t<h2 className=\"notFound\">Nothing to see here</h2>\r\n\t)\r\n}\r\n\r\nexport default NotFound;","import {\r\n\tconfigureStore,\r\n\tcombineReducers,\r\n\tgetDefaultMiddleware\r\n} from '@reduxjs/toolkit';\r\n// import { connectRouter, routerMiddleware } from \"connected-react-router\";\r\n\r\nimport navReducer from '../features/nav/navSlice';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport tictactoeReducer from '../features/tictactoe/tictactoeSlice';\r\nimport connectXReducer from '../features/connectX/connectXSlice';\r\n\r\nimport history from '../history';\r\n// export const store = configureStore({\r\n//   reducer: {\r\n//     counter: counterReducer,\r\n//     tictactoe: tictactoeReducer,\r\n//   },\r\n// });\r\n\r\nconst combinedReducer = combineReducers({\r\n  nav: navReducer,\r\n  counter: counterReducer,\r\n  tictactoe: tictactoeReducer,\r\n  connectX: connectXReducer,\r\n});\r\n\r\n// const rootReducer = (history: history) => ({\r\n//     router: connectRouter(history)\r\n// })\r\n\r\n// export default configureStore({\r\n//   reducer: rootReducer(history),\r\n//   middleware: [routerMiddleware(history), ...getDefaultMiddleware()]\r\n// });\r\n\r\nconst rootReducer = (state, action) => {\r\n// Reducers are supposed to return the initial state when they are called\r\n// with undefined as the first argument, no matter the action\r\n  if (action.type === 'nav/reset') {\r\n    state = undefined;\r\n  }\r\n  return combinedReducer(state, action);\r\n};\r\n\r\nconst customizedMiddleware = getDefaultMiddleware({\r\n  serializableCheck: false\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [...customizedMiddleware]\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// Rooter\r\nimport {Router, Route, Switch} from 'react-router-dom';\r\nimport history from './history';\r\n\r\n//Components\r\nimport Connexion from './components/Connexion'\r\nimport App from './App';\r\nimport NotFound from './components/NotFound'\r\nimport { loadState, saveState} from './localStorage'\r\n\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nconst baseURL = \"/redux-project\";\r\n\r\nconst persistedState = loadState();\r\n\r\nstore.subscribe(() => {\r\n\tsaveState(store.getState());\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n\t\t\t<Router history={history}>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path={`${baseURL}/`} component={Connexion} />\r\n\t\t\t\t\t<Route path={`${baseURL}/pseudo/:pseudo`}  component={App} /> \r\n\t\t\t\t\t<Route component={NotFound}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","//src/localStorage.js\r\n\r\nexport const loadState = () => {\r\n\ttry{\r\n\t\tconst serializedState = localStorage.getItem('state');\r\n\t\tif(serializedState === null){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn JSON.parse(serializedState)\r\n\t} catch (err) {\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n\r\nexport const saveState = (state) => {\r\n\ttry{\r\n\t\tconst serializedState = JSON.stringify(state)\r\n\t\tlocalStorage.setItem('state', serializedState);\r\n\t} catch (err) {\r\n\t\tconsole.log(err)\r\n\t}\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"ConnectX_game__1x_fZ\",\"form\":\"ConnectX_form__34LiB\",\"main\":\"ConnectX_main__6vhcL\",\"main_board\":\"ConnectX_main_board__1BL24\",\"title\":\"ConnectX_title__2bStg\",\"board\":\"ConnectX_board__3OnTo\",\"board_row\":\"ConnectX_board_row__CsIJA\",\"slot\":\"ConnectX_slot__25hJA\",\"slotContent\":\"ConnectX_slotContent__GfqZP\",\"slotContentX\":\"ConnectX_slotContentX__18XTw\",\"slotContentO\":\"ConnectX_slotContentO__1evBh\",\"win\":\"ConnectX_win__X-N9o\",\"scaleAnim\":\"ConnectX_scaleAnim__3zEhe\",\"game_info\":\"ConnectX_game_info__2JF9V\",\"controls\":\"ConnectX_controls__ekhdW\",\"status\":\"ConnectX_status__2MWFR\",\"moves\":\"ConnectX_moves__1ki_t\",\"selected\":\"ConnectX_selected__1Puyt\",\"kbd-navigation\":\"ConnectX_kbd-navigation__35g11\",\"scrollableY\":\"ConnectX_scrollableY__1Mm7t\",\"flipR\":\"ConnectX_flipR__2HwCv\",\"animate\":\"ConnectX_animate__3ZyN7\",\"flip\":\"ConnectX_flip__2PQK3\",\"fall\":\"ConnectX_fall__13rRa\"};"],"sourceRoot":""}