{"version":3,"sources":["history.js","localStorage.js","pages/Connexion.js","features/nav/navSlice.js","features/general/helpers/Components.js","features/nav/Nav.js","base.js","features/connectX/connectXAPI.js","features/connectX/connectXSlice.js","features/connectX/components/Slot.js","features/connectX/ConnectXTransitions.js","features/connectX/components/Board.js","features/connectX/components/Form.js","features/connectX/ConnectX.js","features/general/helpers/Functions.js","pages/InfosPage.js","App.js","pages/NotFound.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/tictactoe/tictactoeSlice.js","app/store.js","index.js","features/connectX/ConnectX.module.css"],"names":["createBrowserHistory","loadSessionItems","name","serializedItems","sessionStorage","getItem","JSON","parse","err","saveSessionItems","items","stringify","setItem","console","log","Connexion","goToApp","event","preventDefault","pseudo","pseudoInput","value","stamp","Date","toString","history","push","className","onSubmit","i","type","placeholder","required","pattern","ref","input","React","Component","navSlice","createSlice","initialState","reducers","reset","state","actions","Switch","props","styles","checked","isOn","onClick","readOnly","Reset","title","Nav","itemSelected","navItems","Object","keys","map","key","index","handleClick","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getFirestore","compareGameState","turnData","db","getDatabase","Promise","resolve","get","then","readTurnAction","exists","readStepNumber","val","turnAction","stepNumber","dataSnapshot","catch","error","readPlayers","readGameState","isInit","players","gameSettings","snapshot","gameIsOn","slots","Array","fill","boardFlip","number","width","height","scoreTarget","asyncStatus","currentSign","sortIsAsc","gravityState","transitions","board","status","animations","updateStateAsync","createAsyncThunk","a","response","setGameStateAsync","thunkAPI","selectPlayers","getState","playerCount","length","set","selectGameSettings","dispatch","sendGameSettings","removePlayers","requestGame","connectXSlice","fillSlot","action","data","payload","current","slotIndex","slotValue","isEndTurn","slice","concat","gravity","singleSlotMode","isAction","toggle","noEditMode","noEdit","count","slotScore","j","l","targetIndex","startOfTurn","hasTransitions","filter","el","flipBoardState","flipValue","newSlots","rowCount","gravIsOff","endTurn","changeStep","toggleSort","setGameSettings","settings","setAsyncStatus","isDbReset","baseRef","extraReducers","builder","addCase","pending","fulfilled","window","alert","playersRefs","playersCount","statePlayers","statePlayersCount","signs","player","sign","selectHistory","connectX","selectStepNumber","selectSortIsAsc","selectGravityState","selectCurrentSign","selectTurnAction","selectTransitions","selectAnimations","flipBoard","direction","playerInfos","watchTimer","setInterval","clearInterval","Slot","transitionClass","speed","hasTransition","fall","Math","round","contentClass","slotFilled","slotFilledX","slotFilledO","animType","animation","winClass","winStyle","wonSlot","slot","style","onTransitionEnd","handleTransitionEnd","styleWin","from","document","querySelectorAll","forEach","e","classList","remove","add","win","Board","renderSlot","isBoardWon","transition","transitionCallback","onClickFunc","undefined","winIndexes","includes","maxScore","sort","b","findIndex","createBoard","boardParams","isMainBoard","slotTransitions","slotAnimations","slotTransition","slotAnimation","board_row","startAngle","main_board","flip","isSelected","selected","styleBoard","size","paramsHeight","paramsWidth","slotSize","floor","innerHeight","slotSizeDiff","slotSize2","innerWidth","slotSizeDiff2","this","transitionedElements","setTimeout","transitionBoards","documentElement","setProperty","cssCoeff","boardClass","moves_board","disabledClass","statusHandler","main","statusClass","disabled","disabledBoard","endTurnFunc","previous","Form","prepareInfos","parseInt","minVal","gameInfos","infosForm","maxLength","ConnectX","useDispatch","useSelector","currentSlots","gameSettingsForm","requestGameButton","endTurnButton","resetButton","gameControls","disabledGameControls","playSlotFunc","gameStatus","asyncGameStatus","gameStyle","reverseGameStyle","idStamp","myPlayer","find","isPlayer","waitingForGame","inGame","onunload","mySign","isMyTurn","updateDb","watchGame","highlighted","redPlayerTurn","bluePlayerTurn","previousAction","canEndTurn","fadeInOnHover","fadeout","moves","step","move","desc","isLatestHistoryMove","jumpTo","boardWidth","rowLength","winSlots","finalWinSlots","indexes","currentValue","streakL","streakR","streakT","streakB","streakTL","streakBR","streakTR","streakBL","calculateWinner","streakCount","game","controls","scrollableX","InfosPage","connectXInfos","App","bind","setState","target","createElement","NotFound","fetchCount","amount","incrementAsync","counterSlice","increment","decrement","incrementByAmount","squares","winSquares","xIsNext","tictactoeSlice","combinedReducer","combineReducers","nav","navReducer","counter","counterReducer","tictactoe","tictactoeReducer","connectXReducer","customizedMiddleware","getDefaultMiddleware","serializableCheck","configureStore","reducer","middleware","baseURL","ReactDOM","render","StrictMode","store","exact","path","component","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7ab73f47.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","\r\nexport const loadSessionItems = (name) => {\r\n\ttry{\r\n\t\tconst serializedItems = sessionStorage.getItem(name);\r\n\t\tif(serializedItems === null){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn JSON.parse(serializedItems)\r\n\t} catch (err) {\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n\r\nexport const saveSessionItems = (items, name) => {\r\n\ttry{\r\n\t\tconst serializedItems = JSON.stringify(items)\r\n\t\tsessionStorage.setItem(name, serializedItems);\r\n\t} catch (err) {\r\n\t\tconsole.log(err)\r\n\t}\r\n}","import React from 'react';\r\nimport { saveSessionItems } from '../localStorage';\r\nimport history from '../history';\r\n// CSS\r\n// import './App.css';\r\n\r\nclass Connexion extends React.Component {\r\n\tgoToApp = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this);\r\n\t\tconst pseudo = this.pseudoInput.value;\r\n\t\tsaveSessionItems({pseudo:pseudo, stamp:(+new Date()).toString(36)}, 'playerInfos');\r\n\t\thistory.push(`/redux-project/`);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"connexionBox\">\r\n\t\t    <header className=\"App-header\">\r\n\t\t      <h1 className=\"logo\">Redux-progress</h1>\r\n\t\t    </header>\r\n\t\t    <p>Hello there!<br/>\r\n\t\t    My name is Maxime Sarrazin, and this is Redux-progress, a work in progress of mini-games made with React and Redux, as a part of my learning journey in Javascript and complex application building.</p>\r\n\t\t    <p>To proceed to the games, please choose your player name below! (2&nbsp;to&nbsp;10 characters)</p>\r\n\t\t\t\t<form className=\"form connexion\" onSubmit={(i) => this.goToApp(i)}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"name\"\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tpattern=\"[A-Z]*[a-z]*{2,10}\"\r\n\t\t\t\t\t\tref={input => {this.pseudoInput = input}}/>\r\n\t\t\t\t\t<button type=\"submit\"></button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Connexion;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n};\r\n\r\nexport const navSlice = createSlice({\r\n  name: 'nav',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    reset: state => {\r\n      // From here we can take action only at this \"counter\" state\r\n      // But, as we have taken care of this particular \"logout\" action\r\n      // in rootReducer, we can use it to CLEAR the complete Redux Store's state\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reset } = navSlice.actions;\r\n\r\n\r\nexport default navSlice.reducer;\r\n","import React from 'react';\r\n\r\nexport function Switch(props) {\r\n  return (\r\n    <label className={`switch ${props.styles}`}>\r\n\t\t  <input\r\n\t\t\t  type=\"checkbox\"\r\n\t\t\t  checked={props.isOn}\r\n\t\t\t  onClick={props.onClick}\r\n\t\t\t  readOnly\r\n\t\t  />\r\n\t\t  <span className=\"slider\"></span>\r\n\t\t</label>\r\n\t);\r\n}\r\n\r\nexport function Reset(props) {\r\n  return (\r\n    <button className=\"reset\" onClick={props.onClick}>\r\n    \t{props.title}\t\t\t  \r\n\t</button>\r\n\t);\r\n}\r\n\r\n","import React from 'react';\r\n// import { useDispatch } from 'react-redux';\r\nimport { reset } from './navSlice';\r\nimport { Reset } from '../general/helpers/Components';\r\n\r\nexport function Nav(props) {\r\n  const itemSelected = props.itemSelected;\r\n  const navItems = Object.keys(props.items)\r\n        .map((key,index) =>\r\n          <button\r\n            name={key}\r\n            key={index}\r\n            className={itemSelected === key ? 'selected' : ''} \r\n            onClick={itemSelected === key ? ()=> {} : (i) => props.handleClick(i)}>\r\n            {key !== 'i' ? `Play ${key}` : key}\r\n          </button>\r\n        );\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1 className=\"logo\">Redux-progress</h1>\r\n      <div className=\"nav-items\">\r\n        <div className=\"pseudo\">{props.pseudo}</div>\r\n        {navItems}\r\n      </div>\r\n{/*      <Reset title=\"Reset all\" onClick={() => dispatch(reset())}/>*/}\r\n    </header>\r\n  );\r\n}\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore/lite';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBcbjihs9sz2r212hEj8Dh1IjeDKfRqy7U\",\r\n  authDomain: \"redux-progress.firebaseapp.com\",\r\n  databaseURL: \"https://redux-progress-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n  projectId: \"redux-progress\",\r\n  storageBucket: \"redux-progress.appspot.com\",\r\n  messagingSenderId: \"1056425097273\",\r\n  appId: \"1:1056425097273:web:26f5d8fe70bfe09b8cf5e8\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst base = getFirestore(app);\r\n\r\nexport default base;\r\n","import { getDatabase, ref, get} from \"firebase/database\";\r\n\r\nexport function compareGameState(turnData) {\r\n\tconst db = getDatabase();\r\n  return new Promise((resolve) => {\r\n\t\tget(ref(db, `/turnAction`)).then((readTurnAction) => {\r\n\t\t\tif (readTurnAction.exists()) {\r\n\t\t\t\tget(ref(db, `/stepNumber`)).then((readStepNumber) => {\r\n\t\t\t\t\tif (readStepNumber.exists()) {\r\n\t\t        if(readTurnAction.val() !== turnData.turnAction || readStepNumber.val() !== turnData.stepNumber) {\r\n\t\t\t\t\t    get(ref(db, `/`)).then((dataSnapshot) => {\r\n\t\t\t\t\t\t\t\tif (dataSnapshot.exists()) {\r\n\t\t\t        \t\tresolve(dataSnapshot.val());\r\n\t\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t    }).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t    get(ref(db, `/players`)).then((readPlayers) => {\r\n\t\t\t\t\t\t\t\tif (readPlayers.exists() && readPlayers.val() === 0) {\r\n\t\t\t        \t\tresolve(0);\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t    }).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t    }\r\n\t\t\t\t  } else {\r\n\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t  }\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t  console.error(error);\r\n\t\t\t\t});\t\t\t\t\r\n\t\t  } else {\r\n\t\t    console.log(\"No data available\");\r\n\t\t  }\r\n\t\t}).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport function readGameState(isInit) {\r\n\tconst db = getDatabase();\r\n  return new Promise((resolve) => {  \t\r\n\t\tget(ref(db, `/players`)).then((players) => {\r\n\t\t\tif (players.exists()) {\r\n\t\t\t\tif (isInit) {\r\n\t\t\t\t\tresolve({players: players.val()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tget(ref(db, `/gameSettings`)).then((gameSettings) => {\r\n\t\t\t\t\t\tif (gameSettings.exists()) {\r\n\t\t\t\t\t\t\tget(ref(db, `/gameIsOn`)).then((snapshot) => {\r\n\t\t\t\t\t\t\t\tif (snapshot.exists()) {\r\n\t\t\t\t\t\t\t    resolve({players: players.val(), gameSettings: gameSettings.val(), gameIsOn: snapshot.val()});\r\n\t\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t\t\t});\t\t    \r\n\t\t\t\t\t  } else {\r\n\t\t\t\t\t    console.log(\"No data available\");\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\t  console.error(error);\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t  } else {\r\n\t\t    console.log(\"No data available\");\r\n\t\t  }\r\n\t\t}).catch((error) => {\r\n\t\t  console.error(error);\r\n\t\t});\r\n  });\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getDatabase, ref, set, push } from \"firebase/database\";\r\nimport '../../base';\r\nimport { loadSessionItems } from '../../localStorage';\r\nimport { compareGameState, readGameState } from './connectXAPI';\r\n\r\nconst initialState = {\r\n  history: [{\r\n    slots: Array(42).fill(0),\r\n    boardFlip: 0,\r\n  }],\r\n  turnAction: {number:0, type:0},\r\n  stepNumber: 0,\r\n  gameSettings: {\r\n    width: 7,\r\n    height: 6,\r\n    scoreTarget: 4 \r\n  },\r\n  asyncStatus: '',\r\n  currentSign: 'X',\r\n  players: null,\r\n  sortIsAsc: true,\r\n  gravityState: true,\r\n  transitions: {slots:0, board:0, status:0},\r\n  animations: 0,\r\n};\r\n\r\nconst actionsPerTurn = 2;\r\n\r\nexport const updateStateAsync = createAsyncThunk(\r\n  'connectX/compareGameState',\r\n  async (turnData) => {\r\n    const response = await compareGameState(turnData);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const setGameStateAsync = createAsyncThunk(\r\n  'connectX/readGameState',\r\n  async (isInit, thunkAPI) => {\r\n    const response = await readGameState(isInit);\r\n    let players = response.players;\r\n    if (isInit) {\r\n      if (selectPlayers(thunkAPI.getState())) {\r\n        return;\r\n      } else {\r\n        if (!players) players = [];\r\n      }     \r\n    } else {\r\n      const playerCount = Object.keys(players).length;\r\n\r\n      if (playerCount === 1) {\r\n        set(ref(getDatabase(), '/gameSettings/'), selectGameSettings(thunkAPI.getState()));\r\n        set(ref(getDatabase(), '/gameIsOn/'), false);\r\n      } else if (playerCount === 2) {\r\n        if (response.gameIsOn) {\r\n          thunkAPI.dispatch(sendGameSettings(response.gameSettings));\r\n        } else {\r\n          thunkAPI.dispatch(reset(true));\r\n        }\r\n      }\r\n      if (playerCount > 2) {\r\n        thunkAPI.dispatch(removePlayers());\r\n        thunkAPI.dispatch(requestGame(loadSessionItems()));\r\n        players = [];\r\n      } \r\n    }\r\n    return players;\r\n  }\r\n);\r\n\r\nexport const connectXSlice = createSlice({\r\n  name: 'connectX',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    fillSlot: (state, action) => {\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const data = action.payload;\r\n      let stepNumber = data.stepNumber;\r\n      let history = data.history;\r\n      const current = data.current;\r\n      const slots = data.slots;\r\n      const slotIndex = data.slotIndex;\r\n      const slotValue = state.currentSign;\r\n\r\n      slots[slotIndex] = slotValue;\r\n\r\n      const turnAction = state.turnAction;\r\n      const startOfTurn = !turnAction.type;\r\n      if (startOfTurn) stepNumber++;\r\n      state.stepNumber = stepNumber;\r\n\r\n      const isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      const gravIsOff = !state.gravityState;\r\n      if (gravIsOff) {\r\n        const width = state.gameSettings.width,\r\n            height = state.gameSettings.height;\r\n        const isFloating = current.boardFlip % 2 === 0 ? slots[slotIndex + width] === 0 : slots[slotIndex + height] === 0;\r\n        if (isFloating) {\r\n          let animations = state.animations ? state.animations.slice() : Array(width * height).fill(0);\r\n          animations[slotIndex] = 'floating';      \r\n          state.animations = animations;\r\n        }\r\n\r\n        state.transitions = {slots:0, board:0};          \r\n        if (isEndTurn) {\r\n          state.turnAction = {number:0, type:0};\r\n          state.currentSign = slotValue === 'X' ? 'O' : 'X';\r\n        } else {\r\n          state.turnAction.number += 1;\r\n          state.turnAction.type = 1;\r\n        }\r\n      } else {\r\n        state.turnAction.number += 1;\r\n        state.turnAction.type = 1;\r\n      }\r\n      // We add the current board to the history, and assign the stepNumber based on the new history\r\n      history = history.slice(0, stepNumber);      \r\n      state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n      \r\n      const players = state.players;\r\n      if (players && players.length === 2) state.turnAction.action = true;\r\n\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db fillSlot\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/stepNumber/');\r\n      //   if (startOfTurn) {\r\n      //     set(baseRef, stepNumber);\r\n      //   }\r\n      //   if (gravIsOff) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);        \r\n      //     }\r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, {slots:0, board:0});        \r\n      //   }\r\n      // }\r\n    },\r\n// Currently unable to toggle\r\n    gravity: (state, action) => {\r\n      const slotIndex = action.payload.slotIndex;\r\n      const singleSlotMode = typeof slotIndex === 'undefined' ? false : true;\r\n\r\n      // We get the slots of the currently displayed move\r\n      let stepNumber = state.stepNumber;  \r\n      let history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];\r\n      const slots = current.slots.slice();\r\n\r\n      const isAction = action.payload.toggle;\r\n      let gravityState = state.gravityState;\r\n      const turnAction = state.turnAction;\r\n      let isEndTurn;\r\n        console.log(\"isAction\", isAction)\r\n      if (isAction) {\r\n        console.log(\"gravityState\", gravityState)\r\n        gravityState = gravityState ? false : true;\r\n        const players = state.players;\r\n        if (players && players.length === 2) state.turnAction.action = true;        \r\n        isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      } else {\r\n        isEndTurn = turnAction.number === actionsPerTurn;\r\n        console.log(\"isEndTurn\",isEndTurn);\r\n      }\r\n\r\n      const noEditMode = action.payload.noEdit;\r\n      if (gravityState || noEditMode) {\r\n        state.animations = 0;\r\n        let width = state.gameSettings.width,\r\n            height = state.gameSettings.height;\r\n        if (current.boardFlip % 2 !== 0) {\r\n          width = state.gameSettings.height;\r\n          height = state.gameSettings.width;\r\n        }\r\n\r\n        let count = 1; \r\n        if (singleSlotMode) {\r\n          var slotScore = 0;\r\n          // We start iterating at the second to last row\r\n          for(let i = height - 1; i > 0; i--) {\r\n            // We then determine the height the slot sits at by testing its index,\r\n            // we make it a score that represents the distance that this slot can be potentially pushed down\r\n            if(slotIndex >= (i - 1) * width && slotIndex <= i * width - 1) {\r\n              slotScore = height - i;\r\n              break;\r\n            }\r\n          }        \r\n          count = slotScore;\r\n        }\r\n        var transitions = Array(width * height).fill(0);\r\n        var animations = transitions.slice();\r\n        // We iterate through every rows, counting it (count), starting from the second to last one and going up\r\n        for (let i = slots.length - 1 - count * width; i >= 0; i -= width) {\r\n          // We then iterate through each row, to get to each and every slot\r\n          for (let j = 0; j < width; j++) {\r\n            // We store (count) as a relative height we're at from the first row we go through,\r\n            // giving us a score (l) of how many slots we'll try to \"push down\" the value of the slot.\r\n            // If it fails, we loop and try to push it one slot shorter\r\n            let index = i - j;\r\n            if (slots[index] && (!singleSlotMode || slotIndex === index)) {\r\n              for (let l = count; l > 0; l--) {\r\n                const targetIndex = index + width * l;\r\n                if(!slots[targetIndex]) {\r\n                  if (noEditMode) {\r\n                    animations[index] = 'floating';\r\n                  } else {\r\n                    // If the destination is free, we switch the values\r\n                    // (l) provides the height indication for the animation\r\n                    slots[targetIndex] = slots[index];\r\n                    slots[index] = 0;\r\n                    transitions[targetIndex] = l;\r\n                  }\r\n                  break;\r\n                }\r\n              }\r\n              if (slotIndex === index) break;\r\n            }\r\n          }\r\n          if (singleSlotMode) break;\r\n          count++;\r\n        }\r\n      }\r\n\r\n      const startOfTurn = !turnAction.type;\r\n      if (noEditMode) {\r\n        state.animations = animations;\r\n      } else {\r\n        if (startOfTurn) stepNumber++;\r\n        state.stepNumber = stepNumber;\r\n        if (isEndTurn) {\r\n          state.turnAction = {number:0, type:0, action:turnAction.action};\r\n          state.currentSign = state.currentSign === 'X' ? 'O' : 'X';        \r\n        } else {\r\n          state.turnAction.number = isAction ? turnAction.number + 1 : turnAction.number;\r\n          state.turnAction.type = isAction ? 2 : turnAction.type;\r\n        }\r\n\r\n        history = history.slice(0, stepNumber);\r\n        state.history = history.concat([{slots: slots, boardFlip: current.boardFlip}]);\r\n        state.gravityState = gravityState;\r\n        // We check if there is any slotScore > 0 so we dont expect a transition callback when there isn't\r\n        const hasTransitions = transitions && transitions.filter(el => {return el !== 0;}).length > 0 ? true : false;\r\n        // If the toggle was called with a click, we clear the board transition,\r\n        // if the gravity is turned off, we clear the slots transitions\r\n        state.transitions = {slots: gravityState ? hasTransitions ? transitions : 0 : 0, board: isAction ? 0 : turnAction.type !== 3 ? 0 : state.transitions.board};\r\n      }\r\n\r\n\r\n      // if (state.players && state.players.length === 2) {  \r\n      //   console.log(\"set db toggleGravity\"); \r\n      //   const db = getDatabase();    \r\n      //   let baseRef = ref(db, '/gravityState/');\r\n      //   if (isAction) {\r\n      //     set(baseRef, gravityState);\r\n      //   }\r\n      //   if (!noEditMode) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (startOfTurn) {\r\n      //       baseRef = ref(db, '/stepNumber/');\r\n      //       set(baseRef, stepNumber);\r\n      //     }\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);\r\n      //     }          \r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, state.transitions);\r\n      //   } else {\r\n      //     baseRef = ref(db, '/animations/');\r\n      //     set(baseRef, state.animations);\r\n      //   }\r\n      // }  \r\n    },\r\n\r\n    flipBoardState: (state, action) => {\r\n      // Modify the way the values are placed inside the slots and replace the current history move with it\r\n\r\n      // We get the slots of the currently displayed move\r\n      let stepNumber = state.stepNumber;      \r\n      let history = state.history.slice(0, stepNumber + 1);\r\n      const current = history[stepNumber];\r\n      const slots = current.slots.slice();\r\n\r\n      // We deduce the future flip state of the board with the payload (1 ou -1)\r\n      const flipValue = action.payload;\r\n      let boardFlip = current.boardFlip + flipValue;\r\n      if (boardFlip === -1) boardFlip = 3;\r\n      if (boardFlip === 4) boardFlip = 0;\r\n\r\n      // Adjust the board params to that flip state to iterate through properly through the future board\r\n      let width = state.gameSettings.width,\r\n          height = state.gameSettings.height;\r\n      if (current.boardFlip % 2 !== 0) {\r\n        width = state.gameSettings.height;\r\n        height = state.gameSettings.width;\r\n      }\r\n\r\n      let newSlots = slots.slice();\r\n      let rowCount = height;\r\n      // We iterate through every rows, counting it (count)\r\n      for (let i = slots.length - 1; i >= 0; i -= width) {\r\n        // We then iterate through each row, to get to each and every slot\r\n        for (let j = 0; j < width; j++) {\r\n          const index = i - j;\r\n          // Here are the two formulaes corresponding to flipping the board clockwise and counter clockwise\r\n          // They take the initial index of the slot as well as the number of the row it sits in (first row = 1) as parameters\r\n          const newIndex = flipValue === 1 ? height * (index + 1 - (rowCount - 1) * width) - rowCount : height * (rowCount * width - 1 - index) + rowCount - 1;\r\n          newSlots[newIndex] = slots[index];\r\n        }\r\n        rowCount--;\r\n      }\r\n\r\n      const turnAction = state.turnAction;\r\n      const startOfTurn = !turnAction.type;\r\n      if (startOfTurn) stepNumber++;        \r\n      state.stepNumber = stepNumber;\r\n      \r\n      const isEndTurn = turnAction.number + 1 === actionsPerTurn;\r\n      const gravIsOff = !state.gravityState;\r\n\r\n      if (isEndTurn && gravIsOff) {\r\n        state.turnAction = {number:0, type:0};\r\n        state.currentSign = state.currentSign === 'X' ? 'O' : 'X';        \r\n      } else {\r\n        state.turnAction.number += 1;\r\n        state.turnAction.type = 3;\r\n      }\r\n\r\n      history = history.slice(0, stepNumber);\r\n      state.history = history.concat([{slots: newSlots, boardFlip: boardFlip}]);\r\n      state.transitions = {slots: 0, board: flipValue * -90};\r\n\r\n      const players = state.players;\r\n      if (players && players.length === 2) state.turnAction.action = true;\r\n\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db flipBoard\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/stepNumber/');\r\n      //   if (startOfTurn) {\r\n      //     set(baseRef, stepNumber);\r\n      //   }\r\n      //   if (gravIsOff) {\r\n      //     baseRef = ref(db, `/history/${stepNumber}`);\r\n      //     set(baseRef, {slots: slots, boardFlip: current.boardFlip});\r\n      //     if (isEndTurn) {\r\n      //       baseRef = ref(db, '/currentSign/');\r\n      //       set(baseRef, state.currentSign);        \r\n      //     }\r\n      //     baseRef = ref(db, '/turnAction/');\r\n      //     set(baseRef, state.turnAction.number);\r\n      //     baseRef = ref(db, '/transitions/');\r\n      //     set(baseRef, state.transitions);        \r\n      //   }\r\n      // } \r\n    },\r\n\r\n    endTurn: (state) => {\r\n      // const turnAction = {number:0, type:0, action:true};\r\n      state.turnAction = {number:0, type:0, action:true};\r\n      state.currentSign = state.currentSign === 'X' ? 'O' : 'X';\r\n      state.transitions = {slots:0, board:0, status:1};\r\n      // if (state.players && state.players.length === 2) {\r\n      //   console.log(\"set db endTurn\");\r\n      //   const db = getDatabase();\r\n      //   let baseRef = ref(db, '/turnAction/');\r\n      //   set(baseRef, turnAction.number);\r\n      //   baseRef = ref(db, '/currentSign/');\r\n      //   set(baseRef, state.currentSign);\r\n      //   baseRef = ref(db, '/transitions/');\r\n      //   set(baseRef, {slots:0, board:0});\r\n      // }\r\n    },\r\n\r\n    changeStep: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.currentSign = state.stepNumber % 2 === 0 ? 'X' : 'O';      \r\n      state.turnAction = {number:0, type:0};          \r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n      state.transitions = {slots:0, board:0};\r\n    },\r\n\r\n    setGameSettings: (state, action) => {\r\n      const settings = action.payload;\r\n      state.gameSettings = settings;\r\n      state.history = [{\r\n        slots: Array(settings.width * settings.height).fill(0),\r\n        boardFlip: 0\r\n      }];\r\n    },\r\n\r\n    setAsyncStatus: (state, action) => {\r\n      state.asyncStatus = action.payload;\r\n    },\r\n\r\n    reset: (state, action) => {\r\n      const isDbReset = action.payload;\r\n      const history = state.history.slice(0,1);\r\n      history[0].boardFlip = 0;\r\n      const transitions = {slots:0, board:0};        \r\n      if (isDbReset) {\r\n        const db = getDatabase();\r\n        let baseRef = ref(db, '/stepNumber/');\r\n        set(baseRef, 0);\r\n        baseRef = ref(db, '/gameSettings/');\r\n        set(baseRef, state.gameSettings);        \r\n        baseRef = ref(db, '/history/');\r\n        set(baseRef, history);   \r\n        baseRef = ref(db, '/turnAction/');\r\n        set(baseRef, 0);        \r\n        baseRef = ref(db, '/currentSign/');\r\n        set(baseRef, 'X');      \r\n        baseRef = ref(db, '/transitions/');\r\n        set(baseRef, transitions);\r\n        baseRef = ref(db, '/gravityState/');\r\n        set(baseRef, true);\r\n        baseRef = ref(db, '/gameIsOn/');\r\n        set(baseRef, true);        \r\n      }\r\n      state.stepNumber = 0;\r\n      state.history = history;\r\n      state.currentSign = 'X';      \r\n      state.turnAction = {number:0, type:0};      \r\n      state.transitions = transitions;\r\n      state.gravityState = true;\r\n    },\r\n\r\n    removePlayers: (state) => {\r\n      // As this is called on window.onunload, we only have time for one API call to be made\r\n      const db = getDatabase();\r\n      set(ref(db, '/players/'),0);\r\n    }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(updateStateAsync.pending, (state) => {\r\n        console.log(\"updateStateAsync pending\");\r\n      })\r\n      .addCase(updateStateAsync.fulfilled, (state, action) => {\r\n        const data = action.payload;\r\n        console.log(\"updateStateAsync\",data);\r\n\r\n        if (data === 0) {\r\n          window.alert('Your opponent left! Reload the page to exit the current game');\r\n          state.players = null;\r\n          state.asyncStatus = '';\r\n        } else {\r\n          state.history = data.history;\r\n          state.stepNumber = data.stepNumber;\r\n          const transitions = data.transitions;\r\n          state.transitions = {slots: transitions.slots, board: transitions.board};\r\n          state.gravityState = data.gravityState;\r\n          const turnAction = data.turnAction;\r\n          state.turnAction.number = turnAction === actionsPerTurn ? 0 : turnAction;\r\n          state.asyncStatus = state.currentSign === data.currentSign ? 'watching' : '';\r\n          state.currentSign = data.currentSign;\r\n        }\r\n      })\r\n      .addCase(setGameStateAsync.pending, (state) => {\r\n        console.log(\"setGameStateAsync pending\");\r\n      })      \r\n      .addCase(setGameStateAsync.fulfilled, (state, action) => {\r\n        const players = action.payload;\r\n        console.log(\"setGameStateAsync\",players);\r\n        if (players) {\r\n          const playersRefs = Object.keys(players);\r\n          const playersCount = playersRefs.length; \r\n          console.log('playersCount',playersCount);\r\n          if(!playersCount || !state.players) {\r\n            console.log(\"setGameStateAsync []\");\r\n            state.players = [];\r\n            // window.alert('There was an issue, please try again!');          \r\n          } \r\n\r\n          if (playersCount) {\r\n            let statePlayers = state.players;\r\n            const statePlayersCount = statePlayers.length;\r\n            console.log('statePlayersCount',statePlayersCount);\r\n            if (!statePlayersCount || playersCount === 2) {\r\n              const signs = ['O', 'X'];\r\n\r\n              if (statePlayersCount === 1) statePlayers = [];\r\n              for (let i in playersRefs) {\r\n                statePlayers = statePlayers.concat({player: players[playersRefs[i]], sign: signs[i]});\r\n                console.log('statePlayers',statePlayers);\r\n                state.players = statePlayers;\r\n              }\r\n              state.transitions = {slots:0, board:0};\r\n            }  \r\n          }\r\n        }\r\n      });\r\n  }  \r\n});\r\n\r\nexport const {\r\n  fillSlot,\r\n  changeStep,\r\n  toggleSort,\r\n  gravity,\r\n  flipBoardState,\r\n  endTurn,\r\n  setAsyncStatus,\r\n  setGameSettings,\r\n  reset,\r\n  removePlayers,\r\n} = connectXSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.connectX.value)`\r\nexport const selectHistory = (state) => state.connectX.history;\r\nexport const selectGameSettings = (state) => state.connectX.gameSettings;\r\nexport const selectStepNumber = (state) => state.connectX.stepNumber;\r\nexport const selectSortIsAsc = (state) => state.connectX.sortIsAsc;\r\nexport const selectGravityState = (state) => state.connectX.gravityState;\r\nexport const selectCurrentSign = (state) => state.connectX.currentSign;\r\nexport const selectPlayers = (state) => state.connectX.players;\r\nexport const selectAsyncStatus = (state) => state.connectX.asyncStatus;\r\nexport const selectTurnAction = (state) => state.connectX.turnAction;\r\nexport const selectTransitions = (state) => state.connectX.transitions;\r\nexport const selectAnimations = (state) => state.connectX.animations;\r\n\r\n\r\nexport const playSlot = (slotIndex) => (dispatch, getState) => {\r\n  const stepNumber = selectStepNumber(getState());\r\n  const history = selectHistory(getState()).slice(0, stepNumber + 1);\r\n  const current = history[stepNumber];    \r\n  const slots = current.slots.slice();\r\n  const gravityState = selectGravityState(getState());\r\n  // Can't play a slot if it has already been played\r\n  if (slots[slotIndex]) return; \r\n\r\n  const data = {stepNumber, history, current, slots, slotIndex, gravityState};\r\n  dispatch(fillSlot(data));\r\n\r\n  if(gravityState) {\r\n    dispatch(gravity({toggle:false, slotIndex}));\r\n  }\r\n};\r\n\r\nexport const flipBoard = (direction) => (dispatch, getState) => {\r\n  dispatch(flipBoardState(direction));\r\n  dispatch(gravity({toggle:false, noEdit: !selectGravityState(getState())}));\r\n};\r\n\r\nexport const jumpTo = (stepNumber) => (dispatch, getState) => {\r\n  if (selectPlayers(getState()).length < 2) { \r\n    dispatch(changeStep(stepNumber));\r\n    // if(selectGravityState(getState())) {\r\n    //   dispatch(toggleGravity({toggle:false}));\r\n    // }\r\n  }\r\n};\r\n\r\nexport const sendGameSettings = (settings) => (dispatch) => {\r\n  dispatch(reset());\r\n  dispatch(setGameSettings(settings));\r\n};\r\n\r\n// CALL TO ASYNC\r\nexport const initPlayers = () => (dispatch) => {\r\n  dispatch(setGameStateAsync(true));\r\n};\r\n\r\nexport const requestGame = (playerInfos) => (dispatch, getState) => {\r\n  console.log(playerInfos);\r\n\r\n  set(push(ref(getDatabase(), 'players')), {\r\n    pseudo: playerInfos.pseudo,\r\n    stamp: playerInfos.stamp\r\n  })\r\n  .then(() => {\r\n    if (!selectPlayers(getState()).length)\r\n    dispatch(setGameStateAsync(false));\r\n    const watchTimer = setInterval(() => {\r\n      if (selectPlayers(getState()).length < 2) {\r\n        dispatch(setGameStateAsync(false));\r\n      } else {\r\n        clearInterval(watchTimer);\r\n      }\r\n    }, 4000);\r\n  })\r\n  .catch((error) => {\r\n    // The write failed...\r\n  });\r\n};\r\n\r\nexport const watchGame = (mySign) => (dispatch, getState) => {\r\n\r\n  // Genius move\r\n  if (selectAsyncStatus(getState()) !== 'watching') {\r\n\r\n    const watchTimer = setInterval(() => {\r\n      const turnData = {turnAction: selectTurnAction(getState()).number, stepNumber: selectStepNumber(getState())};\r\n      // console.log(\"selectPlayers(getState())\",selectPlayers(getState()).length === 2);\r\n      if (mySign === selectCurrentSign(getState()) || selectPlayers(getState()).length !== 2) {\r\n        clearInterval(watchTimer);\r\n      } else {\r\n        dispatch(updateStateAsync(turnData));\r\n      }    \r\n    }, 4000);\r\n  }\r\n\r\n  dispatch(setAsyncStatus('watching'));\r\n};    \r\n\r\nexport default connectXSlice.reducer;\r\n","import React from 'react';\r\n// CSS\r\nimport styles from '../ConnectX.module.css';\r\n\r\nfunction Slot(props) {\r\n\r\n\t\t// FALL ANIMATION //\r\n\t\tconst slotScore = props.slotScore;\r\n\t\tlet transitionClass = \"\";\r\n\t\tlet speed = 0\r\n\t\tif (slotScore) {\r\n\t\t\ttransitionClass = `${styles.hasTransition} ${styles.fall}`;\r\n\t\t\tspeed = Math.round((0.16 + 0.189 * Math.log(slotScore)) * 10) / 10;\r\n\t\t}\r\n\r\n\t\t// DISPLAY SLOT CONTENT //\r\n    const contentClass = props.value ? `${styles.slotFilled} ${props.value === 'X' ? styles.slotFilledX : styles.slotFilledO}` : \"\";\r\n    \r\n    // ADDITIONNAL SLOT FEATURES //\r\n    let animType = props.animation ? props.animation : '';\r\n    animType = styles[animType];\r\n\r\n    // DISPLAY WIN //\r\n    const winClass = props.winStyle ? styles.wonSlot : '';\r\n    let coeff = -1;\r\n  return (\r\n    <button\r\n    \tclassName={`${styles.slot} ${contentClass} ${winClass}`}\r\n    \tonClick={props.onClick}\r\n    >\r\n      <div \tstyle={{'--slotStartPos': `calc(${coeff * slotScore * 133.3}%)`,'--speed': `${speed}s`}}\r\n\t\t\t\t\t\tclassName={`${transitionClass} ${animType ? animType : ''}`} onTransitionEnd={props.handleTransitionEnd}>\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Slot;","// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\n// WIN DISPLAY //\r\nexport function styleWin() {\r\n  const wonSlot = styles.wonSlot;\r\n  const slots = Array.from(document.querySelectorAll(`.${wonSlot}`));\r\n  slots.forEach(e => {\r\n    e.classList.remove(wonSlot);\r\n    e.classList.add(styles.win);\r\n  });    \r\n};\r\n\r\n// LAUNCH TRANSITIONS //\r\nexport function transitionBoards() {\r\n  const hasTransition = styles.hasTransition;\r\n  // We get all elements with the transition class\r\n  const transitionedElements = Array.from(document.querySelectorAll(`.${hasTransition}`));\r\n  console.log(transitionedElements);\r\n  transitionedElements.forEach(e => {\r\n    // First we clear out the class on the previously animated elements\r\n    e.classList.remove(hasTransition);\r\n\r\n    // We trust the transitions for animations happening after this update\r\n    setTimeout(() => { e.classList.add(styles.transition); }, 0);\r\n  });\r\n};\r\n","import React from 'react';\r\nimport Slot from './Slot';\r\n\r\n// STYLE\r\nimport { transitionBoards, styleWin } from '../ConnectXTransitions.js';\r\nimport styles from '../ConnectX.module.css';\r\n\r\nclass Board extends React.Component {\r\n\r\n  // ANIMATION & WIN TRIGGER //\r\n  componentDidUpdate() {\r\n    // We use this hook to manipulate the transitions on the dom elements \r\n    const transitions = this.props.transitions;\r\n    if(this.props.isMainBoard) {\r\n      transitionBoards();\r\n      // If there are no transitions and the game is won, we style it directly\r\n      if ((!transitions || (!transitions.slots && !transitions.board && !transitions.status)) && this.props.winIndexes.length) {\r\n        styleWin();\r\n      }\r\n      // We reset the vh unit to keep the display in check when the viewport height changes (for example on mobile)\r\n      // We put it here so it's intuitive and hidden to the user\r\n      document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);\r\n    }\r\n  }\r\n\r\n  // TRANSITIONS CALLBACK //\r\n  handleTransitionEnd = (event) => {\r\n    // We wait for the end of the transitions to style the winning slots\r\n    console.log(\"hey style win transitionend\");\r\n    styleWin();\r\n  };\r\n\r\n  // PREPARE THE SLOT //\r\n  renderSlot = (i, isBoardWon, transition, animation) => {\r\n    // We deactivate the handleclick action if the board is won\r\n    const onClickFunc = isBoardWon ? undefined : () => this.props.onClick(i);\r\n\r\n    // Determine if the slot is part of a winning streak\r\n    const winIndexes = isBoardWon ? this.props.winIndexes : null;\r\n    const winStyle = winIndexes && winIndexes.includes(i) ? true : false;\r\n\r\n    let slotScore = 0;\r\n    let transitionCallback;\r\n    if(transition) {\r\n      // Assign the slot a score based on the animation map: the higher the score, the longer the animation \r\n      slotScore = transition;\r\n      if(winStyle) { // For now we only put the callback to style a win \r\n        const transitions = this.props.transitions.slots;\r\n        // Sort out the null elements, then sort in descending order the slotScores that are left inside\r\n        // and take out the first value, which indicates the maximum animation score for this render\r\n        const maxScore = transitions.filter(el => {return el !== 0;}).sort((a, b) => b - a)[0];\r\n        // Finds the first index with a maxScore in the map and check if it corresponds to the current index\r\n        const isFirstMaxScoreSlot = i === transitions.findIndex(e => e === maxScore);\r\n        // We make this slot a reference for the longest animation and put the callback onto it\r\n        if(isFirstMaxScoreSlot) transitionCallback = (i) => this.handleTransitionEnd(i);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Slot\r\n        key={i}\r\n        value={this.props.slots[i]}\r\n        onClick={onClickFunc}\r\n        slotScore={slotScore}\r\n        winStyle={winStyle}\r\n        animation={animation}\r\n        handleTransitionEnd={transitionCallback}\r\n      /> \r\n    );\r\n  }\r\n\r\n  // STRUCTURE THE SLOTS AND STYLE THE BOARD  //\r\n  createBoard = (boardParams, isMainBoard, isBoardWon) => {\r\n    let board = []\r\n    let index = 0;\r\n    const transitions = this.props.transitions;\r\n    const slotTransitions = transitions ? this.props.transitions.slots : null;\r\n    const slotAnimations = this.props.animations ? this.props.animations : null;\r\n    let slotTransition = 0;\r\n    let slotAnimation = 0;\r\n    // Outer loop adding the full rows to the board\r\n    for (let i = 0; i < boardParams.height; i++) {\r\n      let slots = [];\r\n      // Inner loop creating the slots of the rows\r\n      for (let j = 0; j < boardParams.width; j++) {\r\n        if (slotTransitions) slotTransition = slotTransitions[index];\r\n        if (slotAnimations) slotAnimation = slotAnimations[index];\r\n        slots.push(this.renderSlot(index, isBoardWon, slotTransition, slotAnimation));\r\n        index++;\r\n      }\r\n      // At the end of the outer loop, we encapsulate our slots in row\r\n      board.push(<div key={i} className={styles.board_row}>{slots}</div>)\r\n    }\r\n\r\n    const startAngle = transitions ? this.props.transitions.board : 0;\r\n    \r\n    // We include the board flip in the classes to make sure the board classes reload \r\n    // when we flip the board. Otherwise, React wouldn't re-assign the values even though the Board was re-rendered,\r\n    // it's probably a React feature, but i'm not certain of what is happening\r\n    return (\r\n      <div style={{'--boardStartPos': `rotateZ(${startAngle}deg)`}}\r\n          className={`\r\n              ${styles.board} \r\n              ${isMainBoard ? styles.main_board : \"\"} \r\n              ${isMainBoard ? this.props.flip : \"\"} \r\n              ${startAngle === 0 ? \"\" : `${styles.flip} ${styles.hasTransition}`} \r\n              ${this.props.isSelected ? styles.selected : \"\"}\r\n            `}\r\n          onTransitionEnd={isMainBoard && isBoardWon ? () => this.handleTransitionEnd() : undefined} >\r\n        {board}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // RETURN THE BOARD'S OWN CSS VARIABLES //\r\n  styleBoard = (size, boardParams) => {\r\n    const paramsHeight = boardParams.height; \r\n    const paramsWidth = boardParams.width; \r\n    // Align the size of the board to fit the slots  \r\n    // Arbitrary decision to occupy (X%) amount of space in the viewport\r\n    // Calculate two sizes for the slot based on the available space on both axes in the viewport\r\n    let slotSize = Math.floor(window.innerHeight * 0.55 / (paramsHeight * size));\r\n    let slotSizeDiff = Math.floor(window.innerHeight * 0.55 / (paramsWidth * size));\r\n    let slotSize2 = Math.floor(window.innerWidth * 0.85 / (paramsHeight * size));\r\n    let slotSizeDiff2 = Math.floor(window.innerWidth * 0.85 / (paramsWidth * size));\r\n\r\n    // The final size will be the smallest of the two, as we want the board to fit inside the viewport whatever the\r\n    // flip state of the board\r\n    slotSize = slotSize <= slotSizeDiff ? slotSize : slotSizeDiff;\r\n    slotSize2 = slotSize2 <= slotSizeDiff2 ? slotSize2 : slotSizeDiff2;\r\n\r\n    slotSize = slotSize <= slotSize2 ? slotSize : slotSize2;\r\n\r\n    const boardWidth = slotSize * paramsWidth;\r\n    const boardHeight = slotSize * paramsHeight;\r\n\r\n    return {\r\n      '--boardWidth': boardWidth + 'px',\r\n      '--boardHeight': boardHeight + 'px',\r\n      '--slotSize': slotSize + 'px',\r\n      '--slotContentSize': Math.floor(slotSize * 0.75 - 1) + 'px',\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // The board flip indicates us which dimension to take as which for the board\r\n    let boardParams = this.props.boardParams;\r\n    if (this.props.flip % 2 !== 0) {\r\n      boardParams = {width: boardParams.height, height: boardParams.width};\r\n    }\r\n    const isMainBoard = this.props.isMainBoard;\r\n\r\n    let cssCoeff = 4;\r\n    let boardClass = styles.moves_board;\r\n    let disabledClass = '';\r\n    let isBoardWon = false;   \r\n    let statusHandler = null;\r\n    if (isMainBoard) {\r\n      cssCoeff = 1;\r\n      boardClass = styles.main;\r\n      if (this.props.statusClass.disabled) disabledClass = styles.disabledBoard;\r\n      const statusClass = this.props.statusClass;\r\n      // console.log(this.props.onClick);\r\n\r\n      statusHandler = \r\n        <div className={styles.statusHandler}>\r\n          <button className={`${statusClass.current}`}></button>\r\n          <button onClick={this.props.endTurnFunc} className={`${statusClass.previous}`}></button>\r\n        </div>;\r\n      if (this.props.winIndexes.length) isBoardWon = true;   \r\n    }\r\n    // We tweak the style of the board depending on it being the main one or not\r\n    // styleBoard(n, params) styles the board at a 1:n ratio\r\n    return (\r\n      <div style={this.styleBoard(cssCoeff, boardParams)} \r\n          className={`${boardClass} ${disabledClass}`}>\r\n        {statusHandler}\r\n        {this.createBoard(boardParams, isMainBoard, isBoardWon)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n// CSS\r\n// import styles from '../ConnectX.module.css';\r\n\r\nclass Form extends React.Component {\r\n\tprepareInfos = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst width = parseInt(this.width.value);\r\n\t\tconst height = parseInt(this.height.value);\r\n\t\tconst minVal = width <= height ? width : height;\r\n\t\tconst scoreTarget = Math.round(0.8 + 1.7 * Math.log((width + height) / 2));\r\n\t\tconst gameInfos = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tscoreTarget: minVal <= scoreTarget ? minVal : scoreTarget\r\n\t\t\t// scoreTarget: parseInt(this.scoreTarget.value)\r\n\t\t};\r\n\t\tthis.props.sendGameSettings(gameInfos);\r\n\r\n\t\t// We clear the textarea\r\n\t\tthis.infosForm.reset();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form \r\n\t\t\t\tclassName=\"form\"\r\n\t\t\t\tonSubmit={i => this.prepareInfos(i)}\r\n\t\t\t\tref={i => this.infosForm = i}\r\n\t\t\t>\r\n\t\t\t\t<span>Largeur :</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"\\b([3-9]|[12][0-9]|3[0-2])\\b\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.width = i}\r\n\t\t\t\t\tplaceholder=\" 3-32\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<span>Hauteur :</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"\\b([3-9]|[12][0-9]|3[0-2])\\b\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.height = i}\r\n\t\t\t\t\tplaceholder=\" 3-32\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\t\t\t\t\r\n{/*\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\" pattern=\"[0-9]*\"\r\n\t\t\t\t\tmaxLength={this.props.length}\r\n\t\t\t\t\tref={i => this.scoreTarget = i}\r\n\t\t\t\t/>*/}\r\n\r\n\t\t\t\t<button type=\"submit\" >\r\n\t\t\t\t</button>\r\n\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  playSlot,\r\n  jumpTo,\r\n  toggleSort,\r\n  gravity,\r\n  flipBoard,\r\n  endTurn,  \r\n  sendGameSettings,\r\n  watchGame,\r\n  requestGame,\r\n  reset,\r\n  initPlayers,  \r\n  removePlayers,\r\n\r\n  selectTurnAction,\r\n  selectCurrentSign,\r\n  selectPlayers,\r\n  selectGravityState,  \r\n  selectGameSettings,\r\n  selectHistory,\r\n  selectStepNumber,\r\n  selectSortIsAsc,\r\n  selectTransitions,\r\n  selectAnimations,\r\n} from './connectXSlice';\r\nimport Board from './components/Board';\r\nimport Form from './components/Form';\r\nimport { Switch, Reset } from '../general/helpers/Components';\r\nimport { calculateWinner, updateDb } from '../general/helpers/Functions';\r\n// CSS\r\nimport styles from './ConnectX.module.css';\r\n\r\nexport function ConnectX(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useSelector(selectHistory);\r\n  const stepNumber = useSelector(selectStepNumber);\r\n  const gameSettings = useSelector(selectGameSettings);\r\n  const turnAction = useSelector(selectTurnAction);\r\n  const players = useSelector(selectPlayers);\r\n  const currentSign = useSelector(selectCurrentSign);\r\n  const gravityState = useSelector(selectGravityState);\r\n  const transitions = useSelector(selectTransitions);  \r\n  const animations = useSelector(selectAnimations);\r\n  const sortIsAsc = useSelector(selectSortIsAsc);\r\n  const currentSlots = history[stepNumber].slots;\r\n  const playerInfos = props.playerInfos;\r\n  const pseudo = playerInfos.pseudo;\r\n\r\n  let gameSettingsForm = <Form sendGameSettings={(i) => dispatch(sendGameSettings(i))} />\r\n  let requestGameButton = <button onClick={() => dispatch(requestGame(playerInfos))}>Request game</button>\r\n  let endTurnButton = null;\r\n  let endTurnFunc;\r\n  let resetButton = <Reset title=\"Reset\" onClick={() => dispatch(reset())}/>\r\n\r\n  let gameControls =\r\n    <span>\r\n      <button onClick={() => dispatch(flipBoard(1))}>Flip right</button>\r\n      <button onClick={() => dispatch(flipBoard(-1))}>Flip left</button>\r\n      <Switch isOn={!gravityState} onClick={() => dispatch(gravity({toggle:true}))}/>\r\n    </span>;\r\n\r\n  const disabledGameControls =\r\n    <span>\r\n      <button className={styles.disabled} onClick={() => {}}>Flip right</button>\r\n      <button className={styles.disabled} onClick={() => {}}>Flip left</button>\r\n      <Switch className={styles.disabled} isOn={!gravityState} onClick={() => {}}/>\r\n    </span>;\r\n\r\n  let playSlotFunc = (i) => dispatch(playSlot(i));\r\n\r\n  let gameStatus = history.length === 1 ? 'startOfGame' : 'startOfTurn';\r\n  let asyncGameStatus = '';\r\n  console.log(\"players\",players);\r\n  // Use the stamp to differentiate ourselves from an existing player with the same pseudo\r\n  const idStamp = playerInfos.stamp;\r\n  if (players && players.length > 0) {\r\n    const playerCount = players.length;\r\n    console.log(\"playerCount\",playerCount);\r\n\r\n    const myPlayer = players.find(e => e.player.pseudo === pseudo && e.player.stamp === idStamp);\r\n    const isPlayer = myPlayer !== undefined;\r\n    console.log(\"myplayer\",myPlayer);\r\n\r\n    if (isPlayer) {\r\n      const waitingForGame = playerCount === 1;\r\n      const inGame = playerCount === 2;\r\n  \r\n      if (waitingForGame || inGame) {\r\n        console.log(\"waitingForGame\",waitingForGame);\r\n        window.onunload = function(event) {\r\n          dispatch(removePlayers());\r\n        };\r\n      }\r\n  \r\n      if (inGame) {\r\n        const mySign = myPlayer.sign;\r\n        const isMyTurn = mySign === currentSign ? true : false;\r\n        console.log(isMyTurn);\r\n        asyncGameStatus = `You are the ${mySign === 'X' ? 'red' : 'blue'} player. ${isMyTurn ? `Your turn to play!` : `It's your opponent's turn.`}`;\r\n        // Writing the DB with the new values if we just used an action \r\n        if (turnAction.action) {\r\n          updateDb({history, stepNumber, turnAction, currentSign, gravityState, transitions, animations});\r\n        }         \r\n\r\n        if (!isMyTurn) {\r\n          dispatch(watchGame(mySign));\r\n          playSlotFunc = () => {};\r\n          gameControls = disabledGameControls;\r\n        }\r\n        gameSettingsForm = null;\r\n        resetButton = null;\r\n      }\r\n      \r\n      requestGameButton = null;\r\n\r\n    } else {\r\n      const gameInProgress = playerCount === 2;\r\n      const opponentWaiting = playerCount === 1;\r\n  \r\n      if (gameInProgress) {\r\n        requestGameButton = null;\r\n      }\r\n      if (opponentWaiting) {\r\n        requestGameButton = <button className={styles.highlighted} onClick={() => dispatch(requestGame(playerInfos))}>Join game</button>;\r\n      }\r\n    }\r\n  } else if (!players) {\r\n    console.log(\"am i crazy\", players);\r\n    dispatch(initPlayers());\r\n  }\r\n\r\n  console.log(\"currentSign\",currentSign);\r\n  let gameStyle;\r\n  let reverseGameStyle;\r\n  if (currentSign ===  'X') {\r\n    gameStyle = styles.redPlayerTurn\r\n    reverseGameStyle = styles.bluePlayerTurn\r\n  } else {\r\n    gameStyle = styles.bluePlayerTurn\r\n    reverseGameStyle = styles.redPlayerTurn\r\n  }\r\n  // We want the player to use one of his two actions to fill a slot\r\n  if (turnAction.number) {\r\n    const previousAction = turnAction.type;\r\n    console.log(\"previousAction\",previousAction);\r\n    if (previousAction === 1) {\r\n      playSlotFunc = () => {};\r\n      endTurnButton = <button onClick={() => dispatch(endTurn())}>End turn</button>\r\n      endTurnFunc = () => dispatch(endTurn());\r\n      gameStyle = {\r\n        current: `${gameStyle}`, \r\n        previous: `${styles.canEndTurn} ${styles.fadeInOnHover} ${styles.hasTransition}`,\r\n        disabled: true\r\n      };\r\n      gameStatus = 'canEndTurn';\r\n      // saveSessionItems \r\n      \r\n    } else {\r\n      gameStyle = {current: `${gameStyle}`, previous: ``};\r\n      gameControls = disabledGameControls;\r\n      gameStatus = 'hasToPlay';\r\n    }\r\n  } else {\r\n    console.log(transitions);\r\n    gameStyle = {\r\n      current: gameStyle,\r\n      previous: history.length > 1 ? `${transitions.status ? `${styles.endTurn} ${reverseGameStyle}`: reverseGameStyle} ${styles.fadeout} ${styles.hasTransition}` : ''\r\n    };\r\n  }\r\n\r\n  const boardFlip = history[stepNumber].boardFlip;\r\n  const boardParams = {\r\n    width: gameSettings.width,\r\n    height: gameSettings.height\r\n  }\r\n\r\n  // We create the move list to be displayed from the history\r\n  let moves = history.map((step, move) => {\r\n    const desc = move ?'Move #' + move : 'Game start';\r\n    const isSelected = stepNumber === move ? true : false;\r\n    const isLatestHistoryMove = move === history.length - 1;\r\n\r\n    return (\r\n      <li key={move}>\r\n        <p><span>{desc}</span></p>\r\n        <Board\r\n          boardParams={boardParams}        \r\n          isSelected={isSelected}\r\n          slots={history[move].slots}\r\n          transitions={isLatestHistoryMove ? transitions : null}\r\n          flip={history[move].boardFlip}\r\n          onClick={() => dispatch(jumpTo(move))}\r\n          title={desc}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  // We sort the resulting array in descending order if the toggle is on\r\n  moves = sortIsAsc ? moves : moves.sort((a, b) => b.key - a.key);\r\n\r\n\r\n  let status;\r\n  let winIndexes = [];\r\n  const scoreTarget = gameSettings.scoreTarget;\r\n  if (stepNumber >= (scoreTarget * 2 - 1)) {\r\n    const boardWidth = boardFlip % 2 === 0 ? boardParams.width : boardParams.height;\r\n    winIndexes = calculateWinner((history[stepNumber - 1]).slots, currentSlots, scoreTarget, boardWidth);\r\n  }\r\n  if (winIndexes.length) {\r\n    gameControls = disabledGameControls;\r\n    endTurnFunc = () => {};\r\n    playSlotFunc = () => {};\r\n    gameStatus = 'endOfGame';\r\n    let streakCount = 0;\r\n    winIndexes.forEach(index => {\r\n      if(currentSlots[index] === 'X') streakCount++;\r\n    });\r\n    if(streakCount > winIndexes.length - streakCount) {\r\n      status = 'Winner: X';\r\n    } else if (streakCount < winIndexes.length - streakCount){\r\n      status = 'Winner: O';\r\n    } else {\r\n      status = 'Draw!'\r\n    }\r\n  } else if (!winIndexes.length && stepNumber === currentSlots.length) {\r\n    status = 'Draw!'\r\n    gameStatus = 'endOfGame';\r\n  } /*else if (turnAction.type === 1) {\r\n    status = 'Next player: ' + player === 'X' ? 'O' : 'X'\r\n  } */else {\r\n    status = `${currentSign === 'X' ? 'Red' : 'Blue'} player's turn`\r\n  }\r\n  return (\r\n    <div className={styles.game}>\r\n      <div className={styles.gameInfos}>\r\n        <span className={styles.status}>{status} - {gameStatus}</span>\r\n        {gameSettingsForm}\r\n        {asyncGameStatus}\r\n      </div>\r\n      <Board\r\n        isMainBoard={true}\r\n        statusClass={gameStyle}\r\n        boardParams={boardParams}\r\n        slots={currentSlots}\r\n        flip={boardFlip}\r\n        winIndexes={winIndexes}\r\n        onClick={(i) => playSlotFunc(i)}\r\n        endTurnFunc={endTurnFunc}\r\n        transitions={transitions}\r\n        animations={animations}\r\n      />\r\n      <div className={styles.controls}>\r\n        {requestGameButton}\r\n        {gameControls}\r\n        {endTurnButton}\r\n        {resetButton}\r\n      </div>\r\n      <div className={styles.scrollableX}>\r\n        <Switch isOn={!sortIsAsc} styles={styles.toggleSort} onClick={() => dispatch(toggleSort())}/>\r\n        <ol className={styles.moves}>{moves}</ol>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import { getDatabase, ref, set } from \"firebase/database\";\r\nimport '../../../base';\r\n\r\nexport function updateDb(state) {\r\n  console.log(\"updateDb\");\r\n  const db = getDatabase();\r\n  const stepNumber = state.stepNumber;\r\n  let baseRef = ref(db, `/history/${stepNumber}`);\r\n  set(baseRef, state.history[stepNumber]);\r\n  baseRef = ref(db, '/stepNumber/');\r\n  set(baseRef, stepNumber);\r\n  baseRef = ref(db, '/turnAction/');\r\n  set(baseRef, state.turnAction.number);\r\n  baseRef = ref(db, '/currentSign/');\r\n  set(baseRef, state.currentSign);        \r\n  baseRef = ref(db, '/gravity/');\r\n  set(baseRef, state.gravityState);\r\n  baseRef = ref(db, '/transitions/');\r\n  set(baseRef, state.transitions);\r\n  baseRef = ref(db, '/animations/');\r\n  set(baseRef, state.animations);\r\n}\r\n\r\n// A function that returns an array of indexes corresponding the slots that are part of a winning streak\r\n// on a two dimensionnal board, whatever the (reasonable) size\r\n// (previous) and (current) are arrays representing the two dimensionnal board at different steps\r\n// (scoreTarget) is the INT number of slots of the same value in line needed to win\r\n// (rowLength) is the INT number of slots in a single row of the board\r\nexport function calculateWinner(previous, current, scoreTarget, rowLength) {\r\n  let winSlots = [];\r\n  let finalWinSlots = [];\r\n\r\n  // We look for the differences between the current and previous board\r\n  let indexes = [];\r\n  for(const i in current) {\r\n    if(current[i] !== previous[i]) indexes.push(parseInt(i));\r\n  }\r\n\r\n  // console.log(indexes);\r\n  // We loop through each of these slots, as potential part of a winning streak\r\n  for (let j = indexes.length - 1; j >= 0; j--) {\r\n    const index = indexes[j];\r\n    // We dont run the check if the current index is already marked as part of a streak\r\n    if(!finalWinSlots.includes(index)) {\r\n      const currentValue = current[index];\r\n      // We search for streaks of the same value on all 4 axes and 8 directions, starting from the current index\r\n      // Horizontal axis\r\n      let streakL = 0;\r\n      for(let i = index; i > index - scoreTarget; i--) {\r\n        if(current[i-1] && current[i-1] === currentValue && i % rowLength !== 0) {\r\n          streakL++;\r\n          winSlots.push(i-1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakR = 0;\r\n      for(let i = index; i < index + scoreTarget; i++) {\r\n        if(current[i+1] && current[i+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakR++;\r\n          winSlots.push(i+1);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      // We add the streak of both direction together, and check if it reaches the required score\r\n      const isWinHoriz = (streakL + streakR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakL);\r\n      // console.log(streakR);\r\n      // console.log(\"WIN HORIZ:\", isWinHoriz);\r\n      \r\n      // If it does, we add the current index to our work variable as part of the streak,\r\n      // then add the whole thing to our return variable\r\n      if(isWinHoriz) {\r\n        winSlots.push(index);   \r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }     \r\n      winSlots = [];\r\n\r\n      // Vertical axis\r\n      let streakT = 0;\r\n      for(let i = index; i > index - (scoreTarget * rowLength); i -= rowLength) {\r\n        if(current[i-rowLength] && current[i-rowLength] === currentValue) {\r\n          streakT++;\r\n          winSlots.push(i-rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakB = 0;\r\n      for(let i = index; i < index + (scoreTarget * rowLength); i += rowLength) {\r\n        if(current[i+rowLength] && current[i+rowLength] === currentValue) {\r\n          streakB++;\r\n          winSlots.push(i+rowLength);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinVert = (streakT + streakB) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakT);\r\n      // console.log(streakB);\r\n      // console.log(\"WIN VERT:\", isWinVert);\r\n\r\n      if(isWinVert) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Top diagonal axis\r\n      let streakTL = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength + 1); i -= (rowLength + 1)) {\r\n        if(current[i-rowLength-1] && current[i-rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakTL++;\r\n          winSlots.push(i-rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      let streakBR = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength + 1); i += (rowLength + 1)) {\r\n        if(current[i+rowLength+1] && current[i+rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakBR++;\r\n          winSlots.push(i+rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      const isWinDiagT = (streakTL + streakBR) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTL);\r\n      // console.log(streakBR);\r\n      // console.log(\"WIN DIAGT:\", isWinDiagT);\r\n\r\n      if(isWinDiagT) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n\r\n      // Bottom diagonal axis\r\n      let streakTR = 0;\r\n      for(let i = index; i > index - scoreTarget * (rowLength - 1); i -= (rowLength - 1)) {\r\n        if(current[i-rowLength+1] && current[i-rowLength+1] === currentValue && (i+1) % rowLength !== 0) {\r\n          streakTR++;\r\n          winSlots.push(i-rowLength+1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }  \r\n      let streakBL = 0;\r\n      for(let i = index; i < index + scoreTarget * (rowLength - 1); i += (rowLength - 1)) {\r\n        if(current[i+rowLength-1] && current[i+rowLength-1] === currentValue && i % rowLength !== 0) {\r\n          streakBL++;\r\n          winSlots.push(i+rowLength-1);      \r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const isWinDiagB = (streakTR + streakBL) >= scoreTarget - 1 ? true : false;\r\n      // console.log(streakTR);\r\n      // console.log(streakBL);\r\n      // console.log(\"WIN DIAGB:\", isWinDiagB);\r\n\r\n      if(isWinDiagB) {\r\n        winSlots.push(index);\r\n        finalWinSlots = finalWinSlots.concat(winSlots);\r\n      }\r\n      winSlots = [];\r\n    }\r\n  } \r\n\r\n  // console.log(finalWinSlots);  \r\n  return finalWinSlots;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////","import React from 'react';\r\n\r\nfunction InfosPage() {\r\n  const connectXInfos = \r\n    <div className=\"infos\">\r\n      <h3>Connect-X</h3>\r\n      <h4>General rules</h4>\r\n      <p>It is a Connect 4 like game, in which you can choose the board dimensions, as well as use special actions!<br/>\r\n      Each turn, in addition of playing a token, the players can choose to use one of three different actions during their turn:</p>\r\n      <ul>\r\n        <li>turn the gravity OFF or ON again</li>\r\n        <li>flip the board to the left</li>\r\n        <li>flip the board to the right</li>\r\n      </ul>\r\n      <h4>Versus mode</h4>\r\n      <p>You can also play online versus an opponent! Just click on the multiplayer button and wait for your opponent to do the same, you'll be notified when the game starts!<br/>\r\n      Note that the board dimensions that the versus will take place on are the one currently used by the first player to request the versus.</p>\r\n    </div>\r\n\r\n  return (\r\n    <div className=\"infosPage\">\r\n      <h2>Welcome to the games!</h2>\r\n      {connectXInfos}\r\n      <h3>Other games to come soon...</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfosPage;","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport { Nav } from './features/nav/Nav';\r\n// import { Counter } from './features/counter/Counter';\r\n// import { TicTacToe } from './features/tictactoe/TicTacToe';\r\n// import { Tbd } from './features/bejeweled/Tbd';\r\nimport { ConnectX } from './features/connectX/ConnectX';\r\nimport InfosPage from './pages/InfosPage';\r\n\r\nimport { loadSessionItems } from './localStorage';\r\nimport history from './history';\r\n// CSS\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: {\r\n        // 'Counter': Counter,\r\n        // 'TicTacToe': TicTacToe,\r\n        // 'Tbd': Tbd\r\n        'Connect-X': ConnectX,\r\n        'i': InfosPage,\r\n      },\r\n      itemSelected: 'i',\r\n      playerInfos: null,    \r\n    };\r\n    this.handleClick = this.handleClick.bind(this);    \r\n  }\r\n\r\n  componentDidMount() {\r\n    let playerInfos = this.state.playerInfos; \r\n    console.log(\"componentDidMount\",playerInfos);\r\n    if (!playerInfos) {\r\n      playerInfos = loadSessionItems('playerInfos');\r\n      console.log(\"pseudo after loadState\", playerInfos);\r\n      if (!playerInfos) playerInfos = null;\r\n      this.setState({ playerInfos: playerInfos});\r\n      if (!playerInfos) {\r\n        history.push(`/redux-project/login`);\r\n      }\r\n    }\r\n    document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);    \r\n  }\r\n\r\n  componentDidUpdate() {\r\n    document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);    \r\n  }\r\n\r\n  handleClick(i) {\r\n    this.setState({ itemSelected: i.target.name});\r\n  }\r\n\r\n  render() {\r\n    const playerInfos = this.state.playerInfos; \r\n    console.log(\"render\",playerInfos);\r\n    const itemSelected = this.state.itemSelected ? React.createElement(this.state.items[this.state.itemSelected], {playerInfos: playerInfos}) : null;    \r\n    return (\r\n      <div className=\"App\">\r\n        <Nav items={this.state.items} itemSelected={this.state.itemSelected} handleClick={this.handleClick} pseudo={playerInfos ? playerInfos.pseudo : ''}/>\r\n        <div className=\"main\">{itemSelected}</div>\r\n{/*        <footer>\r\n          <span>\r\n            <span>Learn </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux-toolkit.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux Toolkit\r\n            </a>\r\n            ,<span> and </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://react-redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React Redux\r\n            </a>\r\n          </span>        \r\n        </footer>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n\treturn (\r\n\t\t<h2 className=\"notFound\">Nothing to see here</h2>\r\n\t)\r\n}\r\n\r\nexport default NotFound;","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n    reset: (state) => {\r\n      state.value = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\nexport const { increment, decrement, incrementByAmount, reset } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import { fetchCount } from './tictactoeAPI';\r\n\r\nconst initialState = {\r\n  // Shared states\r\n  history: [{\r\n    squares: Array(9).fill(null),\r\n  }],\r\n  winSquares: [], \r\n\r\n  // Game only states\r\n  xIsNext: true,\r\n  stepNumber: 0,\r\n  sortIsAsc: true,\r\n};\r\n\r\nexport const tictactoeSlice = createSlice({\r\n  name: 'tictactoe',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    handleClick: (state, action) => {\r\n      const history = state.history.slice(0, state.stepNumber + 1);\r\n      // We ensure the erasure of any \"future\" steps if the game is resumed from a history move\r\n      const current = history[history.length - 1];    \r\n      const squares = current.squares.slice();\r\n\r\n      if (state.winSquares.length || squares[action.payload] ) {\r\n        return; // Can't play a square if there's a winner or if it has already been played\r\n      }\r\n      // We alternate players, add the current board to the history, and assign the stepNumber based on the new history\r\n      squares[action.payload] = state.xIsNext ? 'X' : 'O';\r\n\r\n      state.history = history.concat([{squares: squares}]);\r\n      state.stepNumber = history.length;      \r\n      state.xIsNext = !state.xIsNext      \r\n    },\r\n\r\n    jumpTo: (state, action) => {\r\n      state.stepNumber = action.payload;\r\n      state.xIsNext = (action.payload % 2) === 0;\r\n    },\r\n\r\n    toggleSort: (state) => {\r\n      state.sortIsAsc = state.sortIsAsc ? false : true;\r\n    },\r\n\r\n    reset: (state) => {\r\n      state.history = [{squares: Array(9).fill(null)}];\r\n      state.stepNumber = 0;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: (builder) => {\r\n  //   builder\r\n  //     .addCase(incrementAsync.pending, (state) => {\r\n  //       state.status = 'loading';\r\n  //     })\r\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\r\n  //       state.status = 'idle';\r\n  //       state.value += action.payload;\r\n  //     });\r\n  // },\r\n});\r\n\r\nexport const { handleClick, jumpTo, toggleSort, reset } = tictactoeSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.tictactoe.value)`\r\nexport const selectHistory = (state) => state.tictactoe.history;\r\nexport const selectStepNumber = (state) => state.tictactoe.stepNumber;\r\nexport const selectXIsNext = (state) => state.tictactoe.xIsNext;\r\nexport const selectSortIsAsc = (state) => state.tictactoe.sortIsAsc;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default tictactoeSlice.reducer;\r\n","import {\r\n\tconfigureStore,\r\n\tcombineReducers,\r\n\tgetDefaultMiddleware\r\n} from '@reduxjs/toolkit';\r\n\r\nimport navReducer from '../features/nav/navSlice';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport tictactoeReducer from '../features/tictactoe/tictactoeSlice';\r\nimport connectXReducer from '../features/connectX/connectXSlice';\r\n\r\nconst combinedReducer = combineReducers({\r\n  nav: navReducer,\r\n  counter: counterReducer,\r\n  tictactoe: tictactoeReducer,\r\n  connectX: connectXReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n// Reducers are supposed to return the initial state when they are called\r\n// with undefined as the first argument, no matter the action\r\n  if (action.type === 'nav/reset') {\r\n    state = undefined;\r\n  }\r\n  return combinedReducer(state, action);\r\n};\r\n\r\nconst customizedMiddleware = getDefaultMiddleware({\r\n  serializableCheck: false\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [...customizedMiddleware]\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// Rooter\r\nimport {Router, Route, Switch} from 'react-router-dom';\r\nimport history from './history';\r\n\r\n//Components\r\nimport Connexion from './pages/Connexion'\r\nimport App from './App';\r\nimport NotFound from './pages/NotFound'\r\n\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nconst baseURL = \"/redux-project\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n\t\t\t<Router history={history}>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path={`${baseURL}/login`} component={Connexion} />\r\n\t\t\t\t\t<Route path={`${baseURL}`} component={App} /> \r\n\t\t\t\t\t<Route path={`${baseURL}/`} component={NotFound}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"ConnectX_game__1x_fZ\",\"main\":\"ConnectX_main__6vhcL\",\"statusHandler\":\"ConnectX_statusHandler__3YJ_C\",\"previousStatus\":\"ConnectX_previousStatus__2I2T6\",\"canEndTurn\":\"ConnectX_canEndTurn__AbWWA\",\"endTurn\":\"ConnectX_endTurn__13PRx\",\"redPlayerTurn\":\"ConnectX_redPlayerTurn__2yS_K\",\"bluePlayerTurn\":\"ConnectX_bluePlayerTurn__3Aih7\",\"board\":\"ConnectX_board__3OnTo\",\"main_board\":\"ConnectX_main_board__1BL24\",\"board_row\":\"ConnectX_board_row__CsIJA\",\"slot\":\"ConnectX_slot__25hJA\",\"disabledBoard\":\"ConnectX_disabledBoard__2gQ8q\",\"slotFilled\":\"ConnectX_slotFilled__3GXCE\",\"slotFilledX\":\"ConnectX_slotFilledX___bTyR\",\"slotFilledO\":\"ConnectX_slotFilledO__MNApa\",\"gameInfos\":\"ConnectX_gameInfos__3A7p2\",\"controls\":\"ConnectX_controls__ekhdW\",\"status\":\"ConnectX_status__2MWFR\",\"moves\":\"ConnectX_moves__1ki_t\",\"moves_board\":\"ConnectX_moves_board__22KjK\",\"highlighted\":\"ConnectX_highlighted__B2e4K\",\"selected\":\"ConnectX_selected__1Puyt\",\"kbd-navigation\":\"ConnectX_kbd-navigation__35g11\",\"scrollableX\":\"ConnectX_scrollableX__3qCQG\",\"toggleSort\":\"ConnectX_toggleSort__1_Kx-\",\"hidden\":\"ConnectX_hidden__q8zIi\",\"win\":\"ConnectX_win__X-N9o\",\"scaleAnim\":\"ConnectX_scaleAnim__3zEhe\",\"floating\":\"ConnectX_floating__D0otu\",\"Slot-floating\":\"ConnectX_Slot-floating__2-Yy4\",\"transition\":\"ConnectX_transition__38xtB\",\"fadeInOnHover\":\"ConnectX_fadeInOnHover__2GqTp\",\"hasTransition\":\"ConnectX_hasTransition__1g-sA\",\"flip\":\"ConnectX_flip__2PQK3\",\"fadeout\":\"ConnectX_fadeout__2xFop\",\"fall\":\"ConnectX_fall__13rRa\"};"],"sourceRoot":""}